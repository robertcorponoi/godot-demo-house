[gd_scene load_steps=1 format=2]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.30588236451148987, 0.38823530077934265,
		0.38823530077934265, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=3 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.3686274588108063, 0.46666666865348816,
		0.46666666865348816, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=4 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(3)

[sub_resource id=5 type="ArrayMesh"]

resource_name = "Mesh computerKeyboard"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(0.2822, 0.0, -0.118192, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118192, 0.2822, 0.0, 0.0, 0.2822, 0.027556, -0.0971237, 0.0, 0.027556, -0.118192, 0.0, 0.027556, -0.0971237, 0.2822, 0.027556, -0.118192, 0.0, 0.00712733, 0.0, 0.0190845, 0.0106124, -0.016569, 0.0, 0.027556, -0.0971237, 0.0190845, 0.0106124, -0.016569, 0.0, 0.00712733, 0.0, 0.2822, 0.00712733, 0.0, 0.0190845, 0.0106124, -0.016569, 0.2822, 0.00712733, 0.0, 0.196948, 0.0106124, -0.016569, 0.196948, 0.0106124, -0.016569, 0.2822, 0.00712733, 0.0, 0.217566, 0.0106124, -0.016569, 0.196948, 0.0106124, -0.016569, 0.217566, 0.0106124, -0.016569, 0.196948, 0.0240709, -0.0805548, 0.217566, 0.0106124, -0.016569, 0.2822, 0.00712733, 0.0, 0.263115, 0.0106124, -0.016569, 0.263115, 0.0106124, -0.016569, 0.2822, 0.00712733, 0.0, 0.263115, 0.0240709, -0.0805548, 0.0190845, 0.0240709, -0.0805548, 0.0, 0.027556, -0.0971237, 0.0190845, 0.0106124, -0.016569, 0.0, 0.027556, -0.0971237, 0.0190845, 0.0240709, -0.0805548, 0.2822, 0.027556, -0.0971237, 0.2822, 0.027556, -0.0971237, 0.0190845, 0.0240709, -0.0805548, 0.196948, 0.0240709, -0.0805548, 0.2822, 0.027556, -0.0971237, 0.263115, 0.0240709, -0.0805548, 0.2822, 0.00712733, 0.0, 0.2822, 0.027556, -0.0971237, 0.196948, 0.0240709, -0.0805548, 0.217566, 0.0240709, -0.0805548, 0.217566, 0.0240709, -0.0805548, 0.2822, 0.027556, -0.0971237, 0.217566, 0.0240709, -0.0805548, 0.263115, 0.0240709, -0.0805548, 0.0, 0.0, -0.118192, 0.2822, 0.027556, -0.118192, 0.2822, 0.0, -0.118192, 0.0, 0.027556, -0.118192, 0.2822, 0.00712733, 0.0, 0.0, 0.0, 0.0, 0.2822, 0.0, 0.0, 0.0, 0.00712733, 0.0, 0.2822, 0.0, -0.118192, 0.2822, 0.00712733, 0.0, 0.2822, 0.0, 0.0, 0.2822, 0.00712733, 0.0, 0.2822, 0.0, -0.118192, 0.2822, 0.027556, -0.0971237, 0.2822, 0.027556, -0.0971237, 0.2822, 0.027556, -0.118192, 0.0, 0.027556, -0.0971237, 0.0, 0.0, 0.0, 0.0, 0.00712733, 0.0, 0.0, 0.0, -0.118192, 0.0, 0.027556, -0.118192),
		Vector3Array(0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.22923e-07, 0.978587, 0.205833, -1.22923e-07, 0.978587, 0.205833, -1.22923e-07, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, -1.86584e-07, 0.978587, 0.205832, -1.86584e-07, 0.978587, 0.205832, -1.86584e-07, 0.978587, 0.205832, 1.86585e-07, 0.978587, 0.205833, 1.86585e-07, 0.978587, 0.205833, 1.86585e-07, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 1.22923e-07, 0.978587, 0.205833, 1.22923e-07, 0.978587, 0.205833, 1.22923e-07, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.99775e-07, 1.0, 0.0, 2.99775e-07, 1.0, 0.0, 2.99775e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0),
		FloatArray(-1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.19762e-07, 2.78172e-08, 1.0, 1.0, 1.19762e-07, 2.78172e-08, 1.0, 1.0, 1.19762e-07, 2.78172e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.67315e-07, 1.1102e-07, 1.0, 1.0, 1.67315e-07, 1.1102e-07, 1.0, 1.0, 1.67315e-07, 1.1102e-07, 1.0, 1.0, -1.21495e-07, -3.28867e-07, 1.0, 1.0, -1.21495e-07, -3.28867e-07, 1.0, 1.0, -1.21495e-07, -3.28867e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.80665e-07, 2.61735e-07, 1.0, 1.0, -1.80665e-07, 2.61735e-07, 1.0, 1.0, -1.80665e-07, 2.61735e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 2.99775e-07, 7.61429e-09, -1.0, 1.0, 2.99775e-07, 7.61429e-09, -1.0, 1.0, 2.99775e-07, 7.61429e-09, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-11.1102, -3.65323, 0.0, 1.0, 0.0, -3.65323, -11.1102, 1.0, 11.1102, -2.82377, 0.0, -3.65323, 0.0, -2.82377, 11.1102, -3.65323, 0.0, 0.942243, 0.751358, 0.275646, 1.07703e-14, -2.9652, 0.751358, 0.275646, 0.0, 0.942243, 11.1102, 0.942243, 0.751358, 0.275646, 11.1102, 0.942243, 7.75385, 0.275646, 7.75385, 0.275646, 11.1102, 0.942243, 8.56561, 0.275646, 7.75385, 0.275646, 8.56561, 0.275646, 7.75385, -2.2986, 8.56561, 0.275646, 11.1102, 0.942243, 10.3589, 0.275646, 10.3589, 0.275646, 11.1102, 0.942243, 10.3589, -2.2986, 0.751358, -2.2986, 1.07703e-14, -2.9652, 0.751358, 0.275646, 1.07703e-14, -2.9652, 0.751358, -2.2986, 11.1102, -2.9652, 11.1102, -2.9652, 0.751358, -2.2986, 7.75385, -2.2986, 11.1102, -2.9652, 10.3589, -2.2986, 11.1102, 0.942243, 11.1102, -2.9652, 7.75385, -2.2986, 8.56561, -2.2986, 8.56561, -2.2986, 11.1102, -2.9652, 8.56561, -2.2986, 10.3589, -2.2986, 0.0, 1.0, -11.1102, -0.0848819, -11.1102, 1.0, 0.0, -0.0848819, 11.1102, 0.719397, 0.0, 1.0, 11.1102, 1.0, 0.0, 0.719397, 4.65323, 1.0, 3.13276e-14, 0.719397, 3.13276e-14, 1.0, 3.13276e-14, 0.719397, 4.65323, 1.0, 3.82377, -0.0848819, 3.82377, -0.0848819, 4.65323, -0.0848819, -3.82377, -0.0848819, -1.42109e-14, 1.0, -1.42109e-14, 0.719397, -4.65323, 1.0, -4.65323, -0.0848819),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4, 8, 10, 9, 11, 13, 12, 14, 16, 15, 17, 19, 18, 20, 22, 21, 23, 25, 24, 26, 28, 27, 29, 31, 30, 32, 34, 33, 35, 37, 36, 38, 40, 39, 41, 43, 42, 44, 21, 22, 45, 47, 46, 48, 50, 49, 49, 51, 48, 52, 54, 53, 53, 55, 52, 56, 58, 57, 59, 61, 60, 62, 63, 56, 64, 66, 65, 65, 67, 64, 67, 68, 64)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(4),
	"primitive":4,
	"arrays":[
		Vector3Array(0.196948, 0.0106124, -0.016569, 0.0190845, 0.0240709, -0.0805548, 0.0190845, 0.0106124, -0.016569, 0.0190845, 0.0240709, -0.0805548, 0.196948, 0.0106124, -0.016569, 0.196948, 0.0240709, -0.0805548, 0.263115, 0.0106124, -0.016569, 0.217566, 0.0240709, -0.0805548, 0.217566, 0.0106124, -0.016569, 0.217566, 0.0240709, -0.0805548, 0.263115, 0.0106124, -0.016569, 0.263115, 0.0240709, -0.0805548),
		Vector3Array(0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833, 0.0, 0.978587, 0.205833),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(7.75385, 0.275646, 0.751358, -2.2986, 0.751358, 0.275646, 0.751358, -2.2986, 7.75385, 0.275646, 7.75385, -2.2986, 10.3589, 0.275646, 8.56561, -2.2986, 8.56561, 0.275646, 8.56561, -2.2986, 10.3589, 0.275646, 10.3589, -2.2986),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10)
	],
	"morph_arrays":[]
}

[sub_resource id=6 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.30588236451148987, 0.38823530077934265,
		0.38823530077934265, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=7 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(6)

[sub_resource id=8 type="ArrayMesh"]

resource_name = "Mesh computerMouse"
surfaces/0 = {
	"material":SubResource(7),
	"primitive":4,
	"arrays":[
		Vector3Array(-0.02485, 0.0, -0.0228922, -0.012425, 0.0, 0.0, -0.02485, 0.0153345, -0.0228922, 0.02485, 0.0153345, -0.0228922, 0.012425, 0.0, 0.0, 0.02485, 0.0, -0.0228922, -0.012425, 0.0, 0.0, 0.02485, 0.0153345, -0.0228922, -0.02485, 0.0153345, -0.0228922, 0.02485, 0.0153345, -0.0228922, -0.012425, 0.0, 0.0, 0.012425, 0.0, 0.0, -0.0243285, 0.0, -0.0660678, -0.02485, 0.0, -0.0228922, -0.02485, 0.0, -0.0595517, -0.012425, 0.0, 0.0, -0.0220246, 0.0, -0.0722096, -0.0181069, 0.0, -0.077527, -0.0128626, 0.0, -0.0816304, -0.00667586, 0.0, -0.0842193, 0.012425, 0.0, 0.0, 1.44382e-15, 0.0, -0.0851038, 0.00667586, 0.0, -0.0842193, 0.0128626, 0.0, -0.0816304, 0.02485, 0.0, -0.0228922, 0.0181069, 0.0, -0.077527, 0.02485, 0.0, -0.0228922, 0.0181069, 0.0, -0.077527, 0.0220246, 0.0, -0.0722096, 0.02485, 0.0, -0.0228922, 0.0220246, 0.0, -0.0722096, 0.0243285, 0.0, -0.0660678, 0.02485, 0.0, -0.0595517, 0.02485, 0.0153345, -0.0228922, -0.02485, 0.023572, -0.0595517, -0.02485, 0.0153345, -0.0228922, -0.02485, 0.023572, -0.0595517, 0.02485, 0.0153345, -0.0228922, 0.02485, 0.023572, -0.0595517, -0.02485, 0.023572, -0.0595517, -0.02485, 0.0, -0.0228922, -0.02485, 0.0153345, -0.0228922, -0.02485, 0.0, -0.0228922, -0.02485, 0.023572, -0.0595517, -0.02485, 0.0, -0.0595517, 0.02485, 0.0, -0.0595517, 0.02485, 0.0153345, -0.0228922, 0.02485, 0.0, -0.0228922, 0.02485, 0.0153345, -0.0228922, 0.02485, 0.0, -0.0595517, 0.02485, 0.023572, -0.0595517, 0.02485, 0.023572, -0.0595517, -0.0243285, 0.023572, -0.0660678, -0.02485, 0.023572, -0.0595517, -0.0243285, 0.023572, -0.0660678, 0.02485, 0.023572, -0.0595517, -0.0220246, 0.023572, -0.0722096, -0.0181069, 0.023572, -0.077527, -0.0128626, 0.023572, -0.0816304, -0.0128626, 0.023572, -0.0816304, 0.02485, 0.023572, -0.0595517, -0.00667586, 0.023572, -0.0842193, -0.00667586, 0.023572, -0.0842193, 0.02485, 0.023572, -0.0595517, 1.44382e-15, 0.023572, -0.0851038, 1.44382e-15, 0.023572, -0.0851038, 0.02485, 0.023572, -0.0595517, 0.00667586, 0.023572, -0.0842193, 0.00667586, 0.023572, -0.0842193, 0.02485, 0.023572, -0.0595517, 0.0128626, 0.023572, -0.0816304, 0.0128626, 0.023572, -0.0816304, 0.02485, 0.023572, -0.0595517, 0.0181069, 0.023572, -0.077527, 0.0220246, 0.023572, -0.0722096, 0.0243285, 0.023572, -0.0660678, -0.02485, 0.023572, -0.0595517, -0.0243285, 0.023572, -0.0660678, 0.02485, 0.023572, -0.0595517, -0.0220246, 0.023572, -0.0722096, -0.0181069, 0.023572, -0.077527, -0.0128626, 0.023572, -0.0816304, -0.00667586, 0.023572, -0.0842193, 0.02485, 0.023572, -0.0595517, -0.0128626, 0.023572, -0.0816304, 1.44382e-15, 0.023572, -0.0851038, 0.02485, 0.023572, -0.0595517, -0.00667586, 0.023572, -0.0842193, 0.00667586, 0.023572, -0.0842193, 0.0128626, 0.023572, -0.0816304, 0.02485, 0.023572, -0.0595517, 0.00667586, 0.023572, -0.0842193, 0.0181069, 0.023572, -0.077527, 0.02485, 0.023572, -0.0595517, 0.0128626, 0.023572, -0.0816304, 0.0220246, 0.023572, -0.0722096, 0.0243285, 0.023572, -0.0660678, 0.0243285, 0.0, -0.0660678, 0.02485, 0.023572, -0.0595517, 0.02485, 0.0, -0.0595517, 0.0243285, 0.023572, -0.0660678, -0.0243285, 0.023572, -0.0660678, -0.02485, 0.0, -0.0595517, -0.02485, 0.023572, -0.0595517, -0.0243285, 0.0, -0.0660678, -0.0220246, 0.023572, -0.0722096, -0.0243285, 0.0, -0.0660678, -0.0243285, 0.023572, -0.0660678, -0.0220246, 0.0, -0.0722096, -0.0181069, 0.023572, -0.077527, -0.0220246, 0.0, -0.0722096, -0.0220246, 0.023572, -0.0722096, -0.0181069, 0.0, -0.077527, -0.0181069, 0.023572, -0.077527, -0.0128626, 0.0, -0.0816304, -0.0181069, 0.0, -0.077527, -0.0128626, 0.023572, -0.0816304, -0.0128626, 0.023572, -0.0816304, -0.00667586, 0.0, -0.0842193, -0.0128626, 0.0, -0.0816304, -0.00667586, 0.023572, -0.0842193, -0.00667586, 0.023572, -0.0842193, 1.44382e-15, 0.0, -0.0851038, -0.00667586, 0.0, -0.0842193, 1.44382e-15, 0.023572, -0.0851038, 1.44382e-15, 0.023572, -0.0851038, 0.00667586, 0.0, -0.0842193, 1.44382e-15, 0.0, -0.0851038, 0.00667586, 0.023572, -0.0842193, 0.00667586, 0.023572, -0.0842193, 0.0128626, 0.0, -0.0816304, 0.00667586, 0.0, -0.0842193, 0.0128626, 0.023572, -0.0816304, 0.0128626, 0.023572, -0.0816304, 0.0181069, 0.0, -0.077527, 0.0128626, 0.0, -0.0816304, 0.0181069, 0.023572, -0.077527, 0.0181069, 0.0, -0.077527, 0.0220246, 0.023572, -0.0722096, 0.0220246, 0.0, -0.0722096, 0.0181069, 0.023572, -0.077527, 0.0220246, 0.0, -0.0722096, 0.0243285, 0.023572, -0.0660678, 0.0243285, 0.0, -0.0660678, 0.0220246, 0.023572, -0.0722096),
		Vector3Array(-0.878889, 0.0, 0.477026, -0.878889, 0.0, 0.477026, -0.878889, 0.0, 0.477026, 0.878889, 0.0, 0.477026, 0.878889, 0.0, 0.477026, 0.878889, 0.0, 0.477026, 0.0, 0.830824, 0.556535, 0.0, 0.830824, 0.556535, 0.0, 0.830824, 0.556535, 0.0, 0.830824, 0.556534, 0.0, 0.830824, 0.556534, 0.0, 0.830824, 0.556534, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.975672, 0.219235, 0.0, 0.975672, 0.219235, 0.0, 0.975672, 0.219235, 0.0, 0.975672, 0.219235, 0.0, 0.975672, 0.219235, 0.0, 0.975672, 0.219235, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 4.9702e-07, 1.0, 0.0, 4.9702e-07, 1.0, 0.0, 4.9702e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.10282e-06, 1.0, 0.0, -1.10282e-06, 1.0, 0.0, -1.10282e-06, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -4.9702e-07, -1.0, 0.0, -4.9702e-07, -1.0, 0.0, -4.9702e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.10282e-06, -1.0, 0.0, 1.10282e-06, -1.0, 0.0, 1.10282e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.976038, 6.67401e-06, -0.217601, 0.996813, 0.0, -0.0797703, 0.996813, 0.0, -0.0797709, 0.976038, -6.64251e-06, -0.217601, -0.976038, -6.67401e-06, -0.217601, -0.996813, 0.0, -0.0797703, -0.996813, 0.0, -0.0797709, -0.976038, 6.64251e-06, -0.217601, -0.879042, -6.60564e-06, -0.476745, -0.976032, 6.67401e-06, -0.217629, -0.976031, -6.64251e-06, -0.21763, -0.879042, 6.57447e-06, -0.476745, -0.717264, -6.50535e-06, -0.696802, -0.879058, 6.60564e-06, -0.476714, -0.879058, -6.57447e-06, -0.476714, -0.717264, 6.47465e-06, -0.696802, -0.717289, -6.47465e-06, -0.696776, -0.505625, 6.3748e-06, -0.862753, -0.717289, 6.50535e-06, -0.696776, -0.505625, -6.40503e-06, -0.862753, -0.505665, -6.3748e-06, -0.86273, -0.260943, 6.30217e-06, -0.965354, -0.505665, 6.40503e-06, -0.86273, -0.260943, -6.33205e-06, -0.965354, -0.260983, -6.30217e-06, -0.965343, 3.65078e-06, 6.27493e-06, -1.0, -0.260983, 6.33205e-06, -0.965343, 3.65078e-06, -6.30468e-06, -1.0, -3.65078e-06, -6.27493e-06, -1.0, 0.260983, 6.30217e-06, -0.965343, -3.65078e-06, 6.30468e-06, -1.0, 0.260983, -6.33205e-06, -0.965343, 0.260943, -6.30217e-06, -0.965354, 0.505665, 6.3748e-06, -0.86273, 0.260943, 6.33205e-06, -0.965354, 0.505665, -6.40503e-06, -0.86273, 0.505625, -6.3748e-06, -0.862753, 0.717289, 6.47465e-06, -0.696776, 0.505625, 6.40503e-06, -0.862753, 0.717289, -6.50535e-06, -0.696776, 0.717264, 6.50535e-06, -0.696802, 0.879058, -6.60564e-06, -0.476714, 0.879058, 6.57447e-06, -0.476714, 0.717264, -6.47465e-06, -0.696802, 0.879042, 6.60564e-06, -0.476745, 0.976032, -6.67401e-06, -0.217629, 0.976031, 6.64251e-06, -0.21763, 0.879042, -6.57447e-06, -0.476745),
		FloatArray(0.477026, 0.0, 0.878889, 1.0, 0.477026, 0.0, 0.878889, 1.0, 0.477026, 0.0, 0.878889, 1.0, 0.477026, 0.0, -0.878889, 1.0, 0.477026, 0.0, -0.878889, 1.0, 0.477026, 0.0, -0.878889, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 4.07731e-08, 1.0, -1.0, 0.0, 1.77411e-07, 1.0, -1.0, 0.0, 1.23745e-06, 1.0, -1.0, 0.0, 5.89545e-08, 1.0, -1.0, 0.0, 9.39185e-07, 1.0, -1.0, 0.0, 2.79682e-07, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 3.58953e-07, 1.0, -1.0, 0.0, 4.55294e-08, 1.0, -1.0, 0.0, 1.46218e-06, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, -2.09008e-06, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, -2.34403e-07, 1.0, -1.0, 0.0, -9.89964e-06, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -2.104e-08, 1.0, 1.0, 0.0, -2.104e-08, 1.0, 1.0, 0.0, -2.104e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.79789e-08, 1.0, 1.0, 0.0, 2.53974e-08, 1.0, 1.0, 0.0, -3.02473e-10, 1.0, 1.0, 0.0, 7.34945e-09, 1.0, 1.0, 0.0, 8.74387e-08, 1.0, 1.0, -4.9702e-07, 1.00994e-07, 1.0, 1.0, -4.9702e-07, 1.00994e-07, 1.0, 1.0, -4.9702e-07, 1.00994e-07, 1.0, 1.0, 0.0, 6.14229e-07, 1.0, 1.0, 0.0, 6.14229e-07, 1.0, 1.0, 0.0, 6.14229e-07, 1.0, 1.0, 0.0, -7.85992e-07, 1.0, 1.0, 0.0, -7.85992e-07, 1.0, 1.0, 0.0, -7.85992e-07, 1.0, 1.0, 1.10282e-06, -2.80115e-07, 1.0, 1.0, 1.10282e-06, -2.80115e-07, 1.0, 1.0, 1.10282e-06, -2.80115e-07, 1.0, 1.0, 0.0, -3.55198e-07, 1.0, 1.0, 0.0, -1.71306e-07, 1.0, 1.0, 0.0, -2.88105e-07, 1.0, 1.0, 0.0, 3.01218e-07, 1.0, 1.0, 0.0, -5.00743e-07, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 8.75523e-09, -1.0, 1.0, 0.0, 1.67561e-08, -1.0, 1.0, 0.0, -5.72456e-09, -1.0, 1.0, 0.0, 7.34945e-09, -1.0, 1.0, 0.0, 8.74387e-08, -1.0, 1.0, -4.9702e-07, 1.26243e-07, -1.0, 1.0, -4.9702e-07, 1.26243e-07, -1.0, 1.0, -4.9702e-07, 1.26243e-07, -1.0, 1.0, 0.0, 2.81237e-07, -1.0, 1.0, 0.0, -9.75789e-08, -1.0, 1.0, 0.0, 6.06552e-07, -1.0, 1.0, 0.0, -7.95942e-07, -1.0, 1.0, 1.10282e-06, -2.24092e-07, -1.0, 1.0, 1.10282e-06, -2.24092e-07, -1.0, 1.0, 1.10282e-06, -2.24092e-07, -1.0, 1.0, 0.0, -2.88105e-07, -1.0, 1.0, 0.0, -2.55108e-07, -1.0, 1.0, 0.0, -3.55198e-07, -1.0, 1.0, 0.0, 2.89049e-07, -1.0, 1.0, 0.0, -7.51115e-07, -1.0, -0.217601, -9.37116e-07, -0.976038, 1.0, -0.0797703, 0.0, -0.996813, 1.0, -0.0797709, 0.0, -0.996813, 1.0, -0.217601, 9.32689e-07, -0.976038, 1.0, -0.217601, -9.37116e-07, 0.976038, 1.0, -0.0797703, 0.0, 0.996813, 1.0, -0.0797709, 0.0, 0.996813, 1.0, -0.217601, 9.32689e-07, 0.976038, 1.0, -0.476745, -9.17831e-07, 0.879042, 1.0, -0.217629, -9.37118e-07, 0.976032, 1.0, -0.21763, 9.32691e-07, 0.976031, 1.0, -0.476745, 9.13496e-07, 0.879042, 1.0, -0.696802, -8.89915e-07, 0.717264, 1.0, -0.476714, -9.1783e-07, 0.879058, 1.0, -0.476714, 9.13497e-07, 0.879058, 1.0, -0.696802, 8.85713e-07, 0.717264, 1.0, -0.696776, 8.85712e-07, 0.717289, 1.0, -0.862753, 8.5836e-07, 0.505625, 1.0, -0.696776, -8.89913e-07, 0.717289, 1.0, -0.862753, -8.62431e-07, 0.505625, 1.0, -0.86273, 8.58361e-07, 0.505665, 1.0, -0.965354, 8.38739e-07, 0.260943, 1.0, -0.86273, -8.6243e-07, 0.505665, 1.0, -0.965354, -8.42716e-07, 0.260943, 1.0, -0.965343, 8.38739e-07, 0.260983, 1.0, -1.0, 8.3144e-07, -3.65263e-06, 1.0, -0.965343, -8.42716e-07, 0.260983, 1.0, -1.0, -8.35382e-07, -3.65263e-06, 1.0, -1.0, 8.3144e-07, 3.65263e-06, 1.0, -0.965343, 8.38739e-07, -0.260983, 1.0, -1.0, -8.35382e-07, 3.65263e-06, 1.0, -0.965343, -8.42716e-07, -0.260983, 1.0, -0.965354, 8.38739e-07, -0.260943, 1.0, -0.86273, 8.58361e-07, -0.505665, 1.0, -0.965354, -8.42716e-07, -0.260943, 1.0, -0.86273, -8.6243e-07, -0.505665, 1.0, -0.862753, 8.5836e-07, -0.505625, 1.0, -0.696776, 8.85712e-07, -0.717289, 1.0, -0.862753, -8.62431e-07, -0.505625, 1.0, -0.696776, -8.89913e-07, -0.717289, 1.0, -0.696802, -8.89915e-07, -0.717264, 1.0, -0.476714, -9.1783e-07, -0.879058, 1.0, -0.476714, 9.13497e-07, -0.879058, 1.0, -0.696802, 8.85713e-07, -0.717264, 1.0, -0.476745, -9.17831e-07, -0.879042, 1.0, -0.217629, -9.37118e-07, -0.976032, 1.0, -0.21763, 9.32691e-07, -0.976031, 1.0, -0.476745, 9.13496e-07, -0.879042, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-1.25881, 1.0, -0.233348, 1.0, -1.25881, 0.396278, 1.25881, 0.396278, 0.233348, 1.0, 1.25881, 1.0, -0.489173, 1.0, 0.978346, -0.0847886, -0.978346, -0.0847886, 0.978346, -0.0847886, -0.489173, 1.0, 0.489173, 1.0, 0.957817, -1.6011, 0.978346, 0.098731, 0.978346, -1.34456, 0.489173, 1.0, 0.867109, -1.8429, 0.712871, -2.05224, 0.506402, -2.2138, 0.262829, -2.31572, -0.489173, 1.0, -5.68434e-14, -2.35054, -0.262829, -2.31572, -0.506402, -2.2138, -0.978346, 0.098731, -0.712871, -2.05224, -0.978346, 0.098731, -0.712871, -2.05224, -0.867109, -1.8429, -0.978346, 0.098731, -0.867109, -1.8429, -0.957817, -1.6011, -0.978346, -1.34456, 0.978346, -0.0117002, -0.978346, -1.49097, -0.978346, -0.0117002, -0.978346, -1.49097, 0.978346, -0.0117002, 0.978346, -1.49097, -2.34456, 0.0719685, -0.901269, 1.0, -0.901269, 0.396278, -0.901269, 1.0, -2.34456, 0.0719685, -2.34456, 1.0, 2.34456, 1.0, 0.901269, 0.396278, 0.901269, 1.0, 0.901269, 0.396278, 2.34456, 1.0, 2.34456, 0.0719685, 0.978346, -1.34456, -0.957817, -1.6011, -0.978346, -1.34456, -0.957817, -1.6011, 0.978346, -1.34456, -0.867109, -1.8429, -0.712871, -2.05224, -0.506402, -2.2138, -0.506402, -2.2138, 0.978346, -1.34456, -0.262829, -2.31572, -0.262829, -2.31572, 0.978346, -1.34456, 5.68434e-14, -2.35054, 5.68434e-14, -2.35054, 0.978346, -1.34456, 0.262829, -2.31572, 0.262829, -2.31572, 0.978346, -1.34456, 0.506402, -2.2138, 0.506402, -2.2138, 0.978346, -1.34456, 0.712871, -2.05224, 0.867109, -1.8429, 0.957817, -1.6011, -0.978346, -1.34456, -0.957817, -1.6011, 0.978346, -1.34456, -0.867109, -1.8429, -0.712871, -2.05224, -0.506402, -2.2138, -0.262829, -2.31572, 0.978346, -1.34456, -0.506402, -2.2138, 5.68434e-14, -2.35054, 0.978346, -1.34456, -0.262829, -2.31572, 0.262829, -2.31572, 0.506402, -2.2138, 0.978346, -1.34456, 0.262829, -2.31572, 0.712871, -2.05224, 0.978346, -1.34456, 0.506402, -2.2138, 0.867109, -1.8429, 0.957817, -1.6011, 2.5164, 1.0, 2.25904, 0.0719685, 2.25904, 1.0, 2.5164, 0.0719685, -2.5164, 0.0719685, -2.25904, 1.0, -2.25904, 0.0719685, -2.5164, 1.0, -2.35722, 0.0719685, -2.09896, 1.0, -2.09896, 0.0719685, -2.35722, 1.0, -2.03447, 0.0719685, -1.77444, 1.0, -1.77444, 0.0719685, -2.03447, 1.0, -1.31946, 0.0719685, -1.58162, 1.0, -1.31946, 1.0, -1.58162, 0.0719685, -0.773424, 0.0719685, -1.03746, 1.0, -0.773424, 1.0, -1.03746, 0.0719685, -0.174972, 0.0719685, -0.440098, 1.0, -0.174972, 1.0, -0.440098, 0.0719685, 0.440098, 0.0719685, 0.174972, 1.0, 0.440098, 1.0, 0.174972, 0.0719685, 1.03746, 0.0719685, 0.773424, 1.0, 1.03746, 1.0, 0.773424, 0.0719685, 1.58162, 0.0719685, 1.31946, 1.0, 1.58162, 1.0, 1.31946, 0.0719685, 2.03447, 1.0, 1.77444, 0.0719685, 1.77444, 1.0, 2.03447, 0.0719685, 2.35722, 1.0, 2.09896, 0.0719685, 2.09896, 1.0, 2.35722, 0.0719685),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 13, 15, 12, 15, 16, 12, 15, 17, 16, 15, 18, 17, 15, 19, 18, 15, 20, 19, 20, 21, 19, 20, 22, 21, 20, 23, 22, 20, 24, 23, 24, 25, 23, 26, 28, 27, 29, 31, 30, 29, 32, 31, 33, 35, 34, 36, 38, 37, 39, 41, 40, 42, 44, 43, 45, 47, 46, 48, 50, 49, 51, 53, 52, 54, 56, 55, 56, 57, 55, 57, 58, 55, 59, 61, 60, 62, 64, 63, 65, 67, 66, 68, 70, 69, 71, 73, 72, 73, 74, 72, 74, 75, 72, 76, 78, 77, 79, 77, 78, 80, 79, 78, 81, 80, 78, 82, 84, 83, 85, 87, 86, 88, 85, 86, 89, 91, 90, 92, 94, 93, 95, 92, 93, 96, 95, 93, 97, 99, 98, 98, 100, 97, 101, 103, 102, 102, 104, 101, 105, 107, 106, 106, 108, 105, 109, 111, 110, 110, 112, 109, 113, 115, 114, 114, 116, 113, 117, 119, 118, 118, 120, 117, 121, 123, 122, 122, 124, 121, 125, 127, 126, 126, 128, 125, 129, 131, 130, 130, 132, 129, 133, 135, 134, 134, 136, 133, 137, 139, 138, 138, 140, 137, 141, 143, 142, 142, 144, 141)
	],
	"morph_arrays":[]
}

[sub_resource id=9 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.30588236451148987, 0.38823530077934265,
		0.38823530077934265, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=10 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(9)

[sub_resource id=11 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.7406105399131775, 0.8228667378425598,
		0.8396226167678833, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=12 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(11)

[sub_resource id=13 type="ArrayMesh"]

resource_name = "Mesh computerScreen"
surfaces/0 = {
	"material":SubResource(10),
	"primitive":4,
	"arrays":[
		Vector3Array(-1.44382e-15, 0.294285, -0.0649825, -1.44382e-15, 0.046008, -0.0552751, -1.44382e-15, 0.0494791, -0.0305772, -1.44382e-15, 0.046008, -0.0552751, -1.44382e-15, 0.294285, -0.0649825, -1.44382e-15, 0.290814, -0.0896804, 0.385912, 0.0561888, -0.0315202, 0.00677568, 0.0555857, -0.0358115, 0.00677568, 0.0561888, -0.0315202, 0.385912, 0.0555857, -0.0358115, 0.392688, 0.0494791, -0.0305772, 0.385912, 0.0561888, -0.0315202, -1.44382e-15, 0.0494791, -0.0305772, 0.385912, 0.0561888, -0.0315202, 0.392688, 0.0494791, -0.0305772, 0.392688, 0.294285, -0.0649825, 0.385912, 0.0561888, -0.0315202, 0.392688, 0.294285, -0.0649825, 0.385912, 0.287575, -0.0640395, 0.385912, 0.287575, -0.0640395, 0.392688, 0.294285, -0.0649825, 0.00677568, 0.287575, -0.0640395, 0.00677568, 0.0561888, -0.0315202, -1.44382e-15, 0.0494791, -0.0305772, 0.385912, 0.0561888, -0.0315202, -1.44382e-15, 0.0494791, -0.0305772, 0.00677568, 0.0561888, -0.0315202, -1.44382e-15, 0.294285, -0.0649825, -1.44382e-15, 0.294285, -0.0649825, 0.00677568, 0.0561888, -0.0315202, 0.00677568, 0.287575, -0.0640395, -1.44382e-15, 0.294285, -0.0649825, 0.00677568, 0.287575, -0.0640395, 0.392688, 0.294285, -0.0649825, -1.44382e-15, 0.046008, -0.0552751, 0.160076, 0.091773, -0.061707, 0.392688, 0.046008, -0.0552751, 0.160076, 0.091773, -0.061707, -1.44382e-15, 0.046008, -0.0552751, -1.44382e-15, 0.290814, -0.0896804, 0.160076, 0.091773, -0.061707, -1.44382e-15, 0.290814, -0.0896804, 0.160076, 0.118908, -0.0655206, 0.160076, 0.118908, -0.0655206, -1.44382e-15, 0.290814, -0.0896804, 0.216412, 0.118908, -0.0655206, 0.216412, 0.091773, -0.061707, 0.392688, 0.046008, -0.0552751, 0.160076, 0.091773, -0.061707, 0.392688, 0.046008, -0.0552751, 0.216412, 0.091773, -0.061707, 0.392688, 0.290814, -0.0896804, 0.392688, 0.290814, -0.0896804, 0.216412, 0.091773, -0.061707, 0.216412, 0.118908, -0.0655206, 0.392688, 0.290814, -0.0896804, 0.216412, 0.118908, -0.0655206, -1.44382e-15, 0.290814, -0.0896804, 0.00677568, 0.0555857, -0.0358115, 0.00677568, 0.287575, -0.0640395, 0.00677568, 0.0561888, -0.0315202, 0.00677568, 0.287575, -0.0640395, 0.00677568, 0.0555857, -0.0358115, 0.00677568, 0.286972, -0.0683308, 0.392688, 0.046008, -0.0552751, -1.44382e-15, 0.0494791, -0.0305772, -1.44382e-15, 0.046008, -0.0552751, -1.44382e-15, 0.0494791, -0.0305772, 0.392688, 0.046008, -0.0552751, 0.392688, 0.0494791, -0.0305772, 0.385912, 0.286972, -0.0683308, 0.00677568, 0.287575, -0.0640395, 0.00677568, 0.286972, -0.0683308, 0.00677568, 0.287575, -0.0640395, 0.385912, 0.286972, -0.0683308, 0.385912, 0.287575, -0.0640395, 0.392688, 0.294285, -0.0649825, -1.44382e-15, 0.290814, -0.0896804, -1.44382e-15, 0.294285, -0.0649825, -1.44382e-15, 0.290814, -0.0896804, 0.392688, 0.294285, -0.0649825, 0.392688, 0.290814, -0.0896804, 0.392688, 0.046008, -0.0552751, 0.392688, 0.294285, -0.0649825, 0.392688, 0.0494791, -0.0305772, 0.392688, 0.294285, -0.0649825, 0.392688, 0.046008, -0.0552751, 0.392688, 0.290814, -0.0896804, 0.385912, 0.287575, -0.0640395, 0.385912, 0.0555857, -0.0358115, 0.385912, 0.0561888, -0.0315202, 0.385912, 0.0555857, -0.0358115, 0.385912, 0.287575, -0.0640395, 0.385912, 0.286972, -0.0683308, 0.216412, 0.118908, -0.0655206, 0.160076, 0.118908, -0.0704424, 0.160076, 0.118908, -0.0655206, 0.160076, 0.118908, -0.0704424, 0.216412, 0.118908, -0.0655206, 0.216412, 0.118908, -0.0704424, 0.160076, 0.118908, -0.0655206, 0.160076, 0.091773, -0.0639421, 0.160076, 0.091773, -0.061707, 0.160076, 0.091773, -0.0639421, 0.160076, 0.118908, -0.0655206, 0.160076, 0.017334, -0.0639421, 0.160076, 0.017334, -0.0856096, 0.160076, 0.118908, -0.0704424, 0.160076, 0.017334, -0.0856096, 0.160076, 0.118908, -0.0704424, 0.160076, 0.103741, -0.0856096, 0.216412, 0.017334, -0.0856096, 0.216412, 0.091773, -0.0639421, 0.216412, 0.017334, -0.0639421, 0.216412, 0.091773, -0.0639421, 0.216412, 0.017334, -0.0856096, 0.216412, 0.118908, -0.0655206, 0.216412, 0.118908, -0.0655206, 0.216412, 0.017334, -0.0856096, 0.216412, 0.118908, -0.0704424, 0.216412, 0.103741, -0.0856096, 0.216412, 0.118908, -0.0655206, 0.216412, 0.091773, -0.061707, 0.160076, 0.103741, -0.0856096, 0.216412, 0.017334, -0.0856096, 0.160076, 0.017334, -0.0856096, 0.216412, 0.103741, -0.0856096, 0.123039, 0.017334, -0.0130005, 0.110038, 0.0, -0.104004, 0.110038, 0.0, 0.0, 0.110038, 0.0, -0.104004, 0.123039, 0.017334, -0.0130005, 0.123039, 0.017334, -0.0996705, 0.123039, 0.017334, -0.0130005, 0.160076, 0.017334, -0.0639421, 0.123039, 0.017334, -0.0996705, 0.160076, 0.017334, -0.0639421, 0.123039, 0.017334, -0.0130005, 0.253449, 0.017334, -0.0130005, 0.160076, 0.017334, -0.0639421, 0.253449, 0.017334, -0.0130005, 0.216412, 0.017334, -0.0639421, 0.216412, 0.017334, -0.0856096, 0.160076, 0.017334, -0.0856096, 0.123039, 0.017334, -0.0996705, 0.160076, 0.017334, -0.0639421, 0.253449, 0.017334, -0.0996705, 0.26645, 0.0, -0.104004, 0.253449, 0.017334, -0.0130005, 0.26645, 0.0, 0.0, 0.253449, 0.017334, -0.0130005, 0.26645, 0.0, -0.104004, 0.253449, 0.017334, -0.0996705, 0.160076, 0.118908, -0.0704424, 0.216412, 0.103741, -0.0856096, 0.160076, 0.103741, -0.0856096, 0.216412, 0.103741, -0.0856096, 0.160076, 0.118908, -0.0704424, 0.216412, 0.118908, -0.0704424, 0.216412, 0.091773, -0.0639421, 0.160076, 0.091773, -0.061707, 0.160076, 0.091773, -0.0639421, 0.216412, 0.091773, -0.061707, 0.216412, 0.091773, -0.0639421, 0.160076, 0.017334, -0.0639421, 0.216412, 0.017334, -0.0639421, 0.160076, 0.091773, -0.0639421, 0.123039, 0.017334, -0.0996705, 0.26645, 0.0, -0.104004, 0.110038, 0.0, -0.104004, 0.26645, 0.0, -0.104004, 0.123039, 0.017334, -0.0996705, 0.253449, 0.017334, -0.0996705, 0.26645, 0.0, -0.104004, 0.110038, 0.0, 0.0, 0.110038, 0.0, -0.104004, 0.26645, 0.0, 0.0, 0.253449, 0.017334, -0.0130005, 0.110038, 0.0, 0.0, 0.26645, 0.0, 0.0, 0.110038, 0.0, 0.0, 0.253449, 0.017334, -0.0130005, 0.123039, 0.017334, -0.0130005),
		Vector3Array(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.990268, -0.139173, 0.0, 0.990268, -0.139173, 0.0, 0.990268, -0.139173, 0.0, 0.990268, -0.139173, 0.0, 0.139174, 0.990268, 0.0, 0.139174, 0.990268, 0.0, 0.139174, 0.990268, -5.56005e-07, 0.139173, 0.990268, -5.56005e-07, 0.139173, 0.990268, -5.56005e-07, 0.139173, 0.990268, -4.77956e-07, 0.139174, 0.990268, -4.77956e-07, 0.139174, 0.990268, -4.77956e-07, 0.139174, 0.990268, 0.0, 0.139173, 0.990268, 0.0, 0.139173, 0.990268, 0.0, 0.139173, 0.990268, 0.0, 0.139173, 0.990268, 0.0, 0.139173, 0.990268, 0.0, 0.139173, 0.990268, 5.56004e-07, 0.139173, 0.990268, 5.56004e-07, 0.139173, 0.990268, 5.56004e-07, 0.139173, 0.990268, 5.8825e-07, 0.139173, 0.990268, 5.8825e-07, 0.139173, 0.990268, 5.8825e-07, 0.139173, 0.990268, 0.0, 0.139174, 0.990268, 0.0, 0.139174, 0.990268, 0.0, 0.139174, 0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 4.82025e-08, -0.139173, -0.990268, 4.82025e-08, -0.139173, -0.990268, 4.82025e-08, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 0.0, -0.139173, -0.990268, 1.0, 0.0, 2.29941e-07, 1.0, 0.0, 2.29941e-07, 1.0, 0.0, 2.29941e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.990268, 0.139173, 0.0, -0.990268, 0.139173, 0.0, -0.990268, 0.139173, 0.0, -0.990268, 0.139173, 0.0, -0.990268, 0.139173, 0.0, -0.990268, 0.139173, 0.0, -0.990269, 0.139167, 0.0, -0.990269, 0.139167, 0.0, -0.990269, 0.139167, 0.0, -0.990269, 0.139167, 0.0, -0.990269, 0.139167, 0.0, -0.990269, 0.139167, 0.0, 0.990268, -0.139172, 0.0, 0.990268, -0.139172, 0.0, 0.990268, -0.139172, 0.0, 0.990268, -0.139172, 0.0, 0.990268, -0.139172, 0.0, 0.990268, -0.139172, 1.0, 0.0, 2.41681e-06, 1.0, 0.0, 2.41681e-06, 1.0, 0.0, 2.41681e-06, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 9.39883e-06, -1.0, 0.0, 9.39883e-06, -1.0, 0.0, 9.39883e-06, -1.0, 0.0, -4.22516e-06, -1.0, 0.0, -4.22516e-06, -1.0, 0.0, -4.22516e-06, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.42127e-06, -1.0, 0.0, -1.42127e-06, -1.0, 0.0, -1.42127e-06, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 5.28078e-06, 1.0, 0.0, 5.28078e-06, 1.0, 0.0, 5.28078e-06, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, -3.62663e-08, 1.0, 0.0, -3.62663e-08, 1.0, 0.0, -3.62663e-08, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.8, 0.600001, 0.0, 0.8, 0.600001, 0.0, 0.8, 0.600001, 0.0, 0.8, 0.600001, 0.0, 0.8, 0.600001, 0.0, 0.8, 0.600001, 0.0, 0.0, 0.707106, -0.707107, 0.0, 0.707106, -0.707107, 0.0, 0.707106, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.242536, -0.970142, 0.0, 0.242536, -0.970142, 0.0, 0.242536, -0.970142, 0.0, 0.242536, -0.970142, 0.0, 0.242536, -0.970142, 0.0, 0.242536, -0.970142, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8),
		FloatArray(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 4.23381e-07, 5.01967e-07, 1.0, 1.0, 4.23381e-07, 5.01967e-07, 1.0, 1.0, 4.23381e-07, 5.01967e-07, 1.0, 1.0, 3.75157e-06, -4.45991e-08, 1.0, 1.0, 3.75157e-06, -4.45991e-08, 1.0, 1.0, 3.75157e-06, -4.45991e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -4.25326e-07, -5.01692e-07, 1.0, 1.0, -4.25326e-07, -5.01692e-07, 1.0, 1.0, -4.25326e-07, -5.01692e-07, 1.0, 1.0, -2.86007e-06, -1.92074e-07, 1.0, 1.0, -2.86007e-06, -1.92074e-07, 1.0, 1.0, -2.86007e-06, -1.92074e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -1.74401e-08, 2.45105e-09, 1.0, -1.0, -1.74401e-08, 2.45105e-09, 1.0, -1.0, -1.74401e-08, 2.45105e-09, 1.0, -1.0, 2.97302e-09, -4.17829e-10, 1.0, -1.0, 2.97302e-09, -4.17829e-10, 1.0, -1.0, 2.97302e-09, -4.17829e-10, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -1.88299e-08, 2.64637e-09, 1.0, -1.0, -1.88299e-08, 2.64637e-09, 1.0, -1.0, -1.88299e-08, 2.64637e-09, 1.0, -1.0, -1.75077e-08, -4.62156e-08, 1.0, -1.0, -1.75077e-08, -4.62156e-08, 1.0, -1.0, -1.75077e-08, -4.62156e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 2.29941e-07, 1.05129e-07, -1.0, 1.0, 2.29941e-07, 1.05129e-07, -1.0, 1.0, 2.29941e-07, 1.05129e-07, -1.0, 1.0, 0.0, 1.92736e-06, -1.0, 1.0, 0.0, 1.92736e-06, -1.0, 1.0, 0.0, 1.92736e-06, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 2.41681e-06, 1.53468e-08, -1.0, 1.0, 2.41681e-06, 1.53468e-08, -1.0, 1.0, 2.41681e-06, 1.53468e-08, -1.0, 1.0, 0.0, 4.45056e-07, -1.0, 1.0, 0.0, 4.45056e-07, -1.0, 1.0, 0.0, 4.45056e-07, -1.0, 1.0, 9.39883e-06, -5.98066e-06, 1.0, 1.0, 9.39883e-06, -5.98066e-06, 1.0, 1.0, 9.39883e-06, -5.98066e-06, 1.0, 1.0, -4.22516e-06, -5.98067e-06, 1.0, 1.0, -4.22516e-06, -5.98067e-06, 1.0, 1.0, -4.22516e-06, -5.98067e-06, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.61065e-06, 1.0, 1.0, 0.0, 4.20907e-08, 1.0, 1.0, 0.0, 1.59353e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.42127e-06, 5.77603e-07, 1.0, 1.0, -1.42127e-06, 5.77603e-07, 1.0, 1.0, -1.42127e-06, 5.77603e-07, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 5.28078e-06, -2.68264e-07, -1.0, 1.0, 5.28078e-06, -2.68263e-07, -1.0, 1.0, 5.28078e-06, -2.68263e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, -2.19241e-07, -1.0, 1.0, 0.0, -7.80988e-08, -1.0, 1.0, 0.0, -2.88802e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 3.62663e-08, -2.35818e-07, 1.0, 1.0, 3.62663e-08, -2.35818e-07, 1.0, 1.0, 3.62663e-08, -2.35818e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.61211e-08, 1.0, 1.0, 0.0, 2.51505e-07, 1.0, 1.0, 0.0, 3.80636e-08, 1.0, 1.0, 0.0, 3.62861e-08, 1.0, 1.0, 0.0, 4.66211e-08, 1.0, 1.0, 0.0, 8.84316e-08, 1.0, 1.0, 0.0, -2.26683e-08, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-2.55837, -10.586, -2.17619, -0.811339, -1.20383, -0.947995, -2.17619, -0.811339, -2.55837, -10.586, -3.53072, -10.4494, -15.1934, 1.921, -0.266759, 2.09161, -0.266759, 1.921, -15.1934, 2.09161, 15.4602, -1.09658, 15.1934, -1.36334, -5.68467e-14, -1.09658, 15.1934, -1.36334, 15.4602, -1.09658, 15.4602, -10.8293, 15.1934, -1.36334, 15.4602, -10.8293, 15.1934, -10.5626, 15.1934, -10.5626, 15.4602, -10.8293, 0.266759, -10.5626, 0.266759, -1.36334, -5.68467e-14, -1.09658, 15.1934, -1.36334, -5.68467e-14, -1.09658, 0.266759, -1.36334, -5.68504e-14, -10.8293, -5.68504e-14, -10.8293, 0.266759, -1.36334, 0.266759, -10.5626, -5.68504e-14, -10.8293, 0.266759, -10.5626, 15.4602, -10.8293, 5.68434e-14, -1.09658, -6.30221, -2.91606, -15.4602, -1.09658, -6.30221, -2.91606, 5.68434e-14, -1.09658, 5.68434e-14, -10.8293, -6.30221, -2.91606, 5.68434e-14, -10.8293, -6.30221, -3.99486, -6.30221, -3.99486, 5.68434e-14, -10.8293, -8.52015, -3.99486, -8.52015, -2.91606, -15.4602, -1.09658, -6.30221, -2.91606, -15.4602, -1.09658, -8.52015, -2.91606, -15.4602, -10.8293, -15.4602, -10.8293, -8.52015, -2.91606, -8.52015, -3.99486, -15.4602, -10.8293, -8.52015, -3.99486, 5.68434e-14, -10.8293, 1.4099, -1.18841, 2.52124, -10.3219, 1.24095, -1.21216, 2.52124, -10.3219, 1.4099, -1.18841, 2.69019, -10.2981, 15.4602, 2.90292, -5.68434e-14, 1.921, -5.68434e-14, 2.90292, -5.68434e-14, 1.921, 15.4602, 2.90292, 15.4602, 1.921, 15.1934, 2.09161, 0.266759, 1.921, 0.266759, 2.09161, 0.266759, 1.921, 15.1934, 2.09161, 15.1934, 1.921, -15.4602, 1.921, 5.68434e-14, 2.90292, 5.68434e-14, 1.921, 5.68434e-14, 2.90292, -15.4602, 1.921, -15.4602, 2.90292, 2.17619, -0.811339, 2.55837, -10.586, 1.20383, -0.947995, 2.55837, -10.586, 2.17619, -0.811339, 3.53072, -10.4494, -2.52124, -10.3219, -1.4099, -1.18841, -1.24095, -1.21216, -1.4099, -1.18841, -2.52124, -10.3219, -2.69019, -10.2981, 8.52015, -1.57955, 6.30221, -1.77332, 6.30221, -1.57955, 6.30221, -1.77332, 8.52015, -1.57955, 8.52015, -1.77332, -2.57955, -3.68142, -2.51741, -2.61311, -2.42941, -2.61311, -2.51741, -2.61311, -2.57955, -3.68142, -2.51741, 0.317559, -3.37046, 0.317559, -2.77332, -3.68142, -3.37046, 0.317559, -2.77332, -3.68142, -3.37046, -3.08428, 3.37046, 0.317559, 2.51741, -2.61311, 2.51741, 0.317559, 2.51741, -2.61311, 3.37046, 0.317559, 2.57955, -3.68142, 2.57955, -3.68142, 3.37046, 0.317559, 2.77332, -3.68142, 3.37046, -3.08428, 2.57955, -3.68142, 2.42941, -2.61311, -6.30221, -3.08428, -8.52015, 0.317559, -6.30221, 0.317559, -8.52015, -3.08428, -0.511831, -2.45239, -4.09465, -1.59933, -2.13241e-14, -1.59933, -4.09465, -1.59933, -0.511831, -2.45239, -3.92404, -2.45239, 4.84406, 0.488169, 6.30221, -1.51741, 4.84406, -2.92404, 6.30221, -1.51741, 4.84406, 0.488169, 9.97831, 0.488169, 6.30221, -1.51741, 9.97831, 0.488169, 8.52015, -1.51741, 8.52015, -2.37046, 6.30221, -2.37046, 4.84406, -2.92404, 6.30221, -1.51741, 9.97831, -2.92404, 4.09465, 7.29408, 0.511831, 6.44103, 2.13068e-14, 7.29408, 0.511831, 6.44103, 4.09465, 7.29408, 3.92404, 6.44103, -6.30221, -0.349227, -8.52015, 0.495251, -6.30221, 0.495251, -8.52015, 0.495251, -6.30221, -0.349227, -8.52015, -0.349227, -8.52015, -1.51741, -6.30221, -1.42941, -6.30221, -1.51741, -8.52015, -1.42941, 8.52015, -2.61311, 6.30221, 0.317559, 8.52015, 0.317559, 6.30221, -2.61311, -4.84406, 1.28965, -10.4901, 1.9931, -4.33222, 1.9931, -10.4901, 1.9931, -4.84406, 1.28965, -9.97831, 1.28965, -10.4901, -3.09465, -4.33222, 1.0, -4.33222, -3.09465, -10.4901, 1.0, 9.97831, 0.146949, 4.33222, 1.0, 10.4901, 1.0, 4.33222, 1.0, 9.97831, 0.146949, 4.84406, 0.146949),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 7, 9, 6, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 31, 33, 32, 34, 36, 35, 37, 39, 38, 40, 42, 41, 43, 45, 44, 46, 48, 47, 49, 51, 50, 52, 54, 53, 55, 57, 56, 58, 60, 59, 61, 63, 62, 64, 66, 65, 67, 69, 68, 70, 72, 71, 73, 75, 74, 76, 78, 77, 79, 81, 80, 82, 84, 83, 85, 87, 86, 88, 90, 89, 91, 93, 92, 94, 96, 95, 97, 99, 98, 100, 102, 101, 103, 105, 104, 105, 106, 104, 106, 107, 104, 108, 110, 109, 111, 113, 112, 114, 116, 115, 117, 119, 118, 119, 120, 118, 121, 112, 122, 123, 125, 124, 124, 126, 123, 127, 129, 128, 130, 132, 131, 133, 135, 134, 136, 138, 137, 139, 141, 140, 141, 142, 140, 143, 145, 144, 144, 146, 143, 146, 142, 143, 146, 140, 142, 147, 149, 148, 150, 152, 151, 153, 155, 154, 156, 158, 157, 159, 161, 160, 160, 162, 159, 163, 165, 164, 164, 166, 163, 167, 169, 168, 170, 172, 171, 173, 175, 174, 174, 176, 173, 177, 179, 178, 180, 182, 181)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(12),
	"primitive":4,
	"arrays":[
		Vector3Array(0.385912, 0.286972, -0.0683308, 0.00677568, 0.0555857, -0.0358115, 0.385912, 0.0555857, -0.0358115, 0.00677568, 0.286972, -0.0683308),
		Vector3Array(0.0, 0.139173, 0.990268, 0.0, 0.139173, 0.990268, 0.0, 0.139173, 0.990268, 0.0, 0.139173, 0.990268),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(15.1934, -10.5626, 0.266759, -1.36334, 15.1934, -1.36334, 0.266759, -10.5626),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="computerKeyboard(Clone)" type="MeshInstance" parent="."]

mesh = SubResource(5)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0167119, 0.0, 0.190546)

[node name="computerMouse(Clone)" type="MeshInstance" parent="."]

mesh = SubResource(8)
visible = true
transform = Transform(-0.999753, 0.0, 0.0222195, 0.0, 1.0, 0.0, -0.0222195, 0.0, -0.999753, 0.372847, 0.0, 0.0982978)

[node name="computerScreen(Clone)" type="MeshInstance" parent="."]

mesh = SubResource(13)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)
