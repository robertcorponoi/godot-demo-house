[gd_scene load_steps=1 format=2]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.7406105399131775, 0.8228667378425598,
		0.8396226167678833, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=3 type="ArrayMesh"]

resource_name = "Mesh Group 325"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(0.05, 0.0, -0.05, 0.04249, 0.05, -0.00751, 0.05, 0.0, 0.0, 0.04249, 0.05, -0.00751, 0.05, 0.0, -0.05, 0.04249, 0.05, -0.04249, 0.00751, 0.05, -0.00751, 0.0, 0.0, -0.05, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05, 0.00751, 0.05, -0.00751, 0.00751, 0.05, -0.04249, 0.04249, 0.05, -0.00751, 0.0, 0.0, 0.0, 0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04249, 0.05, -0.00751, 0.00751, 0.05, -0.00751, 0.00751, 0.05, -0.04249, 0.05, 0.0, -0.05, 0.0, 0.0, -0.05, 0.05, 0.0, -0.05, 0.00751, 0.05, -0.04249, 0.04249, 0.05, -0.04249, 0.04249, 0.05, -0.00751, 0.00751, 0.05, -0.04249, 0.00751, 0.05, -0.00751, 0.04249, 0.05, -0.04249),
		Vector3Array(0.988907, 0.148534, 0.0, 0.988907, 0.148534, 0.0, 0.988907, 0.148534, 0.0, 0.988907, 0.148534, 0.0, 0.988907, 0.148534, 0.0, 0.988907, 0.148534, 0.0, -0.988907, 0.148534, 0.0, -0.988907, 0.148534, 0.0, -0.988907, 0.148534, 0.0, -0.988907, 0.148534, 0.0, -0.988907, 0.148534, 0.0, -0.988907, 0.148534, 0.0, 0.0, 0.148534, 0.988907, 0.0, 0.148534, 0.988907, 0.0, 0.148534, 0.988907, 0.0, 0.148534, 0.988907, 0.0, 0.148534, 0.988907, 0.0, 0.148534, 0.988907, 0.0, 0.148534, -0.988907, 0.0, 0.148534, -0.988907, 0.0, 0.148534, -0.988907, 0.0, 0.148534, -0.988907, 0.0, 0.148534, -0.988907, 0.0, 0.148534, -0.988907, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0),
		FloatArray(0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(1.9685, 1.29239, 0.295669, -0.698195, 0.0, 1.29239, 0.295669, -0.698195, 1.9685, 1.29239, 1.67283, -0.698195, -0.295669, -0.990585, -1.9685, 1.0, 0.0, 1.0, -1.9685, 1.0, -0.295669, -0.990585, -1.67283, -0.990585, 1.67283, -0.990585, 0.0, 1.0, 1.9685, 1.0, 0.0, 1.0, 1.67283, -0.990585, 0.295669, -0.990585, -0.295669, -0.698195, -1.9685, 1.29239, 0.0, 1.29239, -1.9685, 1.29239, -0.295669, -0.698195, -1.67283, -0.698195, 1.67283, 0.704331, 0.295669, -0.672835, 0.295669, 0.704331, 1.67283, -0.672835),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 20, 19, 21, 23, 22, 24, 26, 25, 25, 27, 24)
	],
	"morph_arrays":[]
}

[sub_resource id=4 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.7406105399131775, 0.8228667378425598,
		0.8396226167678833, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=5 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(4)

[sub_resource id=6 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.6980392336845398, 0.8274509906768799,
		0.7686274647712708, 0.5);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(0.5);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=7 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(6)

[sub_resource id=8 type="ArrayMesh"]

resource_name = "Mesh tableGlass"
surfaces/0 = {
	"material":SubResource(5),
	"primitive":4,
	"arrays":[
		Vector3Array(0.372241, -0.0967412, 0.0257865, -0.37224, -0.0482377, 0.0257865, -0.37224, -0.0967412, 0.0257865, 0.372241, -0.0482377, 0.0257865, -0.37224, -0.0967412, -0.0257868, 0.372241, -0.0482377, -0.0257868, 0.372241, -0.0967412, -0.0257868, -0.37224, -0.0482377, -0.0257868, 0.372241, 0.132986, 0.175183, -0.37224, 0.132986, 0.223687, -0.37224, 0.132986, 0.175183, 0.372241, 0.132986, 0.223687, -0.37224, -0.0967412, -0.172114, -0.396492, -0.0967412, 0.172113, -0.396492, -0.0967412, -0.172114, -0.396492, -0.0967412, 0.172113, -0.37224, -0.0967412, -0.172114, -0.37224, -0.0967412, -0.0257868, -0.396492, -0.0967412, 0.172113, -0.37224, -0.0967412, -0.0257868, -0.37224, -0.0967412, 0.0257865, -0.396492, -0.0967412, 0.172113, -0.37224, -0.0967412, 0.0257865, -0.37224, -0.0967412, 0.172113, -0.37224, -0.0967412, -0.0257868, 0.372241, -0.0967412, 0.0257865, -0.37224, -0.0967412, 0.0257865, 0.372241, -0.0967412, -0.0257868, 0.396492, -0.0967412, -0.172114, 0.396492, -0.0967412, -0.172114, 0.372241, -0.0967412, -0.0257868, 0.372241, -0.0967412, -0.172114, 0.396492, -0.0967412, 0.172113, 0.396492, -0.0967412, 0.172113, 0.372241, -0.0967412, 0.172113, 0.372241, -0.0967412, 0.0257865, -0.37224, -0.0482377, 0.172113, -0.396492, -0.0482377, -0.172114, -0.396492, -0.0482377, 0.172113, -0.37224, -0.0482377, -0.172114, -0.37224, -0.0482377, -0.172114, -0.37224, -0.0482377, 0.172113, -0.37224, -0.0482377, 0.0257865, -0.37224, -0.0482377, -0.0257868, -0.37224, -0.0482377, -0.0257868, -0.37224, -0.0482377, 0.0257865, 0.372241, -0.0482377, 0.0257865, 0.372241, -0.0482377, -0.0257868, 0.396492, -0.0482377, -0.172114, 0.372241, -0.0482377, -0.0257868, 0.372241, -0.0482377, 0.0257865, 0.372241, -0.0482377, -0.0257868, 0.396492, -0.0482377, -0.172114, 0.372241, -0.0482377, -0.172114, 0.396492, -0.0482377, -0.172114, 0.372241, -0.0482377, 0.0257865, 0.396492, -0.0482377, 0.172113, 0.396492, -0.0482377, 0.172113, 0.372241, -0.0482377, 0.0257865, 0.372241, -0.0482377, 0.172113, 0.372241, 0.132986, 0.175183, 0.372241, -0.145245, 0.223687, 0.372241, 0.132986, 0.223687, 0.372241, -0.145245, 0.172113, 0.372241, -0.145245, 0.172113, 0.372241, 0.132986, 0.175183, 0.372241, 0.132986, 0.172113, 0.372241, -0.145245, 0.172113, 0.372241, 0.132986, 0.172113, 0.372241, -0.0482377, 0.172113, 0.372241, -0.0967412, 0.172113, 0.372241, -0.0967412, 0.172113, 0.372241, -0.0482377, 0.172113, 0.372241, -0.0482377, 0.0257865, 0.372241, -0.0967412, 0.172113, 0.372241, -0.0482377, 0.0257865, 0.372241, -0.0967412, 0.0257865, 0.372241, 0.132986, 0.175183, 0.372241, 0.181489, -0.175183, 0.372241, 0.132986, 0.172113, 0.372241, 0.181489, 0.175183, 0.372241, 0.132986, -0.172114, 0.372241, 0.132986, -0.175183, 0.372241, -0.0482377, -0.172114, 0.372241, -0.0967412, -0.172114, 0.372241, -0.145245, -0.223687, 0.372241, -0.145245, -0.172114, 0.372241, 0.132986, -0.223687, 0.372241, -0.0967412, -0.0257868, 0.372241, -0.0482377, -0.172114, 0.372241, -0.0967412, -0.0257868, 0.372241, -0.0482377, -0.0257868, 0.420744, -0.145245, -0.223687, 0.420744, 0.132986, -0.172114, 0.420744, -0.145245, -0.172114, 0.420744, 0.181489, -0.223687, 0.420744, 0.132986, 0.172113, 0.420744, 0.181489, 0.223687, 0.420744, 0.181489, 0.223687, 0.420744, -0.145245, 0.172113, 0.420744, 0.132986, 0.172113, 0.420744, -0.145245, 0.172113, 0.420744, 0.181489, 0.223687, 0.420744, -0.145245, 0.223687, 0.420744, -0.145245, -0.223687, 0.372241, -0.145245, -0.172114, 0.372241, -0.145245, -0.223687, 0.372241, -0.145245, -0.172114, 0.420744, -0.145245, -0.223687, 0.420744, -0.145245, -0.172114, 0.396492, -0.0967412, 0.172113, 0.396492, -0.0482377, -0.172114, 0.396492, -0.0482377, 0.172113, 0.396492, -0.0967412, -0.172114, -0.37224, -0.145245, 0.172113, -0.420744, -0.145245, 0.223687, -0.420744, -0.145245, 0.172113, -0.420744, -0.145245, 0.223687, -0.37224, -0.145245, 0.172113, -0.37224, -0.145245, 0.223687, 0.420744, -0.145245, -0.172114, 0.396492, -0.0967412, -0.172114, 0.372241, -0.145245, -0.172114, 0.420744, 0.132986, -0.172114, 0.396492, -0.0482377, -0.172114, 0.396492, -0.0482377, -0.172114, 0.420744, 0.132986, -0.172114, 0.372241, -0.0482377, -0.172114, 0.372241, -0.0482377, -0.172114, 0.372241, 0.132986, -0.172114, 0.372241, -0.0967412, -0.172114, -0.396492, -0.0482377, -0.172114, -0.396492, -0.0967412, 0.172113, -0.396492, -0.0482377, 0.172113, -0.396492, -0.0967412, -0.172114, -0.37224, -0.145245, -0.223687, -0.420744, -0.145245, -0.172114, -0.420744, -0.145245, -0.223687, -0.420744, -0.145245, -0.172114, -0.37224, -0.145245, -0.223687, -0.37224, -0.145245, -0.172114, -0.420744, 0.181489, -0.223687, -0.420744, 0.132986, 0.172113, -0.420744, 0.181489, 0.223687, -0.420744, 0.132986, -0.172114, -0.420744, -0.145245, -0.172114, -0.420744, -0.145245, -0.223687, -0.420744, -0.145245, 0.172113, -0.420744, 0.181489, 0.223687, -0.420744, 0.132986, 0.172113, -0.420744, 0.181489, 0.223687, -0.420744, -0.145245, 0.172113, -0.420744, -0.145245, 0.223687, -0.420744, -0.145245, 0.172113, -0.37224, -0.0967412, 0.172113, -0.37224, -0.145245, 0.172113, -0.37224, -0.0967412, 0.172113, -0.420744, -0.145245, 0.172113, -0.396492, -0.0967412, 0.172113, -0.396492, -0.0967412, 0.172113, -0.420744, 0.132986, 0.172113, -0.396492, -0.0482377, 0.172113, -0.396492, -0.0482377, 0.172113, -0.420744, 0.132986, 0.172113, -0.37224, 0.132986, 0.172113, -0.37224, 0.132986, 0.172113, -0.37224, -0.0482377, 0.172113, -0.396492, -0.0482377, 0.172113, 0.372241, -0.0967412, 0.172113, 0.420744, -0.145245, 0.172113, 0.372241, -0.145245, 0.172113, 0.396492, -0.0967412, 0.172113, 0.420744, 0.132986, 0.172113, 0.396492, -0.0482377, 0.172113, 0.420744, 0.132986, 0.172113, 0.396492, -0.0482377, 0.172113, 0.372241, -0.0482377, 0.172113, 0.420744, 0.132986, 0.172113, 0.372241, -0.0482377, 0.172113, 0.372241, 0.132986, 0.172113, -0.37224, -0.0967412, -0.172114, -0.420744, -0.145245, -0.172114, -0.37224, -0.145245, -0.172114, -0.420744, -0.145245, -0.172114, -0.37224, -0.0967412, -0.172114, -0.396492, -0.0967412, -0.172114, -0.396492, -0.0967412, -0.172114, -0.420744, 0.132986, -0.172114, -0.396492, -0.0482377, -0.172114, -0.420744, 0.132986, -0.172114, -0.396492, -0.0482377, -0.172114, -0.37224, -0.0482377, -0.172114, -0.420744, 0.132986, -0.172114, -0.37224, -0.0482377, -0.172114, -0.37224, 0.132986, -0.172114, -0.37224, -0.0967412, 0.0257865, -0.37224, -0.0482377, 0.172113, -0.37224, -0.0967412, 0.172113, -0.37224, -0.0482377, 0.172113, -0.37224, -0.0967412, 0.0257865, -0.37224, -0.0482377, 0.0257865, -0.37224, 0.132986, 0.172113, -0.37224, -0.0967412, 0.172113, -0.37224, -0.0482377, 0.172113, -0.37224, -0.145245, 0.172113, -0.37224, 0.132986, 0.175183, -0.37224, -0.145245, 0.172113, -0.37224, 0.132986, 0.172113, -0.37224, 0.132986, 0.223687, -0.37224, -0.145245, 0.172113, -0.37224, 0.132986, 0.175183, -0.37224, -0.145245, 0.223687, -0.37224, 0.132986, 0.172113, -0.37224, 0.181489, 0.175183, -0.37224, 0.132986, 0.175183, -0.37224, 0.181489, -0.175183, -0.37224, 0.132986, -0.172114, -0.37224, 0.132986, -0.175183, -0.37224, -0.145245, -0.223687, -0.37224, -0.145245, -0.172114, -0.37224, 0.132986, -0.172114, -0.37224, -0.0967412, -0.172114, -0.37224, -0.145245, -0.172114, -0.37224, -0.0482377, -0.172114, -0.37224, -0.0482377, -0.172114, -0.37224, -0.0967412, -0.0257868, -0.37224, -0.0967412, -0.172114, -0.37224, -0.0967412, -0.0257868, -0.37224, -0.0482377, -0.172114, -0.37224, -0.0482377, -0.0257868, -0.37224, 0.132986, -0.223687, 0.420744, -0.145245, 0.172113, 0.372241, -0.145245, 0.223687, 0.372241, -0.145245, 0.172113, 0.420744, -0.145245, 0.223687, -0.420744, 0.181489, 0.223687, -0.37224, 0.181489, 0.175183, -0.37224, 0.181489, -0.175183, 0.420744, 0.181489, 0.223687, 0.372241, 0.181489, 0.175183, 0.372241, 0.181489, 0.175183, 0.420744, 0.181489, 0.223687, 0.420744, 0.181489, -0.223687, -0.420744, 0.181489, -0.223687, 0.420744, 0.181489, -0.223687, 0.372241, 0.181489, -0.175183, 0.420744, 0.181489, -0.223687, 0.372241, 0.181489, -0.175183, 0.372241, 0.181489, 0.175183, 0.420744, 0.181489, 0.223687, 0.372241, -0.145245, 0.223687, 0.420744, -0.145245, 0.223687, 0.372241, -0.145245, 0.223687, 0.420744, 0.181489, 0.223687, 0.372241, 0.132986, 0.223687, -0.420744, 0.181489, 0.223687, 0.372241, 0.132986, 0.223687, 0.420744, 0.181489, 0.223687, -0.420744, 0.181489, 0.223687, -0.37224, 0.132986, 0.223687, 0.372241, 0.132986, 0.223687, -0.420744, -0.145245, 0.223687, -0.37224, 0.132986, 0.223687, -0.420744, 0.181489, 0.223687, -0.37224, -0.145245, 0.223687, -0.420744, -0.145245, -0.223687, -0.37224, 0.132986, -0.223687, -0.37224, -0.145245, -0.223687, -0.420744, 0.181489, -0.223687, -0.37224, 0.132986, -0.223687, -0.420744, 0.181489, -0.223687, 0.420744, 0.181489, -0.223687, 0.420744, 0.181489, -0.223687, 0.372241, 0.132986, -0.223687, -0.37224, 0.132986, -0.223687, 0.420744, -0.145245, -0.223687, 0.372241, -0.145245, -0.223687, -0.37224, 0.132986, 0.175183, 0.372241, 0.181489, 0.175183, 0.372241, 0.132986, 0.175183, -0.37224, 0.181489, 0.175183, 0.372241, 0.181489, -0.175183, -0.37224, 0.132986, -0.175183, 0.372241, 0.132986, -0.175183, -0.37224, 0.181489, -0.175183, -0.37224, 0.132986, -0.223687, 0.372241, 0.132986, -0.175183, -0.37224, 0.132986, -0.175183, 0.372241, 0.132986, -0.223687, 0.420744, 0.132986, -0.172114, 0.372241, 0.132986, 0.172113, 0.372241, 0.132986, -0.172114, 0.420744, 0.132986, 0.172113, -0.420744, 0.132986, -0.172114, -0.37224, 0.132986, 0.172113, -0.420744, 0.132986, 0.172113, -0.37224, 0.132986, -0.172114),
		Vector3Array(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -5.24885e-07, -1.0, 0.0, -5.24885e-07, -1.0, 0.0, -5.24885e-07, -1.0, 0.0, -7.44616e-07, -1.0, 0.0, -7.44616e-07, -1.0, 0.0, -7.44616e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -4.37114e-08, 1.0, 4.79658e-05, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -7.44613e-07, 1.0, 0.0, -7.44613e-07, 1.0, 0.0, -7.44613e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.11561e-07, 1.0, 0.0, 1.11561e-07, 1.0, 0.0, 1.11561e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 4.76718e-05, 4.37114e-08, 1.0, 4.79658e-05, 4.37114e-08, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 5.19231e-07, -1.0, 0.0, 5.19231e-07, -1.0, 0.0, 5.19231e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 7.91743e-07, -1.0, 0.0, 7.91743e-07, -1.0, 0.0, 7.91743e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -7.91743e-07, 1.0, 0.0, -7.91743e-07, 1.0, 0.0, -7.91743e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.11906e-07, 1.0, 0.0, 2.11906e-07, 1.0, 0.0, 2.11906e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, -4.79658e-05, 4.37114e-08, 1.0, -4.79658e-05, 4.37114e-08, -1.0, -4.76718e-05, 4.37114e-08, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 4.79658e-05, -4.37114e-08, -1.0, -4.79658e-05, -4.37114e-08, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -6.86715e-07, 1.0, 0.0, -6.86715e-07, 1.0, 0.0, -6.86715e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 8.76848e-07, 1.0, 0.0, 8.76848e-07, 1.0, 0.0, 8.76848e-07, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -6.38906e-07, 1.0, 0.0, -6.38906e-07, 1.0, 0.0, -6.38906e-07, 1.0, 0.0, 8.25322e-07, 1.0, 0.0, 8.25322e-07, 1.0, 0.0, 8.25322e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 7.30178e-07, -1.0, 0.0, 7.30178e-07, -1.0, 0.0, 7.30178e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 5.24885e-07, -1.70651e-06, 1.0, -1.0, 5.24885e-07, -1.70651e-06, 1.0, -1.0, 5.24885e-07, -1.70651e-06, 1.0, -1.0, 7.44616e-07, 0.0, 1.0, -1.0, 7.44616e-07, 0.0, 1.0, -1.0, 7.44616e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 2.60166e-07, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 7.92391e-07, 1.0, -1.0, 0.0, 5.81069e-07, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 3.62706e-07, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 7.44613e-07, 0.0, 1.0, 1.0, 7.44613e-07, 0.0, 1.0, 1.0, 7.44613e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.11561e-07, 0.0, 1.0, 1.0, -1.11561e-07, 0.0, 1.0, 1.0, -1.11561e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 3.85305e-09, 1.0, 1.0, 0.0, 3.61666e-06, 1.0, 1.0, 0.0, 1.44169e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.09664e-08, -1.0, 1.0, 0.0, 8.1687e-08, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 9.3353e-08, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, -2.11015e-07, -1.0, 1.0, 0.0, -2.11015e-07, -1.0, 1.0, 0.0, -2.11015e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, -8.85963e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, -1.04135e-07, 1.0, 1.0, 0.0, -2.10308e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 5.1923e-07, 4.22031e-07, 1.0, 1.0, 5.1923e-07, 4.22031e-07, 1.0, 1.0, 5.1923e-07, 4.22031e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 5.74528e-08, 0.0, 1.0, -1.0, 5.38939e-07, 0.0, 1.0, -1.0, 2.57412e-06, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.011e-07, 0.0, 1.0, 1.0, 5.38905e-07, 0.0, 1.0, 1.0, 2.57411e-06, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, -6.9987e-08, 1.0, 1.0, 0.0, -6.68159e-08, 1.0, 1.0, 0.0, 2.13887e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 6.86715e-07, 2.09311e-07, 1.0, 1.0, 6.86715e-07, 2.09311e-07, 1.0, 1.0, 6.86715e-07, 2.09311e-07, 1.0, 1.0, 0.0, 3.48852e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -8.76848e-07, -1.78176e-07, 1.0, 1.0, -8.76848e-07, -1.78176e-07, 1.0, 1.0, -8.76848e-07, -1.78176e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 4.48741e-07, 0.0, 1.0, 1.0, 4.48741e-07, 0.0, 1.0, 1.0, 4.48741e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -4.19868e-08, 0.0, 1.0, 1.0, -3.54135e-07, 0.0, 1.0, 1.0, -3.82126e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 2.09934e-08, 0.0, 1.0, -1.0, 1.77067e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 1.91063e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -1.98794e-07, 0.0, 1.0, -1.0, -1.77067e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -4.19867e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(31.2199, -0.909586, 1.90959, -2.81917, 1.90959, -0.909586, 31.2199, -2.81917, -1.90959, -0.909586, -31.2199, -2.81917, -31.2199, -0.909586, -1.90959, -2.81917, -31.2199, -0.909586, -1.90959, 1.0, -1.90959, -0.909586, -31.2199, 1.0, -1.90959, -14.5827, -0.954793, -1.03045, -0.954793, -14.5827, -0.954793, -1.03045, -1.90959, -14.5827, -1.90959, -8.82178, -0.954793, -1.03045, -1.90959, -8.82178, -1.90959, -6.79134, -0.954793, -1.03045, -1.90959, -6.79134, -1.90959, -1.03045, -1.90959, -8.82178, -31.2199, -6.79134, -1.90959, -6.79134, -31.2199, -8.82178, -32.1747, -14.5827, -32.1747, -14.5827, -31.2199, -8.82178, -31.2199, -14.5827, -32.1747, -1.03045, -32.1747, -1.03045, -31.2199, -1.03045, -31.2199, -6.79134, 1.90959, -1.03045, 0.954793, -14.5827, 0.954793, -1.03045, 1.90959, -14.5827, 1.90959, -14.5827, 1.90959, -1.03045, 1.90959, -6.79134, 1.90959, -8.82178, 1.90959, -8.82178, 1.90959, -6.79134, 31.2199, -6.79134, 31.2199, -8.82178, 32.1747, -14.5827, 31.2199, -8.82178, 31.2199, -6.79134, 31.2199, -8.82178, 32.1747, -14.5827, 31.2199, -14.5827, 32.1747, -14.5827, 31.2199, -6.79134, 32.1747, -1.03045, 32.1747, -1.03045, 31.2199, -6.79134, 31.2199, -1.03045, -1.90959, -9.95396, 8.56329e-11, 1.0, 8.56329e-11, -9.95396, -2.03045, 1.0, -2.03045, 1.0, -1.90959, -9.95396, -2.03045, -9.95396, -2.03045, 1.0, -2.03045, -9.95396, -2.03045, -2.81917, -2.03045, -0.909586, -2.03045, -0.909586, -2.03045, -2.81917, -7.79134, -2.81917, -2.03045, -0.909586, -7.79134, -2.81917, -7.79134, -0.909586, -1.90959, -9.95396, -15.7035, -11.8635, -2.03045, -9.95396, -1.90959, -11.8635, -15.5827, -9.95396, -15.7035, -9.95396, -15.5827, -2.81917, -15.5827, -0.909586, -17.6131, 1.0, -15.5827, 1.0, -17.6131, -9.95396, -9.82178, -0.909586, -15.5827, -2.81917, -9.82178, -0.909586, -9.82178, -2.81917, 17.6131, 1.0, 15.5827, -9.95396, 15.5827, 1.0, 17.6131, -11.8635, 2.03045, -9.95396, -6.04093e-12, -11.8635, -6.04093e-12, -11.8635, 2.03045, 1.0, 2.03045, -9.95396, 2.03045, 1.0, -6.04093e-12, -11.8635, -6.06936e-12, 1.0, -33.1294, -16.6131, -31.2199, -14.5827, -31.2199, -16.6131, -31.2199, -14.5827, -33.1294, -16.6131, -33.1294, -14.5827, 2.03045, -0.909586, 15.5827, -2.81917, 2.03045, -2.81917, 15.5827, -0.909586, -1.90959, -1.03045, -5.11591e-13, 1.0, -4.54747e-13, -1.03045, -5.11591e-13, 1.0, -1.90959, -1.03045, -1.90959, 1.0, 33.1294, 1.0, 32.1747, -0.909586, 31.2199, 1.0, 33.1294, -9.95396, 32.1747, -2.81917, 32.1747, -2.81917, 33.1294, -9.95396, 31.2199, -2.81917, 31.2199, -2.81917, 31.2199, -9.95396, 31.2199, -0.909586, -15.5827, -2.81917, -2.03045, -0.909586, -2.03045, -2.81917, -15.5827, -0.909586, -1.90959, -16.6131, -5.68434e-12, -14.5827, -5.6275e-12, -16.6131, -5.68434e-12, -14.5827, -1.90959, -16.6131, -1.90959, -14.5827, -17.6131, -11.8635, -2.03045, -9.95396, -4.26326e-14, -11.8635, -15.5827, -9.95396, -15.5827, 1.0, -17.6131, 1.0, -2.03045, 1.0, -4.26326e-14, -11.8635, -2.03045, -9.95396, -4.26326e-14, -11.8635, -2.03045, 1.0, 0.0, 1.0, -1.38213e-12, 1.0, -1.90959, -0.909586, -1.90959, 1.0, -1.90959, -0.909586, -1.38213e-12, 1.0, -0.954793, -0.909586, -0.954793, -0.909586, -1.38213e-12, -9.95396, -0.954793, -2.81917, -0.954793, -2.81917, -1.38213e-12, -9.95396, -1.90959, -9.95396, -1.90959, -9.95396, -1.90959, -2.81917, -0.954793, -2.81917, -31.2199, -0.909586, -33.1294, 1.0, -31.2199, 1.0, -32.1747, -0.909586, -33.1294, -9.95396, -32.1747, -2.81917, -33.1294, -9.95396, -32.1747, -2.81917, -31.2199, -2.81917, -33.1294, -9.95396, -31.2199, -2.81917, -31.2199, -9.95396, 1.90959, -0.909586, -8.79764e-11, 1.0, 1.90959, 1.0, -8.79764e-11, 1.0, 1.90959, -0.909586, 0.954793, -0.909586, 0.954793, -0.909586, -8.79764e-11, -9.95396, 0.954793, -2.81917, -8.79764e-11, -9.95396, 0.954793, -2.81917, 1.90959, -2.81917, -8.79764e-11, -9.95396, 1.90959, -2.81917, 1.90959, -9.95396, 7.79134, -0.909586, 2.03045, -2.81917, 2.03045, -0.909586, 2.03045, -2.81917, 7.79134, -0.909586, 7.79134, -2.81917, 2.03045, -9.95396, 2.03045, -0.909586, 2.03045, -2.81917, 2.03045, 1.0, 1.90959, -9.95396, 2.03045, 1.0, 2.03045, -9.95396, 1.06501e-12, -9.95396, 2.03045, 1.0, 1.90959, -9.95396, 1.06501e-12, 1.0, 2.03045, -9.95396, 1.90959, -11.8635, 1.90959, -9.95396, 15.7035, -11.8635, 15.5827, -9.95396, 15.7035, -9.95396, 17.6131, 1.0, 15.5827, 1.0, 15.5827, -9.95396, 15.5827, -0.909586, 15.5827, 1.0, 15.5827, -2.81917, 15.5827, -2.81917, 9.82178, -0.909586, 15.5827, -0.909586, 9.82178, -0.909586, 15.5827, -2.81917, 9.82178, -2.81917, 17.6131, -9.95396, -33.1294, -1.03045, -31.2199, 1.0, -31.2199, -1.03045, -33.1294, 1.0, -4.10859e-13, 1.0, 1.90959, -0.909586, 1.90959, -14.7035, 33.1294, 1.0, 31.2199, -0.909586, 31.2199, -0.909586, 33.1294, 1.0, 33.1294, -16.6131, -8.65606e-13, -16.6131, 33.1294, -16.6131, 31.2199, -14.7035, 33.1294, -16.6131, 31.2199, -14.7035, 31.2199, -0.909586, 33.1294, -11.8635, 31.2199, 1.0, 33.1294, 1.0, 31.2199, 1.0, 33.1294, -11.8635, 31.2199, -9.95396, 4.54747e-13, -11.8635, 31.2199, -9.95396, 33.1294, -11.8635, 4.54747e-13, -11.8635, 1.90959, -9.95396, 31.2199, -9.95396, 5.11591e-13, 1.0, 1.90959, -9.95396, 4.54747e-13, -11.8635, 1.90959, 1.0, -1.06592e-11, 1.0, -1.90959, -9.95396, -1.90959, 1.0, -5.03173e-12, -11.8635, -1.90959, -9.95396, -5.03173e-12, -11.8635, -33.1294, -11.8635, -33.1294, -11.8635, -31.2199, -9.95396, -1.90959, -9.95396, -33.1294, 1.0, -31.2199, 1.0, -1.90959, -9.95396, -31.2199, -11.8635, -31.2199, -9.95396, -1.90959, -11.8635, 31.2199, -11.8635, 1.90959, -9.95396, 31.2199, -9.95396, 1.90959, -11.8635, -1.90959, -16.6131, -31.2199, -14.7035, -1.90959, -14.7035, -31.2199, -16.6131, -33.1294, -14.5827, -31.2199, -1.03045, -31.2199, -14.5827, -33.1294, -1.03045, 1.55545e-12, -14.5827, -1.90959, -1.03045, 6.78504e-12, -1.03045, -1.90959, -14.5827),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4, 8, 10, 9, 9, 11, 8, 12, 14, 13, 15, 17, 16, 18, 20, 19, 21, 23, 22, 24, 26, 25, 25, 27, 24, 27, 25, 28, 29, 31, 30, 25, 32, 28, 33, 35, 34, 36, 38, 37, 37, 39, 36, 40, 42, 41, 40, 43, 42, 44, 46, 45, 44, 47, 46, 48, 50, 49, 51, 53, 52, 54, 56, 55, 57, 59, 58, 60, 62, 61, 61, 63, 60, 64, 66, 65, 67, 69, 68, 67, 70, 69, 71, 73, 72, 74, 76, 75, 77, 79, 78, 78, 80, 77, 79, 81, 78, 81, 82, 78, 82, 81, 83, 83, 84, 82, 85, 82, 84, 84, 86, 85, 85, 87, 82, 88, 84, 83, 89, 91, 90, 92, 94, 93, 95, 92, 93, 95, 93, 96, 97, 95, 96, 98, 100, 99, 101, 103, 102, 104, 106, 105, 107, 109, 108, 110, 112, 111, 111, 113, 110, 114, 116, 115, 117, 119, 118, 120, 122, 121, 121, 123, 120, 121, 124, 123, 125, 127, 126, 128, 129, 123, 130, 121, 122, 131, 133, 132, 132, 134, 131, 135, 137, 136, 138, 140, 139, 141, 143, 142, 142, 144, 141, 144, 145, 141, 145, 146, 141, 147, 149, 148, 150, 152, 151, 153, 155, 154, 156, 158, 157, 159, 160, 153, 159, 161, 160, 162, 164, 163, 165, 167, 166, 168, 170, 169, 169, 171, 168, 171, 169, 172, 172, 173, 171, 174, 176, 175, 177, 179, 178, 180, 182, 181, 183, 185, 184, 186, 181, 187, 187, 188, 186, 189, 191, 190, 192, 194, 193, 195, 197, 196, 198, 200, 199, 201, 203, 202, 201, 202, 204, 205, 207, 206, 208, 210, 209, 209, 211, 208, 212, 214, 213, 213, 215, 212, 215, 216, 212, 215, 217, 216, 216, 217, 218, 216, 218, 219, 220, 222, 221, 223, 220, 221, 224, 226, 225, 227, 229, 228, 217, 230, 218, 231, 233, 232, 232, 234, 231, 235, 237, 236, 236, 238, 235, 236, 239, 238, 240, 242, 241, 243, 244, 237, 237, 235, 243, 244, 245, 237, 246, 248, 247, 249, 251, 250, 252, 254, 253, 255, 257, 256, 258, 260, 259, 261, 263, 262, 262, 264, 261, 265, 267, 266, 266, 268, 265, 269, 271, 270, 272, 274, 273, 275, 272, 273, 273, 276, 275, 277, 279, 278, 278, 280, 277, 281, 283, 282, 282, 284, 281, 285, 287, 286, 286, 288, 285, 289, 291, 290, 290, 292, 289, 293, 295, 294, 294, 296, 293)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(7),
	"primitive":4,
	"arrays":[
		Vector3Array(-0.37224, 0.181489, 0.175183, 0.372241, 0.181489, -0.175183, -0.37224, 0.181489, -0.175183, 0.372241, 0.181489, 0.175183, -0.37224, 0.181489, -0.175183, 0.372241, 0.181489, -0.175183, -0.37224, 0.181489, 0.175183, 0.372241, 0.181489, 0.175183),
		Vector3Array(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0),
		FloatArray(1.0, 0.0, -6.68159e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.13887e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0),
		null, ; no Vertex Colors,
		Vector2Array(1.90959, -0.909586, 31.2199, -14.7035, 1.90959, -14.7035, 31.2199, -0.909586, 1.90959, -14.7035, 31.2199, -14.7035, 1.90959, -0.909586, 31.2199, -0.909586),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 7, 5, 6)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="Group" type="MeshInstance" parent="."]

mesh = SubResource(3)
visible = true
transform = Transform(-1.0, 8.74228e-08, 0.0, -8.74228e-08, -1.0, 0.0, 0.0, 0.0, 1.0, 0.942339, 0.05, -1.28234)

[node name="tableGlass(Clone)" type="MeshInstance" parent="."]

mesh = SubResource(8)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.420744, 0.145245, -0.223687)
