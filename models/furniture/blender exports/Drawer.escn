[gd_scene load_steps=1 format=2]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.8962264060974121, 0.6015712022781372,
		0.39315590262413025, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=3 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(1.0, 1.0, 1.0, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=4 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(3)

[sub_resource id=5 type="ArrayMesh"]

resource_name = "Mesh cabinetBedDrawerTable"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(-0.123, 0.109808, -0.102481, -0.0929999, -0.133392, -0.102481, -0.123, -0.133392, -0.102481, -0.0929999, 0.0102169, -0.102481, -0.0929999, 0.0102169, -0.102481, -0.123, 0.109808, -0.102481, 0.0930001, 0.0102169, -0.102481, 0.123, 0.109808, -0.102481, 0.0930001, 0.0102169, -0.102481, -0.123, 0.109808, -0.102481, -0.133, 0.129807, -0.102481, -0.133, 0.129807, -0.102481, -0.123, 0.109808, -0.102481, -0.133, 0.109808, -0.102481, 0.123, 0.109808, -0.102481, -0.133, 0.129807, -0.102481, 0.133, 0.109808, -0.102481, 0.133, 0.109808, -0.102481, 0.133, 0.129807, -0.102481, 0.123, -0.133392, -0.102481, 0.0930001, -0.133392, -0.102481, 0.123, -0.133392, -0.102481, 0.123, 0.0102169, -0.0724806, 0.123, -0.133392, -0.0724806, 0.123, 0.109808, -0.102481, 0.123, 0.0102169, -0.0724806, 0.123, -0.133392, -0.102481, 0.123, 0.109808, -0.102481, 0.123, 0.0102169, 0.0725194, 0.123, 0.109808, 0.102519, 0.123, -0.133392, 0.0725194, 0.123, -0.133392, 0.0725194, 0.123, 0.109808, 0.102519, 0.123, -0.133392, 0.102519, -0.123, 0.109808, 0.102519, -0.123, 0.0102169, 0.0725194, -0.123, -0.133392, 0.102519, -0.123, 0.0102169, 0.0725194, -0.123, 0.109808, 0.102519, -0.123, 0.109808, -0.102481, -0.123, 0.0102169, -0.0724806, -0.123, -0.133392, -0.0724806, -0.123, -0.133392, -0.102481, -0.123, -0.133392, 0.0725194, -0.123, -0.133392, 0.102519, -0.0983999, 0.0348169, 0.102519, -0.0983999, 0.0852075, -0.0614806, -0.0983999, 0.0852075, 0.102519, -0.0983999, 0.0348169, -0.0614806, -0.0983999, 0.0852075, -0.0614806, -0.0983999, 0.0348169, -0.0614806, -0.0983999, 0.0352075, -0.0614806, 0.0984001, 0.0852075, -0.0614806, -0.0983999, 0.0852075, 0.102519, -0.0983999, 0.0852075, -0.0614806, 0.0984001, 0.0852075, 0.102519, -0.133, 0.129807, 0.112519, 0.133, 0.129807, -0.102481, -0.133, 0.129807, -0.102481, 0.133, 0.129807, 0.112519, 0.133, 0.109808, 0.112519, -0.133, 0.129807, 0.112519, -0.133, 0.109808, 0.112519, 0.133, 0.129807, 0.112519, -0.133, 0.129807, -0.102481, -0.133, 0.109808, 0.112519, -0.133, 0.129807, 0.112519, -0.133, 0.109808, -0.102481, 0.133, 0.109808, -0.102481, 0.123, 0.109808, 0.102519, 0.123, 0.109808, -0.102481, 0.133, 0.109808, 0.112519, -0.123, 0.109808, 0.102519, -0.133, 0.109808, 0.112519, -0.123, 0.109808, 0.102519, 0.133, 0.109808, 0.112519, -0.133, 0.109808, 0.112519, -0.123, 0.109808, -0.102481, -0.123, 0.109808, 0.102519, -0.123, 0.109808, -0.102481, -0.133, 0.109808, -0.102481, 0.133, 0.109808, -0.102481, 0.133, 0.129807, 0.112519, 0.133, 0.109808, 0.112519, 0.133, 0.129807, -0.102481, 0.123, 0.0102169, -0.0724806, 0.0930001, 0.0102169, 0.0725194, 0.0930001, 0.0102169, -0.0724806, 0.0930001, 0.0102169, 0.0725194, 0.123, 0.0102169, -0.0724806, 0.123, 0.0102169, 0.0725194, 0.0930001, 0.0102169, 0.102519, 0.0930001, 0.0102169, -0.0724806, 0.0930001, 0.0102169, 0.0725194, -0.0929999, 0.0102169, 0.102519, 0.0930001, 0.0102169, 0.102519, -0.0929999, 0.0102169, 0.102519, 0.0930001, 0.0102169, -0.102481, 0.0930001, 0.0102169, -0.0724806, -0.0929999, 0.0102169, 0.0725194, 0.0930001, 0.0102169, -0.102481, -0.0929999, 0.0102169, -0.0724806, -0.0929999, 0.0102169, -0.102481, -0.123, 0.0102169, 0.0725194, -0.123, 0.0102169, -0.0724806, -0.0929999, -0.133392, 0.0725194, -0.123, -0.133392, 0.102519, -0.123, -0.133392, 0.0725194, -0.0929999, -0.133392, 0.102519, -0.123, 0.0102169, 0.0725194, -0.0929999, -0.133392, 0.0725194, -0.123, -0.133392, 0.0725194, -0.0929999, 0.0102169, 0.0725194, -0.0929999, -0.133392, 0.0725194, -0.0929999, 0.0102169, 0.102519, -0.0929999, -0.133392, 0.102519, -0.0929999, 0.0102169, 0.0725194, 0.123, -0.133392, 0.0725194, 0.0930001, -0.133392, 0.102519, 0.0930001, -0.133392, 0.0725194, 0.123, -0.133392, 0.102519, 0.0930001, 0.0102169, 0.0725194, 0.123, -0.133392, 0.0725194, 0.0930001, -0.133392, 0.0725194, 0.123, 0.0102169, 0.0725194, 0.0930001, 0.0102169, 0.0725194, 0.0930001, -0.133392, 0.102519, 0.0930001, 0.0102169, 0.102519, 0.0930001, -0.133392, 0.0725194, 0.123, -0.133392, -0.102481, 0.0930001, -0.133392, -0.0724806, 0.0930001, -0.133392, -0.102481, 0.0930001, -0.133392, -0.0724806, 0.123, -0.133392, -0.102481, 0.123, -0.133392, -0.0724806, 0.123, 0.0102169, -0.0724806, 0.0930001, -0.133392, -0.0724806, 0.123, -0.133392, -0.0724806, 0.0930001, 0.0102169, -0.0724806, 0.0930001, 0.0102169, -0.102481, 0.0930001, -0.133392, -0.0724806, 0.0930001, 0.0102169, -0.0724806, 0.0930001, -0.133392, -0.102481, -0.0929999, -0.133392, -0.102481, -0.123, -0.133392, -0.0724806, -0.123, -0.133392, -0.102481, -0.0929999, -0.133392, -0.0724806, -0.0929999, -0.133392, -0.102481, -0.0929999, 0.0102169, -0.0724806, -0.0929999, -0.133392, -0.0724806, -0.0929999, 0.0102169, -0.102481, -0.0929999, 0.0102169, -0.0724806, -0.123, -0.133392, -0.0724806, -0.0929999, -0.133392, -0.0724806, -0.123, 0.0102169, -0.0724806, -0.0983999, 0.0348169, 0.102519, 0.0984001, 0.0348169, -0.0614806, -0.0983999, 0.0348169, -0.0614806, 0.0984001, 0.0348169, 0.102519, 0.0984001, 0.0852075, -0.0614806, 0.0984001, 0.0348169, 0.102519, 0.0984001, 0.0852075, 0.102519, 0.0984001, 0.0348169, 0.102519, 0.0984001, 0.0852075, -0.0614806, 0.0984001, 0.0352075, -0.0614806, 0.0984001, 0.0348169, -0.0614806, 0.0984001, 0.0352075, -0.0614806, 0.123, 0.109808, 0.102519, 0.0930001, -0.133392, 0.102519, 0.123, -0.133392, 0.102519, 0.0930001, 0.0102169, 0.102519, 0.0984001, 0.0348169, 0.102519, 0.0984001, 0.0852075, 0.102519, -0.0983999, 0.0852075, 0.102519, -0.0983999, 0.0852075, 0.102519, 0.123, 0.109808, 0.102519, -0.123, 0.109808, 0.102519, -0.0983999, 0.0348169, 0.102519, 0.0930001, 0.0102169, 0.102519, 0.0984001, 0.0348169, 0.102519, -0.123, 0.109808, 0.102519, -0.0983999, 0.0348169, 0.102519, -0.0983999, 0.0852075, 0.102519, -0.123, 0.109808, 0.102519, -0.0929999, 0.0102169, 0.102519, -0.0983999, 0.0348169, 0.102519, -0.0983999, 0.0348169, 0.102519, -0.0929999, 0.0102169, 0.102519, 0.0930001, 0.0102169, 0.102519, -0.123, -0.133392, 0.102519, -0.0929999, 0.0102169, 0.102519, -0.123, 0.109808, 0.102519, -0.0929999, -0.133392, 0.102519),
		Vector3Array(0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 2.01108e-07, -1.0, 0.0, 2.01108e-07, -1.0, 0.0, 2.01108e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.86265e-05, -1.0, 0.0, 1.86265e-05, -1.0, 0.0, 1.86265e-05, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 4.79658e-05, -4.37114e-08, 1.0, -4.76718e-05, -4.37114e-08, 1.0, -4.79658e-05, -4.37114e-08, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -4.77711e-05, -1.0, 2.29138e-09, 4.77711e-05, -1.0, -2.29138e-09, 4.77711e-05, -1.0, -2.29138e-09, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -2.0863e-08, -1.0, 0.0, -2.0863e-08, -1.0, 0.0, -2.0863e-08, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.13576e-07, -1.0, 0.0, -1.13576e-07, -1.0, 0.0, -1.13576e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -6.15588e-07, 1.0, 0.0, -6.15588e-07, 1.0, 0.0, -6.15588e-07, 1.0, 0.0, 1.92371e-07, 1.0, 0.0, 1.92371e-07, 1.0, 0.0, 1.92371e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.16293e-06, 1.0, 0.0, 1.16293e-06, 1.0, 0.0, 1.16293e-06, 1.0, 0.0, -8.14164e-07, 1.0, 0.0, -8.14164e-07, 1.0, 0.0, -8.14164e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0),
		FloatArray(-1.0, 4.07996e-07, 0.0, 1.0, -1.0, 5.49148e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 7.02813e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -7.36473e-08, 0.0, 1.0, -1.0, -2.56263e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -5.44097e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 2.07505e-07, -1.0, 1.0, 0.0, 2.07505e-07, -1.0, 1.0, 0.0, 2.07505e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, -2.12452e-07, -1.0, 1.0, 0.0, -4.12188e-08, -1.0, 1.0, 0.0, -3.51406e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 2.07505e-07, 1.0, 1.0, 0.0, 2.07505e-07, 1.0, 1.0, 0.0, 2.07505e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, -3.79981e-08, 1.0, 1.0, 0.0, -2.12452e-07, 1.0, 1.0, 0.0, -2.74574e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 1.09251e-08, 1.0, -1.0, 0.0, 1.724e-07, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 1.80529e-07, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, -3.69258e-07, 1.0, -1.0, 0.0, -3.69258e-07, 1.0, -1.0, 0.0, -3.69258e-07, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 2.0863e-08, 0.0, 1.0, -1.0, 2.0863e-08, 0.0, 1.0, -1.0, 2.0863e-08, 0.0, 1.0, -1.0, 0.0, 7.28901e-09, 1.0, -1.0, 0.0, 3.00391e-08, 1.0, -1.0, 0.0, 1.54624e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.13576e-07, -5.24678e-08, 1.0, 1.0, -1.13576e-07, -5.24678e-08, 1.0, 1.0, -1.13576e-07, -5.24678e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, -4.04504e-10, 0.0, 1.0, 1.0, 5.49148e-08, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 7.09152e-07, 0.0, 1.0, 1.0, 8.27176e-07, 0.0, 1.0, 1.0, -1.52665e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.52665e-07, 0.0, 1.0, 1.0, 1.52665e-07, 0.0, 1.0, 1.0, 1.52665e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -5.44097e-08, 0.0, 1.0, 1.0, -3.85012e-07, 0.0, 1.0, 1.0, -4.1501e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-8.35629e-15, -8.5748, -1.1811, 1.0, -8.35629e-15, 1.0, -1.1811, -4.65391, -1.1811, -4.65391, -8.35629e-15, -8.5748, -8.50394, -4.65391, -9.68504, -8.5748, -8.50394, -4.65391, -8.35629e-15, -8.5748, 0.393701, -9.3622, 0.393701, -9.3622, -8.35629e-15, -8.5748, 0.393701, -8.5748, -9.68504, -8.5748, 0.393701, -9.3622, -10.0787, -8.5748, -10.0787, -8.5748, -10.0787, -9.3622, -9.68504, 1.0, -8.50394, 1.0, 8.07087, 1.0, 6.88976, -4.65391, 6.88976, 1.0, 8.07087, -8.5748, 6.88976, -4.65391, 8.07087, 1.0, 8.07087, -8.5748, 1.1811, -4.65391, -1.86285e-15, -8.5748, 1.1811, 1.0, 1.1811, 1.0, -1.86285e-15, -8.5748, -1.86285e-15, 1.0, 0.0, -8.5748, -1.1811, -4.65391, 0.0, 1.0, -1.1811, -4.65391, 0.0, -8.5748, -8.07087, -8.5748, -6.88976, -4.65391, -6.88976, 1.0, -8.07087, 1.0, -1.1811, 1.0, 0.0, 1.0, 1.02517e-14, -5.62242, 6.45669, -7.6063, -3.95916e-15, -7.6063, 6.45669, -5.62242, 6.45669, -7.6063, 6.45669, -5.62242, 6.45669, -5.6378, -8.71654, -5.45669, -0.968504, 1.0, -0.968504, -5.45669, -8.71654, 1.0, -0.393701, 1.3937, 10.0787, -7.07087, -0.393701, -7.07087, 10.0787, 1.3937, 10.0787, -8.5748, -0.393701, -9.3622, -0.393701, -8.5748, 10.0787, -9.3622, -8.07087, -9.3622, 0.393701, -8.5748, 0.393701, -9.3622, -8.07087, -8.5748, -10.0787, -7.07087, -9.68504, 1.0, -9.68504, -7.07087, -10.0787, 1.3937, -3.36994e-15, 1.0, 0.393701, 1.3937, -3.36994e-15, 1.0, -10.0787, 1.3937, 0.393701, 1.3937, 2.50518e-14, -7.07087, -3.36994e-15, 1.0, 2.50518e-14, -7.07087, 0.393701, -7.07087, 8.07087, -8.5748, -0.393701, -9.3622, -0.393701, -8.5748, 8.07087, -9.3622, -9.68504, -5.88976, -8.50394, -0.181102, -8.50394, -5.88976, -8.50394, -0.181102, -9.68504, -5.88976, -9.68504, -0.181102, -8.50394, 1.0, -8.50394, -5.88976, -8.50394, -0.181102, -1.1811, 1.0, -8.50394, 1.0, -1.1811, 1.0, -8.50394, -7.07087, -8.50394, -5.88976, -1.1811, -0.181102, -8.50394, -7.07087, -1.1811, -5.88976, -1.1811, -7.07087, 0.0, -0.181102, 2.83399e-14, -5.88976, -1.1811, -0.181102, 0.0, 1.0, 0.0, -0.181102, -1.1811, 1.0, 0.0, -4.65391, -1.1811, 1.0, 0.0, 1.0, -1.1811, -4.65391, 1.1811, 1.0, 0.0, -4.65391, 0.0, 1.0, 1.1811, -4.65391, -9.68504, -0.181102, -8.50394, 1.0, -8.50394, -0.181102, -9.68504, 1.0, -8.50394, -4.65391, -9.68504, 1.0, -8.50394, 1.0, -9.68504, -4.65391, -1.1811, -4.65391, -4.26326e-14, 1.0, -4.26326e-14, -4.65391, -1.1811, 1.0, -9.68504, -7.07087, -8.50394, -5.88976, -8.50394, -7.07087, -8.50394, -5.88976, -9.68504, -7.07087, -9.68504, -5.88976, 9.68504, -4.65391, 8.50394, 1.0, 9.68504, 1.0, 8.50394, -4.65391, -8.07087, -4.65391, -6.88976, 1.0, -6.88976, -4.65391, -8.07087, 1.0, -1.1811, -7.07087, 2.84217e-14, -5.88976, 2.84217e-14, -7.07087, -1.1811, -5.88976, 8.07087, 1.0, 6.88976, -4.65391, 6.88976, 1.0, 8.07087, -4.65391, 1.1811, -4.65391, -2.84217e-14, 1.0, 1.1811, 1.0, -2.86438e-14, -4.65391, 0.968504, 1.0, 8.71654, -5.45669, 0.968504, -5.45669, 8.71654, 1.0, -6.45669, -7.6063, -1.11187e-14, -5.62242, 3.09211e-15, -7.6063, -1.11187e-14, -5.62242, -6.45669, -7.6063, -6.45669, -5.6378, -6.45669, -5.62242, -6.45669, -5.6378, 9.68504, -8.5748, 8.50394, 1.0, 9.68504, 1.0, 8.50394, -4.65391, 8.71654, -5.62242, 8.71654, -7.6063, 0.968504, -7.6063, 0.968504, -7.6063, 9.68504, -8.5748, 0.0, -8.5748, 0.968504, -5.62242, 8.50394, -4.65391, 8.71654, -5.62242, 0.0, -8.5748, 0.968504, -5.62242, 0.968504, -7.6063, 0.0, -8.5748, 1.1811, -4.65391, 0.968504, -5.62242, 0.968504, -5.62242, 1.1811, -4.65391, 8.50394, -4.65391, 0.0, 1.0, 1.1811, -4.65391, 0.0, -8.5748, 1.1811, 1.0),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 7, 9, 8, 9, 7, 10, 11, 13, 12, 14, 16, 15, 17, 18, 10, 19, 7, 8, 8, 20, 19, 21, 23, 22, 24, 26, 25, 27, 22, 28, 29, 27, 28, 29, 28, 30, 31, 33, 32, 34, 36, 35, 37, 39, 38, 37, 40, 39, 40, 41, 39, 41, 42, 39, 43, 37, 44, 45, 47, 46, 46, 48, 45, 49, 51, 50, 52, 54, 53, 53, 55, 52, 56, 58, 57, 57, 59, 56, 60, 62, 61, 61, 63, 60, 64, 66, 65, 65, 67, 64, 68, 70, 69, 71, 68, 69, 71, 69, 72, 73, 75, 74, 76, 78, 77, 79, 80, 73, 81, 83, 82, 82, 84, 81, 85, 87, 86, 88, 90, 89, 91, 93, 92, 94, 95, 87, 96, 98, 97, 99, 94, 100, 101, 99, 100, 100, 102, 101, 103, 99, 101, 101, 104, 103, 105, 107, 106, 106, 108, 105, 109, 111, 110, 110, 112, 109, 113, 115, 114, 114, 116, 113, 117, 119, 118, 118, 120, 117, 121, 123, 122, 122, 124, 121, 125, 127, 126, 126, 128, 125, 129, 131, 130, 132, 134, 133, 135, 137, 136, 136, 138, 135, 139, 141, 140, 140, 142, 139, 143, 145, 144, 144, 146, 143, 147, 149, 148, 148, 150, 147, 151, 153, 152, 152, 154, 151, 155, 157, 156, 156, 158, 155, 159, 161, 160, 162, 164, 163, 165, 166, 160, 167, 169, 168, 168, 170, 167, 170, 171, 167, 171, 172, 167, 172, 173, 167, 174, 176, 175, 177, 179, 178, 180, 182, 181, 183, 185, 184, 186, 188, 187, 189, 191, 190, 190, 192, 189)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(4),
	"primitive":4,
	"arrays":[
		Vector3Array(0.0984001, 0.0352075, -0.0614806, -0.0983999, 0.0348169, -0.0614806, 0.0984001, 0.0348169, -0.0614806, -0.0983999, 0.0348169, -0.0614806, 0.0984001, 0.0352075, -0.0614806, -0.0983999, 0.0352075, -0.0614806, 0.0984001, 0.0852075, -0.0614806, -0.0983999, 0.0352075, -0.0614806, 0.0984001, 0.0352075, -0.0614806, -0.0983999, 0.0352075, -0.0614806, 0.0984001, 0.0852075, -0.0614806, -0.0983999, 0.0852075, -0.0614806),
		Vector3Array(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0),
		FloatArray(-1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-2.84217e-14, 1.0, 1.1811, -4.65391, -2.86438e-14, -4.65391, -2.84217e-14, 1.0, 1.1811, -4.65391, -2.86438e-14, -4.65391, -2.84217e-14, 1.0, 1.1811, -4.65391, -2.86438e-14, -4.65391, -2.84217e-14, 1.0, 1.1811, -4.65391, -2.86438e-14, -4.65391),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10)
	],
	"morph_arrays":[]
}

[sub_resource id=6 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=7 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.7406105399131775, 0.8228667378425598,
		0.8396226167678833, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=8 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(7)

[sub_resource id=9 type="ArrayMesh"]

resource_name = "Mesh drawer"
surfaces/0 = {
	"material":SubResource(6),
	"primitive":4,
	"arrays":[
		Vector3Array(0.0, 0.0503906, 0.0, 0.1968, 0.000390619, 0.0, 0.0, 0.000390619, 0.0, 0.1968, 0.0503906, 0.0, 0.1968, 0.000390619, 0.164, 0.1212, 0.0151406, 0.164, 0.0, 0.000390619, 0.164, 0.1968, 0.0503906, 0.164, 0.1212, 0.0356406, 0.164, 0.1212, 0.0356406, 0.164, 0.1968, 0.0503906, 0.164, 0.0756, 0.0356406, 0.164, 0.0756, 0.0151406, 0.164, 0.0, 0.000390619, 0.164, 0.0756, 0.0151406, 0.164, 0.0, 0.0503906, 0.164, 0.0, 0.0503906, 0.164, 0.0756, 0.0356406, 0.164, 0.0, 0.0503906, 0.164, 0.0756, 0.0356406, 0.164, 0.1968, 0.0503906, 0.164, 0.0, 0.0503906, 0.0, 0.0, 0.000390619, 0.164, 0.0, 0.0503906, 0.164, 0.0, 0.000390619, 0.164, 0.0, 0.0503906, 0.0, 0.0, 0.000390619, 0.0, 0.1968, 0.000390619, 0.0, 0.0, 0.000390619, 0.164, 0.0, 0.000390619, 0.0, 0.1968, 0.000390619, 0.164, 0.1968, 0.000390619, 0.0, 0.1968, 0.0503906, 0.164, 0.1968, 0.000390619, 0.164, 0.1968, 0.0503906, 0.0, 0.0, 0.0503906, 0.164, 0.020329, 0.0503906, 0.143671, 0.020329, 0.0503906, 0.020329, 0.1968, 0.0503906, 0.164, 0.176471, 0.0503906, 0.143671, 0.1968, 0.0503906, 0.0, 0.0, 0.0503906, 0.0, 0.020329, 0.0503906, 0.020329, 0.020329, 0.0503906, 0.020329, 0.0, 0.0503906, 0.0, 0.0, 0.0503906, 0.164, 0.176471, 0.0503906, 0.020329, 0.020329, 0.0103906, 0.143671, 0.176471, 0.0103906, 0.020329, 0.020329, 0.0103906, 0.020329, 0.176471, 0.0103906, 0.143671, 0.176471, 0.0503906, 0.020329, 0.176471, 0.0103906, 0.143671, 0.176471, 0.0503906, 0.143671, 0.176471, 0.0103906, 0.020329, 0.176471, 0.0503906, 0.020329, 0.020329, 0.0103906, 0.020329, 0.176471, 0.0103906, 0.020329, 0.020329, 0.0103906, 0.020329, 0.176471, 0.0503906, 0.020329, 0.020329, 0.0503906, 0.020329, 0.020329, 0.0103906, 0.020329, 0.020329, 0.0503906, 0.143671, 0.020329, 0.0103906, 0.143671, 0.020329, 0.0503906, 0.020329, 0.020329, 0.0503906, 0.143671, 0.176471, 0.0103906, 0.143671, 0.020329, 0.0103906, 0.143671, 0.176471, 0.0103906, 0.143671, 0.020329, 0.0503906, 0.143671, 0.176471, 0.0503906, 0.143671),
		Vector3Array(-3.66825e-15, 0.0, -1.0, -3.66825e-15, 0.0, -1.0, -3.66825e-15, 0.0, -1.0, -3.66825e-15, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -5.53864e-06, 1.0, 0.0, -5.53864e-06, 1.0, 0.0, -5.53864e-06, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.28334e-06, 1.0, 0.0, 1.28334e-06, 1.0, 0.0, 1.28334e-06, 1.0, -1.0, 0.0, 3.85166e-15, -1.0, 0.0, 3.85166e-15, -1.0, 0.0, 3.85166e-15, -1.0, 0.0, 3.85166e-15, -1.0, 0.0, 3.85166e-15, -1.0, 0.0, 3.85166e-15, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0),
		FloatArray(-1.0, 0.0, 3.66825e-15, 1.0, -1.0, 0.0, 3.66825e-15, 1.0, -1.0, 0.0, 3.66825e-15, 1.0, -1.0, 0.0, 3.66825e-15, 1.0, 1.0, 1.09809e-08, 0.0, 1.0, 1.0, 9.01996e-09, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.57001e-08, 0.0, 1.0, 1.0, 3.05273e-08, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.25162e-08, 0.0, 1.0, 1.0, 1.25162e-08, 0.0, 1.0, 1.0, 1.25162e-08, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 3.85166e-15, 0.0, 1.0, 1.0, 3.85166e-15, 0.0, 1.0, 1.0, 3.85166e-15, 0.0, 1.0, 1.0, 3.85166e-15, 0.0, 1.0, 1.0, 3.85166e-15, 0.0, 1.0, 1.0, 3.85166e-15, 0.0, 1.0, 1.0, -1.0, 0.0, 1.62241e-15, 1.0, -1.0, 0.0, 2.04584e-15, 1.0, -1.0, 0.0, 3.66825e-15, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, -1.36113e-07, 1.0, 1.0, 0.0, -1.50948e-07, 1.0, 1.0, 0.0, -3.01896e-07, 1.0, 1.0, 0.0, 1.13526e-07, 1.0, 1.0, 0.0, 1.04502e-07, 1.0, 1.0, 0.0, -1.06653e-08, 1.0, 1.0, 0.0, -3.66825e-15, 1.0, 1.0, 0.0, -3.48969e-15, 1.0, 1.0, 0.0, 5.67629e-08, 1.0, 1.0, 0.0, 5.67629e-08, 1.0, 1.0, 0.0, 5.67629e-08, 1.0, 1.0, 0.0, -3.7737e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.0, -0.983883, -7.74803, 0.984621, 0.0, 0.984621, -7.74803, -0.983883, 7.74803, 0.984621, 4.77165, 0.403913, 1.18424e-15, 0.984621, 7.74803, -0.983883, 4.77165, -0.403174, 4.77165, -0.403174, 7.74803, -0.983883, 2.97638, -0.403174, 2.97638, 0.403913, 1.18424e-15, 0.984621, 2.97638, 0.403913, 1.18424e-15, -0.983883, 1.18424e-15, -0.983883, 2.97638, -0.403174, 1.18424e-15, -0.983883, 2.97638, -0.403174, 7.74803, -0.983883, 0.0, -0.983883, 6.45669, 0.984621, 6.45669, -0.983883, 6.45669, 0.984621, 0.0, -0.983883, 0.0, 0.984621, -7.74803, 1.0, -2.4869e-14, 7.45669, 0.0, 1.0, -7.74803, 7.45669, -1.42109e-15, 0.984621, -6.45669, -0.983883, -6.45669, 0.984621, -1.42109e-15, -0.983883, 2.4869e-14, 7.45669, 0.800354, 6.65634, 0.800354, 1.80035, 7.74803, 7.45669, 6.94768, 6.65634, 7.74803, 1.0, 0.0, 1.0, 0.800354, 1.80035, 0.800354, 1.80035, 0.0, 1.0, 2.4869e-14, 7.45669, 6.94768, 1.80035, 0.800354, 6.65634, 6.94768, 1.80035, 0.800354, 1.80035, 6.94768, 6.65634, 0.800354, -0.983883, 5.65634, 0.590921, 5.65634, -0.983883, 0.800354, 0.590921, 6.94768, -0.983883, 0.800354, 0.590921, 6.94768, 0.590921, 0.800354, 0.590921, 6.94768, -0.983883, 0.800354, -0.983883, -0.800354, 0.590921, -5.65634, -0.983883, -5.65634, 0.590921, -0.800354, -0.983883, -0.800354, -0.983883, -6.94768, 0.590921, -0.800354, 0.590921, -6.94768, 0.590921, -0.800354, -0.983883, -6.94768, -0.983883),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4, 5, 8, 7, 9, 11, 10, 12, 5, 6, 13, 15, 14, 16, 17, 12, 18, 20, 19, 21, 23, 22, 24, 26, 25, 27, 29, 28, 28, 30, 27, 31, 33, 32, 32, 34, 31, 35, 37, 36, 36, 38, 35, 36, 39, 38, 39, 40, 38, 41, 40, 42, 43, 45, 44, 40, 46, 42, 40, 39, 46, 47, 49, 48, 48, 50, 47, 51, 53, 52, 52, 54, 51, 55, 57, 56, 58, 60, 59, 61, 63, 62, 62, 64, 61, 65, 67, 66, 68, 70, 69)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(8),
	"primitive":4,
	"arrays":[
		Vector3Array(0.08216, 0.0335906, 0.1763, 0.0756, 0.0151406, 0.164, 0.08216, 0.0171906, 0.1763, 0.0756, 0.0151406, 0.164, 0.08216, 0.0335906, 0.1763, 0.0756, 0.0356406, 0.164, 0.1212, 0.0151406, 0.164, 0.11464, 0.0335906, 0.1763, 0.11464, 0.0171906, 0.1763, 0.11464, 0.0335906, 0.1763, 0.1212, 0.0151406, 0.164, 0.1212, 0.0356406, 0.164, 0.08216, 0.0335906, 0.1763, 0.1212, 0.0356406, 0.164, 0.0756, 0.0356406, 0.164, 0.1212, 0.0356406, 0.164, 0.08216, 0.0335906, 0.1763, 0.11464, 0.0335906, 0.1763, 0.1212, 0.0151406, 0.164, 0.08216, 0.0171906, 0.1763, 0.0756, 0.0151406, 0.164, 0.08216, 0.0171906, 0.1763, 0.1212, 0.0151406, 0.164, 0.11464, 0.0171906, 0.1763, 0.11464, 0.0335906, 0.1763, 0.08216, 0.0171906, 0.1763, 0.11464, 0.0171906, 0.1763, 0.08216, 0.0335906, 0.1763),
		Vector3Array(-0.882353, 0.0, 0.470588, -0.882353, 0.0, 0.470588, -0.882353, 0.0, 0.470588, -0.882353, 0.0, 0.470588, -0.882353, 0.0, 0.470588, -0.882353, 0.0, 0.470588, 0.882353, 0.0, 0.470589, 0.882353, 0.0, 0.470589, 0.882353, 0.0, 0.470589, 0.882353, 0.0, 0.470589, 0.882353, 0.0, 0.470589, 0.882353, 0.0, 0.470589, 0.0, 0.986394, 0.164399, 0.0, 0.986394, 0.164399, 0.0, 0.986394, 0.164399, 0.0, 0.986394, 0.164399, 0.0, 0.986394, 0.164399, 0.0, 0.986394, 0.164399, 0.0, -0.986394, 0.164399, 0.0, -0.986394, 0.164399, 0.0, -0.986394, 0.164399, 0.0, -0.986394, 0.164399, 0.0, -0.986394, 0.164399, 0.0, -0.986394, 0.164399, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0),
		FloatArray(0.470588, 0.0, 0.882353, 1.0, 0.470588, 0.0, 0.882353, 1.0, 0.470588, 0.0, 0.882353, 1.0, 0.470588, 8.27784e-08, 0.882353, 1.0, 0.470588, 8.27784e-08, 0.882353, 1.0, 0.470588, 8.27784e-08, 0.882353, 1.0, 0.470589, 5.17365e-08, -0.882353, 1.0, 0.470589, 5.17365e-08, -0.882353, 1.0, 0.470589, 5.17365e-08, -0.882353, 1.0, 0.470589, -1.03473e-07, -0.882353, 1.0, 0.470589, -1.03473e-07, -0.882353, 1.0, 0.470589, -1.03473e-07, -0.882353, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(7.64655, -0.322465, 7.09773, 0.403913, 7.64655, 0.323204, 7.09773, 0.403913, 7.64655, -0.322465, 7.09773, -0.403174, -3.4516, 0.403913, -4.00042, -0.322465, -4.00042, 0.323204, -4.00042, -0.322465, -3.4516, 0.403913, -3.4516, -0.403174, 3.23465, 7.62909, 4.77165, 7.13816, 2.97638, 7.13816, 4.77165, 7.13816, 3.23465, 7.62909, 4.51339, 7.62909, 4.77165, -5.46684, 3.23465, -5.95777, 2.97638, -5.46684, 3.23465, -5.95777, 4.77165, -5.46684, 4.51339, -5.95777, 4.51339, -0.322465, 3.23465, 0.323204, 4.51339, 0.323204, 3.23465, -0.322465),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 20, 19, 21, 23, 22, 24, 26, 25, 25, 27, 24)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="cabinetBedDrawerTable(Clone)" type="MeshInstance" parent="."]

mesh = SubResource(5)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.123, 0.133392, -0.102519)

[node name="drawer" type="MeshInstance" parent="cabinetBedDrawerTable(Clone)"]

mesh = SubResource(9)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, -0.0983999, 0.0348169, -0.0614806)
