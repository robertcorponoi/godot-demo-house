[gd_scene load_steps=1 format=2]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.30588236451148987, 0.38823530077934265,
		0.38823530077934265, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=3 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.7406105399131775, 0.8228667378425598,
		0.8396226167678833, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=4 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(3)

[sub_resource id=5 type="ArrayMesh"]

resource_name = "Mesh televisionModern"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(0.034775, 0.2368, -0.00404092, -0.034775, 0.2368, -0.0227659, -0.034775, 0.2368, -0.00404092, 0.034775, 0.2368, -0.0227659, -0.3424, 0.45475, -0.00404092, -0.3424, 0.06955, 0.02675, -0.3424, 0.45475, 0.02675, -0.3424, 0.06955, -0.00404092, 0.1605, 0.0214, 0.04815, -0.17655, 0.0, 0.0642, 0.17655, 0.0, 0.0642, -0.17655, 0.0, 0.0642, 0.1605, 0.0214, 0.04815, -0.1605, 0.0214, 0.04815, -0.1605, 0.0214, 0.04815, -0.17655, 0.0, -0.0642, -0.17655, 0.0, 0.0642, -0.17655, 0.0, -0.0642, -0.1605, 0.0214, 0.04815, -0.1605, 0.0214, -0.05885, 0.334035, 0.077915, 0.02675, -0.334035, 0.077915, 0.0214, -0.334035, 0.077915, 0.02675, -0.334035, 0.077915, 0.0214, 0.334035, 0.077915, 0.02675, 0.334035, 0.077915, 0.0214, 0.17655, 0.0, -0.0642, -0.17655, 0.0, 0.0642, -0.17655, 0.0, -0.0642, 0.17655, 0.0, 0.0642, 0.3424, 0.06955, 0.02675, 0.334035, 0.077915, 0.02675, -0.3424, 0.06955, 0.02675, 0.3424, 0.45475, 0.02675, 0.334035, 0.446385, 0.02675, -0.334035, 0.446385, 0.02675, -0.334035, 0.077915, 0.02675, -0.3424, 0.45475, 0.02675, -0.3424, 0.06955, -0.00404092, -0.034775, 0.2033, -0.00404092, 0.3424, 0.06955, -0.00404092, -0.034775, 0.2033, -0.00404092, -0.3424, 0.06955, -0.00404092, -0.3424, 0.45475, -0.00404092, -0.034775, 0.2033, -0.00404092, -0.3424, 0.45475, -0.00404092, -0.034775, 0.2368, -0.00404092, -0.034775, 0.2368, -0.00404092, -0.3424, 0.45475, -0.00404092, 0.034775, 0.2368, -0.00404092, 0.034775, 0.2033, -0.00404092, 0.3424, 0.06955, -0.00404092, -0.034775, 0.2033, -0.00404092, 0.3424, 0.06955, -0.00404092, 0.034775, 0.2033, -0.00404092, 0.3424, 0.45475, -0.00404092, 0.034775, 0.2368, -0.00404092, 0.3424, 0.45475, -0.00404092, 0.034775, 0.2368, -0.00404092, -0.3424, 0.45475, -0.00404092, 0.3424, 0.06955, -0.00404092, 0.3424, 0.45475, 0.02675, 0.3424, 0.06955, 0.02675, 0.3424, 0.45475, -0.00404092, -0.334035, 0.077915, 0.0214, -0.334035, 0.446385, 0.02675, -0.334035, 0.077915, 0.02675, -0.334035, 0.446385, 0.0214, -0.034775, 0.218075, -0.0414909, 0.034775, 0.0214, -0.0414909, -0.034775, 0.0214, -0.0414909, 0.034775, 0.218075, -0.0414909, -0.1605, 0.0214, 0.04815, -0.034775, 0.0214, -0.0147409, -0.1605, 0.0214, -0.05885, -0.034775, 0.0214, -0.0147409, -0.1605, 0.0214, 0.04815, 0.1605, 0.0214, 0.04815, -0.034775, 0.0214, -0.0147409, 0.1605, 0.0214, 0.04815, 0.034775, 0.0214, -0.0147409, 0.034775, 0.0214, -0.0147409, 0.1605, 0.0214, 0.04815, 0.034775, 0.0214, -0.0414909, -0.034775, 0.0214, -0.0414909, -0.1605, 0.0214, -0.05885, -0.034775, 0.0214, -0.0147409, -0.1605, 0.0214, -0.05885, -0.034775, 0.0214, -0.0414909, 0.1605, 0.0214, -0.05885, 0.034775, 0.2033, -0.0147409, -0.034775, 0.2033, -0.00404092, -0.034775, 0.2033, -0.0147409, -0.034775, 0.2033, -0.00404092, 0.034775, 0.2033, -0.0147409, 0.034775, 0.2033, -0.00404092, 0.17655, 0.0, -0.0642, 0.1605, 0.0214, 0.04815, 0.17655, 0.0, 0.0642, 0.1605, 0.0214, 0.04815, 0.17655, 0.0, -0.0642, 0.1605, 0.0214, -0.05885, 0.3424, 0.06955, -0.00404092, -0.3424, 0.06955, 0.02675, -0.3424, 0.06955, -0.00404092, 0.3424, 0.06955, 0.02675, -0.034775, 0.2368, -0.0227659, -0.034775, 0.2033, -0.00404092, -0.034775, 0.2368, -0.00404092, -0.034775, 0.2033, -0.0147409, -0.034775, 0.0214, -0.0147409, -0.034775, 0.0214, -0.0414909, -0.034775, 0.218075, -0.0414909, 0.334035, 0.446385, 0.0214, -0.334035, 0.446385, 0.02675, -0.334035, 0.446385, 0.0214, -0.334035, 0.446385, 0.02675, 0.334035, 0.446385, 0.0214, 0.334035, 0.446385, 0.02675, -0.1605, 0.0214, -0.05885, 0.17655, 0.0, -0.0642, -0.17655, 0.0, -0.0642, 0.17655, 0.0, -0.0642, -0.1605, 0.0214, -0.05885, 0.1605, 0.0214, -0.05885, 0.3424, 0.45475, 0.02675, -0.3424, 0.45475, -0.00404092, -0.3424, 0.45475, 0.02675, 0.3424, 0.45475, -0.00404092, 0.334035, 0.446385, 0.0214, 0.334035, 0.077915, 0.02675, 0.334035, 0.446385, 0.02675, 0.334035, 0.077915, 0.0214, 0.034775, 0.2033, -0.0147409, -0.034775, 0.0214, -0.0147409, 0.034775, 0.0214, -0.0147409, -0.034775, 0.2033, -0.0147409, 0.034775, 0.0214, -0.0414909, 0.034775, 0.2033, -0.0147409, 0.034775, 0.0214, -0.0147409, 0.034775, 0.2368, -0.0227659, 0.034775, 0.218075, -0.0414909, 0.034775, 0.2368, -0.00404092, 0.034775, 0.2033, -0.00404092, -0.034775, 0.2368, -0.0227659, 0.034775, 0.218075, -0.0414909, -0.034775, 0.218075, -0.0414909, 0.034775, 0.218075, -0.0414909, -0.034775, 0.2368, -0.0227659, 0.034775, 0.2368, -0.0227659),
		Vector3Array(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8, 0.0, 0.6, 0.8, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, -0.8, 0.6, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.54204e-09, -1.0, 0.0, 2.54204e-09, -1.0, 0.0, 2.54204e-09, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.53598e-08, -1.0, 0.0, 1.53598e-08, -1.0, 0.0, 1.53598e-08, -1.0, 0.0, -2.50293e-08, -1.0, 0.0, -2.50293e-08, -1.0, 0.0, -2.50293e-08, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.55998e-09, -1.0, 0.0, -1.55998e-09, -1.0, 0.0, -1.55998e-09, -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 8.65376e-09, 1.0, 0.0, 8.65376e-09, 1.0, 0.0, 8.65376e-09, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -3.4615e-08, 1.0, 0.0, -3.4615e-08, 1.0, 0.0, -3.4615e-08, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.8, 0.6, 0.0, 0.8, 0.6, 0.0, 0.8, 0.6, 0.0, 0.8, 0.6, 0.0, 0.8, 0.6, 0.0, 0.8, 0.6, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.242535, -0.970143, 0.0, 0.242535, -0.970143, 0.0, 0.242535, -0.970143, 0.0, 0.242536, -0.970142, 0.0, 0.242536, -0.970142, 0.0, 0.242536, -0.970142, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107, 0.0, 0.707107, -0.707107),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 2.93656e-08, 0.0, 1.0, 1.0, 2.90889e-08, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 8.29836e-10, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.99085e-07, 0.0, 1.0, 1.0, 3.75968e-09, 0.0, 1.0, 1.0, 3.87809e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -7.34543e-08, 0.0, 1.0, -1.0, -7.34543e-08, 0.0, 1.0, -1.0, -7.34543e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, -8.65376e-09, 0.0, 1.0, 1.0, -8.65376e-09, 0.0, 1.0, 1.0, -8.65376e-09, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, -5.62702e-08, 1.0, 1.0, 0.0, -1.99983e-08, 1.0, 1.0, 0.0, -1.36192e-08, 1.0, 1.0, 3.4615e-08, 0.0, 1.0, 1.0, 3.4615e-08, 0.0, 1.0, 1.0, 3.4615e-08, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, -1.28388e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, -2.65581e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, -1.59919e-07, 1.0, 1.0, 0.0, -6.14674e-09, 1.0, 1.0, 0.0, -4.53874e-08, 1.0, 1.0, 0.0, -8.22191e-07, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 4.01054e-08, -1.0, 1.0, 0.0, 9.41114e-08, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 2.04798e-07, -1.0, 1.0, 0.0, 6.16643e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(1.36909, 0.840909, -1.36909, 0.103704, -1.36909, 0.840909, 1.36909, 0.103704, -0.159091, -16.9035, 1.05315, -1.73819, 1.05315, -16.9035, -0.159091, -1.73819, 6.3189, 1.46339, -6.95079, 2.51654, 6.95079, 2.51654, -6.95079, 2.51654, 6.3189, 1.46339, -6.3189, 1.46339, 1.89567, 4.11732, -2.52756, 5.17047, 2.52756, 5.17047, -2.52756, 5.17047, 1.89567, 4.11732, -2.31693, 4.11732, 13.151, 2.05315, -13.151, 1.84252, -13.151, 2.05315, -13.151, 1.84252, 13.151, 2.05315, 13.151, 1.84252, -6.95079, -1.52756, 6.95079, 3.52756, 6.95079, -1.52756, -6.95079, 3.52756, 13.4803, -1.73819, 13.151, -2.06752, -13.4803, -1.73819, 13.4803, -16.9035, 13.151, -16.5742, -13.151, -16.5742, -13.151, -2.06752, -13.4803, -16.9035, 13.4803, -1.73819, 1.36909, -7.00394, -13.4803, -1.73819, 1.36909, -7.00394, 13.4803, -1.73819, 13.4803, -16.9035, 1.36909, -7.00394, 13.4803, -16.9035, 1.36909, -8.32283, 1.36909, -8.32283, 13.4803, -16.9035, -1.36909, -8.32283, -1.36909, -7.00394, -13.4803, -1.73819, 1.36909, -7.00394, -13.4803, -1.73819, -1.36909, -7.00394, -13.4803, -16.9035, -1.36909, -8.32283, -13.4803, -16.9035, -1.36909, -8.32283, 13.4803, -16.9035, 0.159091, -1.73819, -1.05315, -16.9035, -1.05315, -1.73819, 0.159091, -16.9035, -0.84252, -2.06752, -1.05315, -16.5742, -1.05315, -2.06752, -0.84252, -16.5742, 1.36909, -7.58563, -1.36909, 0.15748, 1.36909, 0.15748, -1.36909, -7.58563, -6.3189, 2.89567, -1.36909, 0.419649, -6.3189, -1.31693, -1.36909, 0.419649, -6.3189, 2.89567, 6.3189, 2.89567, -1.36909, 0.419649, 6.3189, 2.89567, 1.36909, 0.419649, 1.36909, 0.419649, 6.3189, 2.89567, 1.36909, -0.633501, -1.36909, -0.633501, -6.3189, -1.31693, -1.36909, 0.419649, -6.3189, -1.31693, -1.36909, -0.633501, 6.3189, -1.31693, -1.36909, 0.419649, 1.36909, 0.840909, 1.36909, 0.419649, 1.36909, 0.840909, -1.36909, 0.419649, -1.36909, 0.840909, 2.52756, 5.17047, -1.89567, 4.11732, -2.52756, 5.17047, -1.89567, 4.11732, 2.52756, 5.17047, 2.31693, 4.11732, -13.4803, 0.840909, 13.4803, 2.05315, 13.4803, 0.840909, -13.4803, 2.05315, -0.896296, -8.32283, -0.159091, -7.00394, -0.159091, -8.32283, -0.580351, -7.00394, -0.580351, 0.15748, -1.6335, 0.15748, -1.6335, -7.58563, -13.151, 1.84252, 13.151, 2.05315, 13.151, 1.84252, 13.151, 2.05315, -13.151, 1.84252, -13.151, 2.05315, 6.3189, 0.744574, -6.95079, 1.61302, 6.95079, 1.61302, -6.95079, 1.61302, 6.3189, 0.744574, -6.3189, 0.744574, 13.4803, 2.05315, -13.4803, 0.840909, -13.4803, 2.05315, 13.4803, 0.840909, 0.84252, -16.5742, 1.05315, -2.06752, 1.05315, -16.5742, 0.84252, -2.06752, 1.36909, -7.00394, -1.36909, 0.15748, 1.36909, 0.15748, -1.36909, -7.00394, 1.6335, 0.15748, 0.580351, -7.00394, 0.580351, 0.15748, 0.896296, -8.32283, 1.6335, -7.58563, 0.159091, -8.32283, 0.159091, -7.00394, 1.36909, -4.95846, -1.36909, -3.9159, 1.36909, -3.9159, -1.36909, -3.9159, 1.36909, -4.95846, -1.36909, -4.95846),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4, 8, 10, 9, 11, 13, 12, 14, 16, 15, 17, 19, 18, 20, 22, 21, 23, 25, 24, 26, 28, 27, 27, 29, 26, 30, 32, 31, 31, 33, 30, 31, 34, 33, 34, 35, 33, 36, 31, 32, 32, 37, 36, 37, 35, 36, 37, 33, 35, 38, 40, 39, 41, 43, 42, 44, 46, 45, 47, 49, 48, 50, 52, 51, 53, 55, 54, 55, 56, 54, 57, 59, 58, 60, 62, 61, 61, 63, 60, 64, 66, 65, 65, 67, 64, 68, 70, 69, 69, 71, 68, 72, 74, 73, 75, 77, 76, 78, 80, 79, 81, 83, 82, 84, 86, 85, 87, 89, 88, 89, 83, 88, 89, 82, 83, 90, 92, 91, 93, 95, 94, 96, 98, 97, 99, 101, 100, 102, 104, 103, 103, 105, 102, 106, 108, 107, 107, 109, 106, 109, 110, 106, 110, 111, 106, 111, 112, 106, 113, 115, 114, 116, 118, 117, 119, 121, 120, 122, 124, 123, 125, 127, 126, 126, 128, 125, 129, 131, 130, 130, 132, 129, 133, 135, 134, 134, 136, 133, 137, 139, 138, 138, 140, 137, 140, 141, 137, 142, 140, 138, 138, 143, 142, 144, 146, 145, 147, 149, 148)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(4),
	"primitive":4,
	"arrays":[
		Vector3Array(0.334035, 0.446385, 0.0214, -0.334035, 0.077915, 0.0214, 0.334035, 0.077915, 0.0214, -0.334035, 0.446385, 0.0214),
		Vector3Array(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(13.151, -16.5742, -13.151, -2.06752, 13.151, -2.06752, -13.151, -16.5742),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="televisionModern(Clone)" type="MeshInstance" parent="."]

mesh = SubResource(5)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)
