[gd_scene load_steps=1 format=2]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.8962264060974121, 0.6015712022781372,
		0.39315590262413025, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=3 type="ArrayMesh"]

resource_name = "Mesh bookcaseOpen"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(0.4, 0.88, -0.21, 0.36, 0.88, -0.25, 0.36, 0.88, -0.21, 0.4, 0.88, -0.25, 0.4, 0.88, 0.0, 0.36, 0.88, -0.04, 0.36, 0.88, 0.0, 0.4, 0.88, -0.04, 0.0, 0.88, -0.25, 0.04, 0.0, -0.25, 0.0, 0.0, -0.25, 0.04, 0.88, -0.25, 0.04, 0.61, -0.02, 0.02, 0.61, -0.04, 0.02, 0.61, -0.02, 0.04, 0.61, -0.04, 0.36, 0.61, -0.02, 0.04, 0.61, -0.04, 0.36, 0.61, -0.02, 0.04, 0.61, -0.21, 0.04, 0.61, -0.21, 0.36, 0.61, -0.02, 0.04, 0.61, -0.23, 0.02, 0.61, -0.23, 0.02, 0.61, -0.21, 0.36, 0.61, -0.23, 0.36, 0.61, -0.02, 0.36, 0.61, -0.04, 0.38, 0.61, -0.02, 0.36, 0.61, -0.04, 0.36, 0.61, -0.02, 0.38, 0.61, -0.04, 0.36, 0.61, -0.21, 0.38, 0.61, -0.21, 0.36, 0.61, -0.21, 0.38, 0.61, -0.04, 0.38, 0.61, -0.21, 0.38, 0.61, -0.23, 0.04, 0.88, 0.0, 0.0, 0.0, 0.0, 0.04, 0.0, 0.0, 0.0, 0.88, 0.0, 0.36, 0.88, -0.25, 0.4, 0.0, -0.25, 0.36, 0.0, -0.25, 0.4, 0.88, -0.25, 0.4, 0.0, -0.04, 0.36, 0.0, 0.0, 0.36, 0.0, -0.04, 0.4, 0.0, 0.0, 0.04, 0.85, -0.21, 0.02, 0.85, -0.23, 0.02, 0.85, -0.21, 0.04, 0.85, -0.23, 0.36, 0.85, -0.02, 0.04, 0.85, -0.04, 0.04, 0.85, -0.02, 0.02, 0.85, -0.04, 0.02, 0.85, -0.02, 0.36, 0.85, -0.23, 0.36, 0.85, -0.02, 0.36, 0.85, -0.04, 0.38, 0.85, -0.02, 0.36, 0.85, -0.04, 0.36, 0.85, -0.02, 0.38, 0.85, -0.04, 0.36, 0.85, -0.21, 0.38, 0.85, -0.21, 0.36, 0.85, -0.21, 0.38, 0.85, -0.04, 0.38, 0.85, -0.21, 0.38, 0.85, -0.23, 0.0, 0.88, -0.25, 0.0, 0.0, -0.21, 0.0, 0.88, -0.21, 0.0, 0.0, -0.21, 0.0, 0.88, -0.25, 0.0, 0.0, -0.25, 0.04, 0.0, -0.25, 0.0, 0.0, -0.21, 0.0, 0.0, -0.25, 0.0, 0.0, -0.21, 0.04, 0.0, -0.25, 0.04, 0.0, -0.21, 0.04, 0.0, -0.04, 0.0, 0.0, 0.0, 0.0, 0.0, -0.04, 0.04, 0.0, 0.0, 0.4, 0.0, -0.25, 0.4, 0.88, -0.21, 0.4, 0.0, -0.21, 0.4, 0.88, -0.25, 0.38, 0.34, -0.21, 0.38, 0.37, -0.04, 0.38, 0.34, -0.04, 0.38, 0.37, -0.21, 0.38, 0.37, -0.21, 0.36, 0.37, -0.23, 0.36, 0.37, -0.21, 0.38, 0.37, -0.23, 0.36, 0.37, -0.21, 0.38, 0.37, -0.04, 0.38, 0.37, -0.21, 0.38, 0.37, -0.04, 0.36, 0.37, -0.04, 0.36, 0.37, -0.04, 0.38, 0.37, -0.02, 0.36, 0.37, -0.02, 0.36, 0.37, -0.02, 0.04, 0.37, -0.23, 0.04, 0.37, -0.21, 0.36, 0.37, -0.02, 0.04, 0.37, -0.23, 0.02, 0.37, -0.23, 0.04, 0.37, -0.21, 0.02, 0.37, -0.21, 0.04, 0.37, -0.04, 0.36, 0.37, -0.02, 0.04, 0.37, -0.21, 0.04, 0.37, -0.04, 0.36, 0.37, -0.02, 0.04, 0.37, -0.02, 0.02, 0.37, -0.04, 0.02, 0.37, -0.02, 0.0, 0.88, -0.04, 0.0, 0.0, 0.0, 0.0, 0.88, 0.0, 0.0, 0.0, -0.04, 0.4, 0.0, -0.25, 0.36, 0.0, -0.21, 0.36, 0.0, -0.25, 0.4, 0.0, -0.21, 0.04, 0.88, 0.0, 0.0, 0.88, -0.04, 0.0, 0.88, 0.0, 0.04, 0.88, -0.04, 0.04, 0.88, -0.21, 0.0, 0.88, -0.25, 0.0, 0.88, -0.21, 0.0, 0.88, -0.25, 0.04, 0.88, -0.21, 0.04, 0.88, -0.25, 0.38, 0.1, -0.21, 0.38, 0.13, -0.04, 0.38, 0.1, -0.04, 0.38, 0.13, -0.04, 0.38, 0.1, -0.21, 0.38, 0.13, -0.21, 0.02, 0.13, -0.21, 0.02, 0.1, -0.04, 0.02, 0.13, -0.04, 0.02, 0.1, -0.04, 0.02, 0.13, -0.21, 0.02, 0.1, -0.21, 0.04, 0.13, -0.21, 0.02, 0.13, -0.23, 0.02, 0.13, -0.21, 0.04, 0.13, -0.23, 0.36, 0.13, -0.02, 0.04, 0.13, -0.04, 0.36, 0.13, -0.02, 0.04, 0.13, -0.21, 0.04, 0.13, -0.04, 0.36, 0.13, -0.02, 0.04, 0.13, -0.02, 0.02, 0.13, -0.04, 0.02, 0.13, -0.02, 0.36, 0.13, -0.23, 0.36, 0.13, -0.02, 0.36, 0.13, -0.04, 0.38, 0.13, -0.02, 0.36, 0.13, -0.04, 0.36, 0.13, -0.02, 0.38, 0.13, -0.04, 0.36, 0.13, -0.21, 0.38, 0.13, -0.21, 0.36, 0.13, -0.21, 0.38, 0.13, -0.04, 0.38, 0.13, -0.21, 0.38, 0.13, -0.23, 0.38, 0.58, -0.21, 0.38, 0.61, -0.04, 0.38, 0.58, -0.04, 0.38, 0.61, -0.21, 0.36, 0.34, -0.04, 0.38, 0.13, -0.04, 0.36, 0.13, -0.04, 0.38, 0.34, -0.04, 0.4, 0.88, -0.04, 0.4, 0.88, -0.04, 0.38, 0.1, -0.04, 0.38, 0.13, -0.04, 0.4, 0.0, -0.04, 0.38, 0.1, -0.04, 0.4, 0.88, -0.04, 0.36, 0.1, -0.04, 0.36, 0.0, -0.04, 0.38, 0.37, -0.04, 0.38, 0.58, -0.04, 0.36, 0.58, -0.04, 0.36, 0.37, -0.04, 0.38, 0.61, -0.04, 0.38, 0.82, -0.04, 0.36, 0.82, -0.04, 0.36, 0.61, -0.04, 0.38, 0.85, -0.04, 0.36, 0.88, -0.04, 0.36, 0.85, -0.04, 0.38, 0.58, -0.21, 0.36, 0.58, -0.04, 0.36, 0.58, -0.21, 0.36, 0.58, -0.04, 0.38, 0.58, -0.21, 0.38, 0.58, -0.04, 0.36, 0.58, -0.02, 0.36, 0.58, -0.21, 0.36, 0.58, -0.04, 0.36, 0.58, -0.23, 0.04, 0.58, -0.02, 0.36, 0.58, -0.23, 0.36, 0.58, -0.02, 0.04, 0.58, -0.04, 0.04, 0.58, -0.21, 0.04, 0.58, -0.23, 0.02, 0.58, -0.04, 0.02, 0.58, -0.21, 0.0, 0.0, -0.04, 0.02, 0.1, -0.04, 0.04, 0.0, -0.04, 0.02, 0.1, -0.04, 0.0, 0.0, -0.04, 0.0, 0.88, -0.04, 0.02, 0.1, -0.04, 0.0, 0.88, -0.04, 0.02, 0.13, -0.04, 0.02, 0.34, -0.04, 0.04, 0.13, -0.04, 0.02, 0.37, -0.04, 0.02, 0.58, -0.04, 0.04, 0.37, -0.04, 0.02, 0.61, -0.04, 0.04, 0.61, -0.04, 0.04, 0.61, -0.04, 0.0, 0.88, -0.04, 0.02, 0.82, -0.04, 0.02, 0.82, -0.04, 0.0, 0.88, -0.04, 0.02, 0.85, -0.04, 0.04, 0.85, -0.04, 0.04, 0.88, -0.04, 0.04, 0.82, -0.04, 0.02, 0.82, -0.04, 0.04, 0.58, -0.04, 0.04, 0.34, -0.04, 0.04, 0.1, -0.04, 0.02, 0.61, -0.21, 0.02, 0.58, -0.04, 0.02, 0.61, -0.04, 0.02, 0.58, -0.21, 0.38, 0.82, -0.21, 0.38, 0.85, -0.04, 0.38, 0.82, -0.04, 0.38, 0.85, -0.21, 0.02, 0.37, -0.21, 0.02, 0.34, -0.04, 0.02, 0.37, -0.04, 0.02, 0.34, -0.21, 0.02, 0.85, -0.21, 0.02, 0.82, -0.04, 0.02, 0.85, -0.04, 0.02, 0.82, -0.21, 0.36, 0.88, -0.25, 0.36, 0.85, -0.21, 0.36, 0.88, -0.21, 0.36, 0.85, -0.23, 0.36, 0.85, -0.23, 0.36, 0.88, -0.25, 0.36, 0.82, -0.23, 0.36, 0.82, -0.23, 0.36, 0.88, -0.25, 0.36, 0.61, -0.23, 0.36, 0.58, -0.23, 0.36, 0.58, -0.23, 0.36, 0.88, -0.25, 0.36, 0.37, -0.23, 0.36, 0.37, -0.23, 0.36, 0.88, -0.25, 0.36, 0.34, -0.23, 0.36, 0.13, -0.23, 0.36, 0.13, -0.23, 0.36, 0.88, -0.25, 0.36, 0.1, -0.23, 0.36, 0.0, -0.25, 0.36, 0.1, -0.23, 0.36, 0.88, -0.25, 0.36, 0.0, -0.21, 0.36, 0.1, -0.23, 0.36, 0.0, -0.25, 0.36, 0.1, -0.21, 0.36, 0.13, -0.21, 0.36, 0.34, -0.21, 0.36, 0.37, -0.21, 0.36, 0.58, -0.23, 0.36, 0.37, -0.23, 0.36, 0.58, -0.21, 0.36, 0.61, -0.21, 0.36, 0.82, -0.21, 0.04, 0.37, -0.23, 0.36, 0.34, -0.23, 0.04, 0.34, -0.23, 0.36, 0.37, -0.23, 0.04, 0.61, -0.23, 0.36, 0.58, -0.23, 0.04, 0.58, -0.23, 0.36, 0.58, -0.23, 0.04, 0.61, -0.23, 0.36, 0.61, -0.23, 0.38, 0.82, -0.21, 0.36, 0.82, -0.04, 0.36, 0.82, -0.21, 0.36, 0.82, -0.04, 0.38, 0.82, -0.21, 0.38, 0.82, -0.04, 0.36, 0.82, -0.02, 0.36, 0.82, -0.21, 0.36, 0.82, -0.04, 0.36, 0.82, -0.23, 0.04, 0.82, -0.02, 0.36, 0.82, -0.23, 0.36, 0.82, -0.02, 0.04, 0.82, -0.04, 0.36, 0.82, -0.23, 0.04, 0.82, -0.02, 0.04, 0.82, -0.21, 0.36, 0.82, -0.23, 0.04, 0.82, -0.04, 0.04, 0.82, -0.23, 0.02, 0.82, -0.04, 0.02, 0.82, -0.21, 0.04, 0.85, -0.23, 0.36, 0.82, -0.23, 0.04, 0.82, -0.23, 0.36, 0.85, -0.23, 0.04, 0.13, -0.23, 0.36, 0.1, -0.23, 0.04, 0.1, -0.23, 0.36, 0.13, -0.23, 0.04, 0.34, -0.21, 0.02, 0.13, -0.21, 0.04, 0.13, -0.21, 0.02, 0.34, -0.21, 0.0, 0.88, -0.21, 0.02, 0.1, -0.21, 0.0, 0.0, -0.21, 0.04, 0.1, -0.21, 0.04, 0.0, -0.21, 0.02, 0.37, -0.21, 0.02, 0.58, -0.21, 0.04, 0.58, -0.21, 0.04, 0.37, -0.21, 0.02, 0.61, -0.21, 0.02, 0.82, -0.21, 0.04, 0.82, -0.21, 0.04, 0.61, -0.21, 0.02, 0.85, -0.21, 0.04, 0.88, -0.21, 0.04, 0.85, -0.21, 0.04, 0.0, -0.25, 0.04, 0.1, -0.21, 0.04, 0.0, -0.21, 0.04, 0.1, -0.23, 0.04, 0.1, -0.23, 0.04, 0.0, -0.25, 0.04, 0.13, -0.23, 0.04, 0.13, -0.23, 0.04, 0.0, -0.25, 0.04, 0.34, -0.23, 0.04, 0.34, -0.23, 0.04, 0.0, -0.25, 0.04, 0.37, -0.23, 0.04, 0.37, -0.23, 0.04, 0.0, -0.25, 0.04, 0.58, -0.23, 0.04, 0.58, -0.23, 0.04, 0.0, -0.25, 0.04, 0.61, -0.23, 0.04, 0.61, -0.23, 0.04, 0.0, -0.25, 0.04, 0.82, -0.23, 0.04, 0.85, -0.23, 0.04, 0.88, -0.25, 0.04, 0.88, -0.21, 0.04, 0.85, -0.21, 0.04, 0.82, -0.21, 0.04, 0.61, -0.21, 0.04, 0.58, -0.21, 0.04, 0.37, -0.23, 0.04, 0.58, -0.23, 0.04, 0.37, -0.21, 0.04, 0.34, -0.21, 0.04, 0.13, -0.23, 0.04, 0.34, -0.23, 0.04, 0.13, -0.21, 0.36, 0.61, -0.02, 0.04, 0.58, -0.02, 0.36, 0.58, -0.02, 0.04, 0.58, -0.02, 0.36, 0.61, -0.02, 0.04, 0.61, -0.02, 0.36, 0.88, 0.0, 0.36, 0.85, -0.02, 0.36, 0.0, 0.0, 0.36, 0.85, -0.02, 0.36, 0.88, 0.0, 0.36, 0.88, -0.04, 0.36, 0.85, -0.04, 0.36, 0.1, -0.02, 0.36, 0.0, 0.0, 0.36, 0.85, -0.02, 0.36, 0.0, 0.0, 0.36, 0.1, -0.02, 0.36, 0.0, -0.04, 0.36, 0.1, -0.02, 0.36, 0.85, -0.02, 0.36, 0.82, -0.02, 0.36, 0.61, -0.02, 0.36, 0.82, -0.04, 0.36, 0.61, -0.02, 0.36, 0.82, -0.02, 0.36, 0.61, -0.04, 0.36, 0.58, -0.02, 0.36, 0.37, -0.02, 0.36, 0.58, -0.04, 0.36, 0.37, -0.02, 0.36, 0.58, -0.02, 0.36, 0.37, -0.04, 0.36, 0.34, -0.02, 0.36, 0.13, -0.02, 0.36, 0.34, -0.04, 0.36, 0.13, -0.02, 0.36, 0.34, -0.02, 0.36, 0.13, -0.04, 0.36, 0.1, -0.04, 0.36, 0.85, -0.02, 0.04, 0.82, -0.02, 0.36, 0.82, -0.02, 0.04, 0.85, -0.02, 0.36, 0.37, -0.02, 0.04, 0.34, -0.02, 0.36, 0.34, -0.02, 0.04, 0.37, -0.02, 0.36, 0.13, -0.02, 0.04, 0.1, -0.02, 0.36, 0.1, -0.02, 0.04, 0.13, -0.02, 0.04, 0.0, 0.0, 0.04, 0.1, -0.02, 0.04, 0.88, 0.0, 0.04, 0.0, -0.04, 0.04, 0.1, -0.04, 0.04, 0.85, -0.02, 0.04, 0.88, -0.04, 0.04, 0.85, -0.02, 0.04, 0.1, -0.02, 0.04, 0.13, -0.02, 0.04, 0.34, -0.02, 0.04, 0.13, -0.04, 0.04, 0.34, -0.02, 0.04, 0.13, -0.02, 0.04, 0.34, -0.04, 0.04, 0.37, -0.02, 0.04, 0.58, -0.02, 0.04, 0.37, -0.04, 0.04, 0.58, -0.02, 0.04, 0.37, -0.02, 0.04, 0.58, -0.04, 0.04, 0.61, -0.02, 0.04, 0.82, -0.02, 0.04, 0.61, -0.04, 0.04, 0.82, -0.02, 0.04, 0.61, -0.02, 0.04, 0.82, -0.04, 0.04, 0.85, -0.04, 0.38, 0.34, -0.21, 0.36, 0.34, -0.04, 0.36, 0.34, -0.21, 0.36, 0.34, -0.04, 0.38, 0.34, -0.21, 0.38, 0.34, -0.04, 0.36, 0.34, -0.02, 0.36, 0.34, -0.21, 0.36, 0.34, -0.04, 0.36, 0.34, -0.23, 0.04, 0.34, -0.02, 0.36, 0.34, -0.23, 0.36, 0.34, -0.02, 0.04, 0.34, -0.04, 0.04, 0.34, -0.21, 0.04, 0.34, -0.23, 0.02, 0.34, -0.04, 0.02, 0.34, -0.21, 0.38, 0.1, -0.21, 0.36, 0.1, -0.04, 0.36, 0.1, -0.21, 0.36, 0.1, -0.04, 0.38, 0.1, -0.21, 0.38, 0.1, -0.04, 0.36, 0.1, -0.02, 0.36, 0.1, -0.21, 0.36, 0.1, -0.04, 0.36, 0.1, -0.23, 0.04, 0.1, -0.02, 0.36, 0.1, -0.23, 0.36, 0.1, -0.02, 0.04, 0.1, -0.04, 0.36, 0.1, -0.23, 0.04, 0.1, -0.02, 0.04, 0.1, -0.21, 0.36, 0.1, -0.23, 0.04, 0.1, -0.04, 0.04, 0.1, -0.23, 0.02, 0.1, -0.04, 0.02, 0.1, -0.21, 0.4, 0.0, -0.21, 0.38, 0.1, -0.21, 0.36, 0.0, -0.21, 0.4, 0.88, -0.21, 0.38, 0.13, -0.21, 0.38, 0.34, -0.21, 0.36, 0.13, -0.21, 0.38, 0.37, -0.21, 0.38, 0.58, -0.21, 0.36, 0.37, -0.21, 0.38, 0.61, -0.21, 0.36, 0.61, -0.21, 0.36, 0.61, -0.21, 0.4, 0.88, -0.21, 0.38, 0.82, -0.21, 0.38, 0.82, -0.21, 0.4, 0.88, -0.21, 0.38, 0.85, -0.21, 0.36, 0.85, -0.21, 0.36, 0.88, -0.21, 0.36, 0.82, -0.21, 0.38, 0.82, -0.21, 0.36, 0.58, -0.21, 0.36, 0.34, -0.21, 0.36, 0.1, -0.21, 0.4, 0.0, -0.04, 0.4, 0.88, 0.0, 0.4, 0.0, 0.0, 0.4, 0.88, -0.04, 0.4, 0.88, 0.0, 0.36, 0.0, 0.0, 0.4, 0.0, 0.0, 0.36, 0.88, 0.0),
		Vector3Array(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -2.73918e-07, 1.0, 0.0, -2.73918e-07, 1.0, 0.0, -2.73918e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -4.37114e-08, 1.0, 4.79658e-05, -4.37114e-08, 1.0, 4.79658e-05, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -4.37114e-08, 1.0, 4.79658e-05, -4.37114e-08, 1.0, 4.79658e-05, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, -1.80478e-14, -1.0, 0.0, -1.80478e-14, -1.0, 0.0, -1.80478e-14, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 4.37114e-08, 1.0, 4.79658e-05, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 4.37114e-08, 1.0, 4.76718e-05, 0.0, 1.0, 0.0, 2.32831e-06, 1.0, 0.0, 2.32831e-06, 1.0, 0.0, 2.32831e-06, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -2.73918e-07, 1.0, 0.0, -2.73918e-07, 1.0, 0.0, -2.73918e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -6.84796e-08, 1.0, 0.0, -6.84796e-08, 1.0, 0.0, -6.84796e-08, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -4.37114e-08, 1.0, 4.79658e-05, -4.37114e-08, 1.0, 4.79658e-05, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -4.37114e-08, -1.0, -4.79658e-05, 4.77711e-05, -1.0, -2.29138e-09, -4.37114e-08, -1.0, -4.79658e-05, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -3.28142e-15, -1.0, 0.0, -3.28142e-15, -1.0, 0.0, -3.28142e-15, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -6.20887e-06, -1.0, 0.0, -6.20887e-06, -1.0, 0.0, -6.20887e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -7.09579e-06, -1.0, 0.0, -7.09579e-06, -1.0, 0.0, -7.09579e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 9.93409e-05, -1.0, 0.0, 9.93409e-05, -1.0, 0.0, 9.93409e-05, -1.0, 0.0, -3.38663e-06, -1.0, 0.0, -3.38663e-06, -1.0, 0.0, -3.38663e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 4.77711e-05, -1.0, -2.29138e-09, 4.37114e-08, -1.0, -4.79658e-05, 4.77711e-05, -1.0, -2.29138e-09, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 4.65661e-06, -1.0, 0.0, 4.65661e-06, -1.0, 0.0, 4.65661e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.55221e-06, 1.0, 0.0, -1.55221e-06, 1.0, 0.0, -1.55221e-06, 1.0, 0.0, 4.43487e-07, 1.0, 0.0, 4.43487e-07, 1.0, 0.0, 4.43487e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 8.86974e-07, 1.0, 0.0, 8.86974e-07, 1.0, 0.0, 8.86974e-07, 1.0, 0.0, -6.20881e-06, 1.0, 0.0, -6.20881e-06, 1.0, 0.0, -6.20881e-06, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 3.38663e-06, -1.0, 0.0, 3.38663e-06, -1.0, 0.0, 3.38663e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -3.97364e-06, -1.0, 0.0, -3.97364e-06, -1.0, 0.0, -3.97364e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 4.76718e-05, -4.37114e-08, -1.0, 4.79658e-05, -4.37114e-08, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 4.79658e-05, 4.37114e-08, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 4.79658e-05, -4.37114e-08, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -4.79658e-05, 4.37114e-08, 1.0, -4.79658e-05, 4.37114e-08, 1.0, -4.79658e-05, -4.37114e-08, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -4.79658e-05, 4.37114e-08, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -4.79658e-05, 4.37114e-08, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -4.37114e-08, -1.0, -4.79658e-05, 4.37114e-08, -1.0, -4.79658e-05, -4.37114e-08, -1.0, -4.79658e-05, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 4.37114e-08, -1.0, -4.79658e-05, 4.77711e-05, -1.0, -2.29138e-09, 4.37114e-08, -1.0, -4.76718e-05, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 5.82076e-07, -1.0, 0.0, 5.82076e-07, -1.0, 0.0, 5.82076e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 2.73918e-07, 6.95753e-09, 1.0, 1.0, 2.73918e-07, 6.95753e-09, 1.0, 1.0, 2.73918e-07, 6.95753e-09, 1.0, 1.0, 0.0, 4.74763e-08, 1.0, 1.0, 0.0, 5.13651e-09, 1.0, 1.0, 0.0, 3.7274e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 4.08019e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 3.7274e-08, 1.0, 1.0, 0.0, 5.4812e-09, 1.0, 1.0, 0.0, 1.8085e-09, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.80478e-14, 0.0, 1.0, 1.0, -1.80478e-14, 0.0, 1.0, 1.0, -1.80478e-14, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -2.32831e-06, 1.18278e-07, 1.0, 1.0, -2.32831e-06, 1.18278e-07, 1.0, 1.0, -2.32831e-06, 1.18278e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 2.73918e-07, 6.95753e-09, 1.0, 1.0, 2.73918e-07, 6.95753e-09, 1.0, 1.0, 2.73918e-07, 6.95753e-09, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 4.74763e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 3.7274e-08, 1.0, 1.0, 0.0, 5.13651e-09, 1.0, 1.0, 6.84796e-08, 6.95753e-09, 1.0, 1.0, 6.84796e-08, 6.95753e-09, 1.0, 1.0, 6.84796e-08, 6.95753e-09, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 9.6262e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 3.79966e-06, 0.0, 1.0, -1.0, 8.11379e-07, 0.0, 1.0, -1.0, -8.07443e-05, 0.0, 1.0, -1.0, -8.07443e-05, 0.0, 1.0, -1.0, -8.07443e-05, 0.0, 1.0, -1.0, 4.32393e-08, 0.0, 1.0, -1.0, 2.14268e-07, 0.0, 1.0, -1.0, 3.44081e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 2.39858e-08, 0.0, 1.0, -1.0, 2.02433e-06, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 6.60426e-06, 0.0, 1.0, -1.0, 1.42341e-06, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 1.0255e-06, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, -1.0, 0.0, -3.72741e-08, 1.0, -1.0, 0.0, -3.789e-09, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, -2.79653e-08, 1.0, -1.0, 0.0, -2.41133e-09, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -3.44081e-07, 0.0, 1.0, -1.0, -3.44081e-07, 0.0, 1.0, -1.0, -3.44081e-07, 0.0, 1.0, -1.0, 2.52326e-06, 0.0, 1.0, -1.0, -1.59293e-07, 0.0, 1.0, -1.0, 1.68422e-06, 0.0, 1.0, -1.0, 1.97912e-06, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 6.64476e-06, 0.0, 1.0, -1.0, -1.42579e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -6.57034e-06, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -2.01861e-06, 0.0, 1.0, -1.0, -2.01861e-06, 0.0, 1.0, -1.0, -2.01861e-06, 0.0, 1.0, -1.0, -1.89245e-06, 0.0, 1.0, -1.0, -4.03403e-07, 0.0, 1.0, -1.0, -1.0255e-06, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -6.20887e-06, 1.89245e-06, 1.0, 1.0, -6.20887e-06, 1.89245e-06, 1.0, 1.0, -6.20887e-06, 1.89245e-06, 1.0, 1.0, 0.0, 1.50479e-06, 1.0, 1.0, 0.0, 2.56671e-06, 1.0, 1.0, 0.0, 6.6071e-06, 1.0, 1.0, 0.0, 1.00931e-05, 1.0, 1.0, -7.09579e-06, 0.0, 1.0, 1.0, -7.09579e-06, 0.0, 1.0, 1.0, -7.09579e-06, 0.0, 1.0, 1.0, 0.0, -1.26163e-05, 1.0, 1.0, 0.0, -2.21711e-06, 1.0, 1.0, 0.0, -9.91163e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 9.93409e-05, -5.04653e-06, 1.0, 1.0, 9.93409e-05, -5.04653e-06, 1.0, 1.0, 9.93409e-05, -5.04653e-06, 1.0, 1.0, -3.38663e-06, 3.44081e-07, 1.0, 1.0, -3.38663e-06, 3.44081e-07, 1.0, 1.0, -3.38663e-06, 3.44081e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -4.65661e-06, -5.9139e-08, 1.0, -1.0, -4.65661e-06, -5.9139e-08, 1.0, -1.0, -4.65661e-06, -5.9139e-08, 1.0, -1.0, 0.0, -2.41133e-09, 1.0, -1.0, 0.0, -6.14702e-09, 1.0, -1.0, 0.0, -2.76345e-09, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -5.33402e-05, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.79966e-06, 0.0, 1.0, 1.0, 7.47069e-07, 0.0, 1.0, 1.0, -2.26168e-07, 0.0, 1.0, 1.0, 4.32393e-08, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 2.39859e-08, 0.0, 1.0, 1.0, 2.02433e-06, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 6.60427e-06, 0.0, 1.0, 1.0, 1.42341e-06, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0255e-06, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.55221e-06, -9.46224e-07, -1.0, 1.0, -1.55221e-06, -9.46224e-07, -1.0, 1.0, -1.55221e-06, -9.46224e-07, -1.0, 1.0, 4.43487e-07, 0.0, -1.0, 1.0, 4.43487e-07, 0.0, -1.0, 1.0, 4.43487e-07, 0.0, -1.0, 1.0, 0.0, -7.5698e-06, -1.0, 1.0, 0.0, -7.5698e-06, -1.0, 1.0, 0.0, -7.56979e-06, -1.0, 1.0, 8.86974e-07, -1.44187e-06, -1.0, 1.0, 8.86974e-07, -1.44186e-06, -1.0, 1.0, 8.86974e-07, -1.44187e-06, -1.0, 1.0, -6.20881e-06, 2.27094e-05, -1.0, 1.0, -6.20881e-06, 2.27094e-05, -1.0, 1.0, -6.20881e-06, 2.27094e-05, -1.0, 1.0, 0.0, 1.91575e-06, -1.0, 1.0, 0.0, -5.63197e-07, -1.0, 1.0, 0.0, -1.6542e-06, -1.0, 1.0, 0.0, -9.36278e-07, -1.0, 1.0, 0.0, -6.44007e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 3.38663e-06, -1.72041e-06, 1.0, 1.0, 3.38663e-06, -1.72041e-06, 1.0, 1.0, 3.38663e-06, -1.72041e-06, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -3.97364e-06, 0.0, 1.0, 1.0, -3.97364e-06, 0.0, 1.0, 1.0, -3.97364e-06, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 4.32393e-08, -1.0, 1.0, 0.0, 2.23535e-07, -1.0, 1.0, 0.0, 6.92172e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 1.03917e-06, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, -1.0, 0.0, -3.72741e-08, 1.0, -1.0, 0.0, -3.789e-09, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, -2.79653e-08, 1.0, -1.0, 0.0, -2.41133e-09, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -5.82076e-07, -5.9139e-08, 1.0, -1.0, -5.82076e-07, -5.9139e-08, 1.0, -1.0, -5.82076e-07, -5.9139e-08, 1.0, -1.0, 0.0, -2.41133e-09, 1.0, -1.0, 0.0, -6.14702e-09, 1.0, -1.0, 0.0, -2.76345e-09, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, -4.32393e-08, 0.0, 1.0, 1.0, -1.99375e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.91479e-07, 0.0, 1.0, 1.0, 1.68421e-06, 0.0, 1.0, 1.0, 1.97912e-06, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 6.64475e-06, 0.0, 1.0, 1.0, -1.42579e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -6.57033e-06, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -2.01861e-06, 0.0, 1.0, 1.0, -2.01861e-06, 0.0, 1.0, 1.0, -2.01861e-06, 0.0, 1.0, 1.0, -1.89245e-06, 0.0, 1.0, 1.0, -4.03404e-07, 0.0, 1.0, 1.0, -1.0255e-06, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(15.748, -7.26772, 14.1732, -8.84252, 14.1732, -7.26772, 15.748, -8.84252, 15.748, 1.0, 14.1732, -0.574803, 14.1732, 1.0, 15.748, -0.574803, -7.28306e-14, -33.6457, -1.5748, 1.0, -4.44089e-14, 1.0, -1.5748, -33.6457, 1.5748, 0.212598, 0.787402, -0.574803, 0.787402, 0.212598, 1.5748, -0.574803, 14.1732, 0.212598, 1.5748, -0.574803, 14.1732, 0.212598, 1.5748, -7.26772, 1.5748, -7.26772, 14.1732, 0.212598, 1.5748, -8.05512, 0.787402, -8.05512, 0.787402, -7.26772, 14.1732, -8.05512, 14.1732, 0.212598, 14.1732, -0.574803, 14.9606, 0.212598, 14.1732, -0.574803, 14.1732, 0.212598, 14.9606, -0.574803, 14.1732, -7.26772, 14.9606, -7.26772, 14.1732, -7.26772, 14.9606, -0.574803, 14.9606, -7.26772, 14.9606, -8.05512, 1.5748, -33.6457, 0.0, 1.0, 1.5748, 1.0, 2.84217e-14, -33.6457, -14.1732, -33.6457, -15.748, 1.0, -14.1732, 1.0, -15.748, -33.6457, -15.748, -0.574803, -14.1732, 1.0, -14.1732, -0.574803, -15.748, 1.0, 1.5748, -7.26772, 0.787402, -8.05512, 0.787402, -7.26772, 1.5748, -8.05512, 14.1732, 0.212598, 1.5748, -0.574803, 1.5748, 0.212598, 0.787402, -0.574803, 0.787402, 0.212598, 14.1732, -8.05512, 14.1732, 0.212598, 14.1732, -0.574803, 14.9606, 0.212598, 14.1732, -0.574803, 14.1732, 0.212598, 14.9606, -0.574803, 14.1732, -7.26772, 14.9606, -7.26772, 14.1732, -7.26772, 14.9606, -0.574803, 14.9606, -7.26772, 14.9606, -8.05512, -9.84252, -33.6457, -8.26772, 1.0, -8.26772, -33.6457, -8.26772, 1.0, -9.84252, -33.6457, -9.84252, 1.0, -1.5748, -8.84252, 0.0, -7.26772, 0.0, -8.84252, 0.0, -7.26772, -1.5748, -8.84252, -1.5748, -7.26772, -1.5748, -0.574803, 0.0, 1.0, 0.0, -0.574803, -1.5748, 1.0, 9.84252, 1.0, 8.26772, -33.6457, 8.26772, 1.0, 9.84252, -33.6457, 8.26772, -12.3858, 1.5748, -13.5669, 1.5748, -12.3858, 8.26772, -13.5669, 14.9606, -7.26772, 14.1732, -8.05512, 14.1732, -7.26772, 14.9606, -8.05512, 14.1732, -7.26772, 14.9606, -0.574803, 14.9606, -7.26772, 14.9606, -0.574803, 14.1732, -0.574803, 14.1732, -0.574803, 14.9606, 0.212598, 14.1732, 0.212598, 14.1732, 0.212598, 1.5748, -8.05512, 1.5748, -7.26772, 14.1732, 0.212598, 1.5748, -8.05512, 0.787402, -8.05512, 1.5748, -7.26772, 0.787402, -7.26772, 1.5748, -0.574803, 14.1732, 0.212598, 1.5748, -7.26772, 1.5748, -0.574803, 14.1732, 0.212598, 1.5748, 0.212598, 0.787402, -0.574803, 0.787402, 0.212598, -1.5748, -33.6457, 0.0, 1.0, 0.0, -33.6457, -1.5748, 1.0, -15.748, -8.84252, -14.1732, -7.26772, -14.1732, -8.84252, -15.748, -7.26772, 1.5748, 1.0, 8.88178e-15, -0.574803, 8.88178e-15, 1.0, 1.5748, -0.574803, 1.5748, -7.26772, 2.84217e-14, -8.84252, 0.0, -7.26772, 2.84217e-14, -8.84252, 1.5748, -7.26772, 1.5748, -8.84252, 8.26772, -2.93701, 1.5748, -4.11811, 1.5748, -2.93701, 1.5748, -4.11811, 8.26772, -2.93701, 8.26772, -4.11811, -8.26772, -4.11811, -1.5748, -2.93701, -1.5748, -4.11811, -1.5748, -2.93701, -8.26772, -4.11811, -8.26772, -2.93701, 1.5748, -7.26772, 0.787402, -8.05512, 0.787402, -7.26772, 1.5748, -8.05512, 14.1732, 0.212598, 1.5748, -0.574803, 14.1732, 0.212598, 1.5748, -7.26772, 1.5748, -0.574803, 14.1732, 0.212598, 1.5748, 0.212598, 0.787402, -0.574803, 0.787402, 0.212598, 14.1732, -8.05512, 14.1732, 0.212598, 14.1732, -0.574803, 14.9606, 0.212598, 14.1732, -0.574803, 14.1732, 0.212598, 14.9606, -0.574803, 14.1732, -7.26772, 14.9606, -7.26772, 14.1732, -7.26772, 14.9606, -0.574803, 14.9606, -7.26772, 14.9606, -8.05512, 8.26772, -21.8346, 1.5748, -23.0157, 1.5748, -21.8346, 8.26772, -23.0157, -14.1732, -12.3858, -14.9606, -4.11811, -14.1732, -4.11811, -14.9606, -12.3858, -15.748, -33.6457, -15.748, -33.6457, -14.9606, -2.93701, -14.9606, -4.11811, -15.748, 1.0, -14.9606, -2.93701, -15.748, -33.6457, -14.1732, -2.93701, -14.1732, 1.0, -14.9606, -13.5669, -14.9606, -21.8346, -14.1732, -21.8346, -14.1732, -13.5669, -14.9606, -23.0157, -14.9606, -31.2835, -14.1732, -31.2835, -14.1732, -23.0157, -14.9606, -32.4646, -14.1732, -33.6457, -14.1732, -32.4646, -14.9606, -7.26772, -14.1732, -0.574803, -14.1732, -7.26772, -14.1732, -0.574803, -14.9606, -7.26772, -14.9606, -0.574803, -14.1732, 0.212598, -14.1732, -7.26772, -14.1732, -0.574803, -14.1732, -8.05512, -1.5748, 0.212598, -14.1732, -8.05512, -14.1732, 0.212598, -1.5748, -0.574803, -1.5748, -7.26772, -1.5748, -8.05512, -0.787402, -0.574803, -0.787402, -7.26772, 0.0, 1.0, -0.787402, -2.93701, -1.5748, 1.0, -0.787402, -2.93701, 0.0, 1.0, -2.84217e-14, -33.6457, -0.787402, -2.93701, -2.84217e-14, -33.6457, -0.787402, -4.11811, -0.787402, -12.3858, -1.5748, -4.11811, -0.787402, -13.5669, -0.787402, -21.8346, -1.5748, -13.5669, -0.787402, -23.0157, -1.5748, -23.0157, -1.5748, -23.0157, -2.84217e-14, -33.6457, -0.787402, -31.2835, -0.787402, -31.2835, -2.84217e-14, -33.6457, -0.787402, -32.4646, -1.5748, -32.4646, -1.5748, -33.6457, -1.5748, -31.2835, -0.787402, -31.2835, -1.5748, -21.8346, -1.5748, -12.3858, -1.5748, -2.93701, -8.26772, -23.0157, -1.5748, -21.8346, -1.5748, -23.0157, -8.26772, -21.8346, 8.26772, -31.2835, 1.5748, -32.4646, 1.5748, -31.2835, 8.26772, -32.4646, -8.26772, -13.5669, -1.5748, -12.3858, -1.5748, -13.5669, -8.26772, -12.3858, -8.26772, -32.4646, -1.5748, -31.2835, -1.5748, -32.4646, -8.26772, -31.2835, -9.84252, -33.6457, -8.26772, -32.4646, -8.26772, -33.6457, -9.05512, -32.4646, -9.05512, -32.4646, -9.84252, -33.6457, -9.05512, -31.2835, -9.05512, -31.2835, -9.84252, -33.6457, -9.05512, -23.0157, -9.05512, -21.8346, -9.05512, -21.8346, -9.84252, -33.6457, -9.05512, -13.5669, -9.05512, -13.5669, -9.84252, -33.6457, -9.05512, -12.3858, -9.05512, -4.11811, -9.05512, -4.11811, -9.84252, -33.6457, -9.05512, -2.93701, -9.84252, 1.0, -9.05512, -2.93701, -9.84252, -33.6457, -8.26772, 1.0, -9.05512, -2.93701, -9.84252, 1.0, -8.26772, -2.93701, -8.26772, -4.11811, -8.26772, -12.3858, -8.26772, -13.5669, -9.05512, -21.8346, -9.05512, -13.5669, -8.26772, -21.8346, -8.26772, -23.0157, -8.26772, -31.2835, -1.5748, -13.5669, -14.1732, -12.3858, -1.5748, -12.3858, -14.1732, -13.5669, -1.5748, -23.0157, -14.1732, -21.8346, -1.5748, -21.8346, -14.1732, -21.8346, -1.5748, -23.0157, -14.1732, -23.0157, -14.9606, -7.26772, -14.1732, -0.574803, -14.1732, -7.26772, -14.1732, -0.574803, -14.9606, -7.26772, -14.9606, -0.574803, -14.1732, 0.212598, -14.1732, -7.26772, -14.1732, -0.574803, -14.1732, -8.05512, -1.5748, 0.212598, -14.1732, -8.05512, -14.1732, 0.212598, -1.5748, -0.574803, -14.1732, -8.05512, -1.5748, 0.212598, -1.5748, -7.26772, -14.1732, -8.05512, -1.5748, -0.574803, -1.5748, -8.05512, -0.787402, -0.574803, -0.787402, -7.26772, -1.5748, -32.4646, -14.1732, -31.2835, -1.5748, -31.2835, -14.1732, -32.4646, -1.5748, -4.11811, -14.1732, -2.93701, -1.5748, -2.93701, -14.1732, -4.11811, 1.5748, -12.3858, 0.787402, -4.11811, 1.5748, -4.11811, 0.787402, -12.3858, 0.0, -33.6457, 0.787402, -2.93701, 0.0, 1.0, 1.5748, -2.93701, 1.5748, 1.0, 0.787402, -13.5669, 0.787402, -21.8346, 1.5748, -21.8346, 1.5748, -13.5669, 0.787402, -23.0157, 0.787402, -31.2835, 1.5748, -31.2835, 1.5748, -23.0157, 0.787402, -32.4646, 1.5748, -33.6457, 1.5748, -32.4646, 9.84252, 1.0, 8.26772, -2.93701, 8.26772, 1.0, 9.05512, -2.93701, 9.05512, -2.93701, 9.84252, 1.0, 9.05512, -4.11811, 9.05512, -4.11811, 9.84252, 1.0, 9.05512, -12.3858, 9.05512, -12.3858, 9.84252, 1.0, 9.05512, -13.5669, 9.05512, -13.5669, 9.84252, 1.0, 9.05512, -21.8346, 9.05512, -21.8346, 9.84252, 1.0, 9.05512, -23.0157, 9.05512, -23.0157, 9.84252, 1.0, 9.05512, -31.2835, 9.05512, -32.4646, 9.84252, -33.6457, 8.26772, -33.6457, 8.26772, -32.4646, 8.26772, -31.2835, 8.26772, -23.0157, 8.26772, -21.8346, 9.05512, -13.5669, 9.05512, -21.8346, 8.26772, -13.5669, 8.26772, -12.3858, 9.05512, -4.11811, 9.05512, -12.3858, 8.26772, -4.11811, 14.1732, -23.0157, 1.5748, -21.8346, 14.1732, -21.8346, 1.5748, -21.8346, 14.1732, -23.0157, 1.5748, -23.0157, 1.2216e-15, -33.6457, -0.787402, -32.4646, 1.2216e-15, 1.0, -0.787402, -32.4646, 1.2216e-15, -33.6457, -1.5748, -33.6457, -1.5748, -32.4646, -0.787402, -2.93701, 1.2216e-15, 1.0, -0.787402, -32.4646, 1.2216e-15, 1.0, -0.787402, -2.93701, -1.5748, 1.0, -0.787402, -2.93701, -0.787402, -32.4646, -0.787402, -31.2835, -0.787402, -23.0157, -1.5748, -31.2835, -0.787402, -23.0157, -0.787402, -31.2835, -1.5748, -23.0157, -0.787402, -21.8346, -0.787402, -13.5669, -1.5748, -21.8346, -0.787402, -13.5669, -0.787402, -21.8346, -1.5748, -13.5669, -0.787402, -12.3858, -0.787402, -4.11811, -1.5748, -12.3858, -0.787402, -4.11811, -0.787402, -12.3858, -1.5748, -4.11811, -1.5748, -2.93701, 14.1732, -32.4646, 1.5748, -31.2835, 14.1732, -31.2835, 1.5748, -32.4646, 14.1732, -13.5669, 1.5748, -12.3858, 14.1732, -12.3858, 1.5748, -13.5669, 14.1732, -4.11811, 1.5748, -2.93701, 14.1732, -2.93701, 1.5748, -4.11811, 0.0, 1.0, 0.787402, -2.93701, 0.0, -33.6457, 1.5748, 1.0, 1.5748, -2.93701, 0.787402, -32.4646, 1.5748, -33.6457, 0.787402, -32.4646, 0.787402, -2.93701, 0.787402, -4.11811, 0.787402, -12.3858, 1.5748, -4.11811, 0.787402, -12.3858, 0.787402, -4.11811, 1.5748, -12.3858, 0.787402, -13.5669, 0.787402, -21.8346, 1.5748, -13.5669, 0.787402, -21.8346, 0.787402, -13.5669, 1.5748, -21.8346, 0.787402, -23.0157, 0.787402, -31.2835, 1.5748, -23.0157, 0.787402, -31.2835, 0.787402, -23.0157, 1.5748, -31.2835, 1.5748, -32.4646, -14.9606, -7.26772, -14.1732, -0.574803, -14.1732, -7.26772, -14.1732, -0.574803, -14.9606, -7.26772, -14.9606, -0.574803, -14.1732, 0.212598, -14.1732, -7.26772, -14.1732, -0.574803, -14.1732, -8.05512, -1.5748, 0.212598, -14.1732, -8.05512, -14.1732, 0.212598, -1.5748, -0.574803, -1.5748, -7.26772, -1.5748, -8.05512, -0.787402, -0.574803, -0.787402, -7.26772, -14.9606, -7.26772, -14.1732, -0.574803, -14.1732, -7.26772, -14.1732, -0.574803, -14.9606, -7.26772, -14.9606, -0.574803, -14.1732, 0.212598, -14.1732, -7.26772, -14.1732, -0.574803, -14.1732, -8.05512, -1.5748, 0.212598, -14.1732, -8.05512, -14.1732, 0.212598, -1.5748, -0.574803, -14.1732, -8.05512, -1.5748, 0.212598, -1.5748, -7.26772, -14.1732, -8.05512, -1.5748, -0.574803, -1.5748, -8.05512, -0.787402, -0.574803, -0.787402, -7.26772, 15.748, 1.0, 14.9606, -2.93701, 14.1732, 1.0, 15.748, -33.6457, 14.9606, -4.11811, 14.9606, -12.3858, 14.1732, -4.11811, 14.9606, -13.5669, 14.9606, -21.8346, 14.1732, -13.5669, 14.9606, -23.0157, 14.1732, -23.0157, 14.1732, -23.0157, 15.748, -33.6457, 14.9606, -31.2835, 14.9606, -31.2835, 15.748, -33.6457, 14.9606, -32.4646, 14.1732, -32.4646, 14.1732, -33.6457, 14.1732, -31.2835, 14.9606, -31.2835, 14.1732, -21.8346, 14.1732, -12.3858, 14.1732, -2.93701, 1.5748, 1.0, -1.77636e-14, -33.6457, -1.77636e-14, 1.0, 1.5748, -33.6457, 15.748, -33.6457, 14.1732, 1.0, 15.748, 1.0, 14.1732, -33.6457),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4, 8, 10, 9, 9, 11, 8, 12, 14, 13, 13, 15, 12, 16, 12, 15, 17, 19, 18, 20, 22, 21, 23, 22, 20, 20, 24, 23, 15, 13, 24, 24, 20, 15, 22, 25, 21, 25, 27, 26, 28, 30, 29, 29, 31, 28, 31, 29, 32, 25, 32, 27, 33, 32, 25, 34, 36, 35, 25, 37, 33, 38, 40, 39, 39, 41, 38, 42, 44, 43, 43, 45, 42, 46, 48, 47, 47, 49, 46, 50, 52, 51, 51, 53, 50, 50, 53, 54, 55, 50, 54, 52, 50, 55, 54, 56, 55, 57, 55, 56, 55, 57, 52, 56, 58, 57, 53, 59, 54, 59, 61, 60, 62, 64, 63, 63, 65, 62, 65, 63, 66, 59, 66, 61, 67, 66, 59, 68, 70, 69, 59, 71, 67, 72, 74, 73, 75, 77, 76, 78, 80, 79, 81, 83, 82, 84, 86, 85, 85, 87, 84, 88, 90, 89, 89, 91, 88, 92, 94, 93, 93, 95, 92, 96, 98, 97, 97, 99, 96, 100, 102, 101, 103, 104, 98, 97, 98, 105, 104, 103, 106, 106, 107, 104, 97, 105, 108, 109, 97, 107, 110, 112, 111, 113, 109, 114, 114, 115, 113, 116, 118, 117, 115, 114, 119, 120, 121, 119, 122, 119, 121, 119, 122, 115, 121, 123, 122, 124, 126, 125, 125, 127, 124, 128, 130, 129, 129, 131, 128, 132, 134, 133, 133, 135, 132, 136, 138, 137, 139, 141, 140, 142, 144, 143, 145, 147, 146, 148, 150, 149, 151, 153, 152, 154, 156, 155, 155, 157, 154, 154, 157, 158, 159, 161, 160, 156, 154, 162, 163, 164, 162, 165, 162, 164, 162, 165, 156, 164, 166, 165, 157, 167, 158, 167, 169, 168, 170, 172, 171, 171, 173, 170, 173, 171, 174, 167, 174, 169, 175, 174, 167, 176, 178, 177, 167, 179, 175, 180, 182, 181, 181, 183, 180, 184, 186, 185, 187, 184, 185, 188, 187, 185, 189, 191, 190, 192, 194, 193, 192, 193, 195, 195, 196, 192, 188, 197, 187, 188, 198, 197, 198, 199, 197, 199, 200, 197, 188, 201, 198, 188, 202, 201, 202, 203, 201, 203, 204, 201, 188, 205, 202, 188, 206, 205, 206, 207, 205, 208, 210, 209, 211, 213, 212, 214, 216, 215, 214, 215, 217, 218, 220, 219, 221, 218, 219, 222, 221, 219, 219, 223, 222, 224, 221, 222, 222, 225, 224, 226, 228, 227, 229, 231, 230, 232, 234, 233, 234, 235, 233, 234, 236, 235, 235, 237, 233, 237, 238, 233, 237, 239, 238, 238, 240, 233, 240, 241, 233, 242, 244, 243, 245, 247, 246, 247, 248, 246, 248, 249, 246, 250, 251, 241, 252, 238, 239, 253, 235, 236, 254, 227, 228, 255, 257, 256, 256, 258, 255, 259, 261, 260, 260, 262, 259, 263, 265, 264, 264, 266, 263, 267, 269, 268, 268, 270, 267, 271, 273, 272, 272, 274, 271, 275, 277, 276, 278, 280, 279, 280, 281, 279, 282, 284, 283, 285, 287, 286, 287, 288, 286, 289, 291, 290, 292, 294, 293, 295, 297, 296, 296, 298, 295, 299, 288, 287, 287, 300, 299, 301, 303, 302, 302, 304, 301, 305, 280, 278, 278, 306, 305, 307, 309, 308, 308, 310, 307, 311, 313, 312, 314, 316, 315, 317, 319, 318, 320, 322, 321, 323, 325, 324, 323, 324, 326, 327, 329, 328, 330, 332, 331, 333, 335, 334, 334, 336, 333, 337, 335, 333, 333, 338, 337, 339, 341, 340, 340, 342, 339, 343, 345, 344, 344, 346, 343, 347, 349, 348, 350, 347, 348, 351, 350, 348, 351, 348, 352, 353, 351, 352, 353, 352, 354, 354, 355, 353, 351, 356, 350, 351, 357, 356, 357, 358, 356, 358, 359, 356, 351, 360, 357, 351, 361, 360, 361, 362, 360, 362, 363, 360, 351, 364, 361, 351, 365, 364, 365, 366, 364, 367, 369, 368, 368, 370, 367, 371, 373, 372, 374, 376, 375, 377, 379, 378, 380, 382, 381, 383, 385, 384, 386, 388, 387, 388, 389, 387, 390, 387, 389, 391, 390, 389, 389, 392, 391, 393, 388, 386, 386, 394, 393, 395, 397, 396, 396, 398, 395, 399, 401, 400, 400, 402, 399, 403, 405, 404, 406, 408, 407, 409, 411, 410, 412, 414, 413, 412, 415, 414, 416, 418, 417, 419, 421, 420, 422, 424, 423, 422, 425, 424, 426, 428, 427, 427, 429, 426, 422, 430, 425, 422, 431, 430, 432, 434, 433, 433, 435, 432, 422, 436, 431, 422, 437, 436, 438, 440, 439, 439, 441, 438, 421, 442, 420, 443, 445, 444, 444, 446, 443, 447, 449, 448, 448, 450, 447, 451, 453, 452, 452, 454, 451, 455, 457, 456, 456, 458, 455, 456, 459, 458, 460, 456, 457, 457, 461, 460, 462, 464, 463, 462, 465, 464, 466, 468, 467, 467, 469, 466, 462, 470, 465, 462, 471, 470, 472, 474, 473, 473, 475, 472, 462, 476, 471, 462, 477, 476, 478, 480, 479, 479, 481, 478, 461, 482, 460, 483, 485, 484, 486, 488, 487, 489, 491, 490, 489, 490, 492, 493, 495, 494, 496, 493, 494, 497, 496, 494, 494, 498, 497, 499, 496, 497, 497, 500, 499, 501, 503, 502, 504, 506, 505, 507, 509, 508, 507, 508, 510, 511, 513, 512, 514, 516, 515, 517, 519, 518, 518, 520, 517, 521, 519, 517, 517, 522, 521, 523, 525, 524, 524, 526, 523, 524, 527, 526, 527, 528, 526, 527, 529, 528, 528, 530, 526, 530, 531, 526, 530, 532, 531, 531, 533, 526, 533, 534, 526, 535, 537, 536, 538, 540, 539, 540, 541, 539, 541, 542, 539, 543, 544, 534, 545, 531, 532, 546, 528, 529, 547, 524, 525, 548, 550, 549, 549, 551, 548, 552, 554, 553, 553, 555, 552)
	],
	"morph_arrays":[]
}

[sub_resource id=4 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.6079999804496765, 0.29781273007392883,
		0.28515201807022095, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=5 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(4)

[sub_resource id=6 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.9725490212440491, 1.0, 1.0, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=7 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(6)

[sub_resource id=8 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.18195976316928864, 0.8207547068595886,
		0.5758285522460938, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=9 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(8)

[sub_resource id=10 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.7406105399131775, 0.8228667378425598,
		0.8396226167678833, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=11 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(10)

[sub_resource id=12 type="ArrayMesh"]

resource_name = "Mesh books"
surfaces/0 = {
	"material":SubResource(5),
	"primitive":4,
	"arrays":[
		Vector3Array(0.0488952, 0.0977904, -0.0126, 0.0244476, 0.103902, -0.0945, 0.0244476, 0.103902, -0.0126, 0.0488952, 0.0977904, -0.0945, 0.150448, 0.0, -0.0945, 0.0496476, 0.0, -0.0063, 0.0496476, 0.0, -0.0945, 0.0748476, 0.0, -0.0189, 0.100048, 0.0, -0.0189, 0.100048, 0.0, -0.0063, 0.125248, 0.0, -0.0063, 0.125248, 0.0, 0.0, 0.150448, 0.0, 0.0, 0.0748476, 0.0, -0.0063, 0.0, 0.0061119, -0.0945, 0.0488952, 0.0977904, -0.0945, 0.0244476, 0.0, -0.0945, 0.0244476, 0.103902, -0.0945, 0.125248, 0.0945, -0.0063, 0.125248, 0.0, 0.0, 0.125248, 0.0945, 0.0, 0.125248, 0.0, -0.0063, 0.0244476, 0.0, -0.0945, 0.0, 0.0061119, -0.0126, 0.0, 0.0061119, -0.0945, 0.0244476, 0.0, -0.0126, 0.0488952, 0.0977904, -0.0126, 0.0, 0.0061119, -0.0126, 0.0244476, 0.0, -0.0126, 0.0244476, 0.103902, -0.0126, 0.150448, 0.0, -0.0945, 0.150448, 0.0945, 0.0, 0.150448, 0.0, 0.0, 0.150448, 0.0945, -0.0945, 0.150448, 0.0945, 0.0, 0.125248, 0.0945, -0.0063, 0.125248, 0.0945, 0.0, 0.125248, 0.0945, -0.0945, 0.150448, 0.0945, -0.0945, 0.0244476, 0.103902, -0.0945, 0.0, 0.0061119, -0.0126, 0.0244476, 0.103902, -0.0126, 0.0, 0.0061119, -0.0945, 0.0496476, 0.1008, -0.0945, 0.150448, 0.0, -0.0945, 0.0496476, 0.0, -0.0945, 0.0748476, 0.0882, -0.0945, 0.0748476, 0.1008, -0.0945, 0.100048, 0.0882, -0.0945, 0.150448, 0.0945, -0.0945, 0.125248, 0.0945, -0.0945, 0.100048, 0.1008, -0.0945, 0.125248, 0.1008, -0.0945, 0.150448, 0.0945, 0.0, 0.125248, 0.0, 0.0, 0.150448, 0.0, 0.0, 0.125248, 0.0945, 0.0, 0.0244476, 0.0, -0.0945, 0.0488952, 0.0977904, -0.0126, 0.0244476, 0.0, -0.0126, 0.0488952, 0.0977904, -0.0945),
		Vector3Array(0.242535, 0.970143, 0.0, 0.242535, 0.970143, 0.0, 0.242535, 0.970143, 0.0, 0.242535, 0.970143, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -0.242536, -0.970143, 0.0, -0.242536, -0.970143, 0.0, -0.242536, -0.970142, 0.0, -0.242536, -0.970142, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -0.970143, 0.242536, 0.0, -0.970143, 0.242536, 0.0, -0.970142, 0.242536, 0.0, -0.970142, 0.242536, 0.0, 0.0, 2.25299e-07, -1.0, 0.0, 5.37586e-08, -1.0, 0.0, 0.0, -1.0, 0.0, 6.40259e-07, -1.0, 0.0, 0.0, -1.0, 0.0, -7.50794e-08, -1.0, 0.0, -2.32205e-07, -1.0, 0.0, -1.80293e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.970143, -0.242536, 0.0, 0.970143, -0.242536, 0.0, 0.970142, -0.242536, 0.0, 0.970142, -0.242536, 0.0),
		FloatArray(0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 2.32196e-09, 1.0, -1.0, 0.0, -1.61373e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, -5.94408e-08, 1.0, -1.0, 0.0, 8.07426e-08, 1.0, -1.0, 0.0, 4.92451e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -5.80954e-09, 0.0, 1.0, -1.0, -3.1441e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -3.72506e-08, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 5.2528e-08, 2.82383e-15, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 4.49035e-08, -3.37133e-15, 1.0, -1.0, 1.46353e-07, -3.3984e-14, 1.0, -1.0, 1.93651e-09, -3.4914e-15, 1.0, -1.0, 1.57205e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.496063, 1.93377, 3.72047, 0.94164, 0.496063, 0.94164, 3.72047, 1.93377, -5.92313, -2.72047, -1.95463, 0.751969, -1.95463, -2.72047, -2.94676, 0.255906, -3.93888, 0.255906, -3.93888, 0.751969, -4.93101, 0.751969, -4.93101, 1.0, -5.92313, 1.0, -2.94676, 0.751969, 0.0, 0.759374, -1.92501, -2.85001, -0.962504, 1.0, -0.962504, -3.09064, -0.248031, -2.72047, 0.0, 1.0, 0.0, -2.72047, -0.248031, 1.0, -3.72047, 1.93377, -0.496063, 0.94164, -3.72047, 0.94164, -0.496063, 1.93377, 1.92501, -2.85001, 0.0, 0.759374, 0.962504, 1.0, 0.962504, -3.09064, 3.72047, 1.0, 0.0, -2.72047, 0.0, 1.0, 3.72047, -2.72047, 5.92313, 1.0, 4.93101, 0.751969, 4.93101, 1.0, 4.93101, -2.72047, 5.92313, -2.72047, -3.72047, -3.20195, -0.496063, 0.766559, -0.496063, -3.20195, -3.72047, 0.766559, -1.95463, -2.9685, -5.92313, 1.0, -1.95463, 1.0, -2.94676, -2.47244, -2.94676, -2.9685, -3.93888, -2.47244, -5.92313, -2.72047, -4.93101, -2.72047, -3.93888, -2.9685, -4.93101, -2.9685, 5.92313, -2.72047, 4.93101, 1.0, 5.92313, 1.0, 4.93101, -2.72047, 3.72047, 0.766559, 0.496063, -3.20195, 0.496063, 0.766559, 3.72047, -3.20195),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4, 7, 8, 4, 8, 9, 4, 9, 10, 4, 10, 11, 4, 11, 12, 4, 13, 7, 5, 14, 16, 15, 15, 17, 14, 18, 20, 19, 19, 21, 18, 22, 24, 23, 23, 25, 22, 26, 28, 27, 27, 29, 26, 30, 32, 31, 31, 33, 30, 34, 36, 35, 35, 37, 34, 37, 38, 34, 39, 41, 40, 40, 42, 39, 43, 45, 44, 44, 46, 43, 46, 47, 43, 48, 46, 44, 44, 49, 48, 49, 50, 48, 51, 48, 50, 50, 52, 51, 53, 55, 54, 54, 56, 53, 57, 59, 58, 58, 60, 57)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(7),
	"primitive":4,
	"arrays":[
		Vector3Array(0.100048, 0.0882, -0.0189, 0.0748476, 0.0, -0.0189, 0.100048, 0.0, -0.0189, 0.0748476, 0.0882, -0.0189, 0.100048, 0.0882, -0.0189, 0.0748476, 0.0882, -0.0945, 0.0748476, 0.0882, -0.0189, 0.100048, 0.0882, -0.0945),
		Vector3Array(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(3.93888, -2.47244, 2.94676, 1.0, 3.93888, 1.0, 2.94676, -2.47244, 3.93888, 0.255906, 2.94676, -2.72047, 2.94676, 0.255906, 3.93888, -2.72047),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4)
	],
	"morph_arrays":[]
}
surfaces/2 = {
	"material":SubResource(9),
	"primitive":4,
	"arrays":[
		Vector3Array(0.100048, 0.1008, -0.0063, 0.100048, 0.0882, -0.0189, 0.100048, 0.0, -0.0063, 0.100048, 0.1008, -0.0945, 0.100048, 0.0882, -0.0945, 0.100048, 0.0, -0.0189, 0.125248, 0.0945, -0.0063, 0.100048, 0.0, -0.0063, 0.125248, 0.0, -0.0063, 0.100048, 0.1008, -0.0063, 0.125248, 0.1008, -0.0063, 0.125248, 0.1008, -0.0063, 0.100048, 0.1008, -0.0945, 0.100048, 0.1008, -0.0063, 0.125248, 0.1008, -0.0945, 0.125248, 0.0945, -0.0945, 0.125248, 0.1008, -0.0063, 0.125248, 0.0945, -0.0063, 0.125248, 0.1008, -0.0945),
		Vector3Array(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0),
		FloatArray(0.0, -1.11752e-07, 1.0, 1.0, 0.0, -1.05022e-07, 1.0, 1.0, 0.0, -2.019e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-0.248031, -2.9685, -0.744094, -2.47244, -0.248031, 1.0, -3.72047, -2.9685, -3.72047, -2.47244, -0.744094, 1.0, 4.93101, -2.72047, 3.93888, 1.0, 4.93101, 1.0, 3.93888, -2.9685, 4.93101, -2.9685, 4.93101, 0.751969, 3.93888, -2.72047, 3.93888, 0.751969, 4.93101, -2.72047, 3.72047, -2.72047, 0.248031, -2.9685, 0.248031, -2.72047, 3.72047, -2.9685),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 1, 4, 3, 5, 1, 2, 6, 8, 7, 7, 9, 6, 9, 10, 6, 11, 13, 12, 12, 14, 11, 15, 17, 16, 16, 18, 15)
	],
	"morph_arrays":[]
}
surfaces/3 = {
	"material":SubResource(11),
	"primitive":4,
	"arrays":[
		Vector3Array(0.0748476, 0.0, -0.0189, 0.0748476, 0.1008, -0.0063, 0.0748476, 0.0, -0.0063, 0.0748476, 0.0882, -0.0189, 0.0748476, 0.1008, -0.0945, 0.0748476, 0.0882, -0.0945, 0.0496476, 0.1008, -0.0945, 0.0496476, 0.0, -0.0063, 0.0496476, 0.1008, -0.0063, 0.0496476, 0.0, -0.0945, 0.0748476, 0.1008, -0.0063, 0.0496476, 0.0, -0.0063, 0.0748476, 0.0, -0.0063, 0.0496476, 0.1008, -0.0063, 0.0748476, 0.1008, -0.0063, 0.0496476, 0.1008, -0.0945, 0.0496476, 0.1008, -0.0063, 0.0748476, 0.1008, -0.0945),
		Vector3Array(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0),
		FloatArray(0.0, 2.02219e-08, -1.0, 1.0, 0.0, 1.07494e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 1.27716e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.744094, 1.0, 0.248031, -2.9685, 0.248031, 1.0, 0.744094, -2.47244, 3.72047, -2.9685, 3.72047, -2.47244, -3.72047, -2.9685, -0.248031, 1.0, -0.248031, -2.9685, -3.72047, 1.0, 2.94676, -2.9685, 1.95463, 1.0, 2.94676, 1.0, 1.95463, -2.9685, 2.94676, 0.751969, 1.95463, -2.72047, 1.95463, 0.751969, 2.94676, -2.72047),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 1, 4, 3, 4, 5, 3, 6, 8, 7, 7, 9, 6, 10, 12, 11, 11, 13, 10, 14, 16, 15, 15, 17, 14)
	],
	"morph_arrays":[]
}

[sub_resource id=13 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.6079999804496765, 0.29781273007392883,
		0.28515201807022095, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=14 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(13)

[sub_resource id=15 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.9725490212440491, 1.0, 1.0, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=16 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(15)

[sub_resource id=17 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.18195976316928864, 0.8207547068595886,
		0.5758285522460938, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=18 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(17)

[sub_resource id=19 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.7406105399131775, 0.8228667378425598,
		0.8396226167678833, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=20 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(19)

[sub_resource id=21 type="ArrayMesh"]

resource_name = "Mesh books001"
surfaces/0 = {
	"material":SubResource(14),
	"primitive":4,
	"arrays":[
		Vector3Array(0.0488952, 0.0977904, -0.0126, 0.0244476, 0.103902, -0.0945, 0.0244476, 0.103902, -0.0126, 0.0488952, 0.0977904, -0.0945, 0.150448, 0.0, -0.0945, 0.0496476, 0.0, -0.0063, 0.0496476, 0.0, -0.0945, 0.0748476, 0.0, -0.0189, 0.100048, 0.0, -0.0189, 0.100048, 0.0, -0.0063, 0.125248, 0.0, -0.0063, 0.125248, 0.0, 0.0, 0.150448, 0.0, 0.0, 0.0748476, 0.0, -0.0063, 0.0, 0.0061119, -0.0945, 0.0488952, 0.0977904, -0.0945, 0.0244476, 0.0, -0.0945, 0.0244476, 0.103902, -0.0945, 0.125248, 0.0945, -0.0063, 0.125248, 0.0, 0.0, 0.125248, 0.0945, 0.0, 0.125248, 0.0, -0.0063, 0.0244476, 0.0, -0.0945, 0.0, 0.0061119, -0.0126, 0.0, 0.0061119, -0.0945, 0.0244476, 0.0, -0.0126, 0.0488952, 0.0977904, -0.0126, 0.0, 0.0061119, -0.0126, 0.0244476, 0.0, -0.0126, 0.0244476, 0.103902, -0.0126, 0.150448, 0.0, -0.0945, 0.150448, 0.0945, 0.0, 0.150448, 0.0, 0.0, 0.150448, 0.0945, -0.0945, 0.150448, 0.0945, 0.0, 0.125248, 0.0945, -0.0063, 0.125248, 0.0945, 0.0, 0.125248, 0.0945, -0.0945, 0.150448, 0.0945, -0.0945, 0.0244476, 0.103902, -0.0945, 0.0, 0.0061119, -0.0126, 0.0244476, 0.103902, -0.0126, 0.0, 0.0061119, -0.0945, 0.0496476, 0.1008, -0.0945, 0.150448, 0.0, -0.0945, 0.0496476, 0.0, -0.0945, 0.0748476, 0.0882, -0.0945, 0.0748476, 0.1008, -0.0945, 0.100048, 0.0882, -0.0945, 0.150448, 0.0945, -0.0945, 0.125248, 0.0945, -0.0945, 0.100048, 0.1008, -0.0945, 0.125248, 0.1008, -0.0945, 0.150448, 0.0945, 0.0, 0.125248, 0.0, 0.0, 0.150448, 0.0, 0.0, 0.125248, 0.0945, 0.0, 0.0244476, 0.0, -0.0945, 0.0488952, 0.0977904, -0.0126, 0.0244476, 0.0, -0.0126, 0.0488952, 0.0977904, -0.0945),
		Vector3Array(0.242535, 0.970143, 0.0, 0.242535, 0.970143, 0.0, 0.242535, 0.970143, 0.0, 0.242535, 0.970143, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -0.242536, -0.970143, 0.0, -0.242536, -0.970143, 0.0, -0.242536, -0.970142, 0.0, -0.242536, -0.970142, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -0.970143, 0.242536, 0.0, -0.970143, 0.242536, 0.0, -0.970142, 0.242536, 0.0, -0.970142, 0.242536, 0.0, 0.0, 2.25299e-07, -1.0, 0.0, 5.37586e-08, -1.0, 0.0, 0.0, -1.0, 0.0, 6.40259e-07, -1.0, 0.0, 0.0, -1.0, 0.0, -7.50794e-08, -1.0, 0.0, -2.32205e-07, -1.0, 0.0, -1.80293e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.970143, -0.242536, 0.0, 0.970143, -0.242536, 0.0, 0.970142, -0.242536, 0.0, 0.970142, -0.242536, 0.0),
		FloatArray(0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 2.32196e-09, 1.0, -1.0, 0.0, -1.61373e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, -5.94408e-08, 1.0, -1.0, 0.0, 8.07426e-08, 1.0, -1.0, 0.0, 4.92451e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -5.80954e-09, 0.0, 1.0, -1.0, -3.1441e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -3.72506e-08, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 5.2528e-08, 2.82383e-15, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 4.49035e-08, -3.37133e-15, 1.0, -1.0, 1.46353e-07, -3.3984e-14, 1.0, -1.0, 1.93651e-09, -3.4914e-15, 1.0, -1.0, 1.57205e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.496063, 1.93377, 3.72047, 0.94164, 0.496063, 0.94164, 3.72047, 1.93377, -5.92313, -2.72047, -1.95463, 0.751969, -1.95463, -2.72047, -2.94676, 0.255906, -3.93888, 0.255906, -3.93888, 0.751969, -4.93101, 0.751969, -4.93101, 1.0, -5.92313, 1.0, -2.94676, 0.751969, 0.0, 0.759374, -1.92501, -2.85001, -0.962504, 1.0, -0.962504, -3.09064, -0.248031, -2.72047, 0.0, 1.0, 0.0, -2.72047, -0.248031, 1.0, -3.72047, 1.93377, -0.496063, 0.94164, -3.72047, 0.94164, -0.496063, 1.93377, 1.92501, -2.85001, 0.0, 0.759374, 0.962504, 1.0, 0.962504, -3.09064, 3.72047, 1.0, 0.0, -2.72047, 0.0, 1.0, 3.72047, -2.72047, 5.92313, 1.0, 4.93101, 0.751969, 4.93101, 1.0, 4.93101, -2.72047, 5.92313, -2.72047, -3.72047, -3.20195, -0.496063, 0.766559, -0.496063, -3.20195, -3.72047, 0.766559, -1.95463, -2.9685, -5.92313, 1.0, -1.95463, 1.0, -2.94676, -2.47244, -2.94676, -2.9685, -3.93888, -2.47244, -5.92313, -2.72047, -4.93101, -2.72047, -3.93888, -2.9685, -4.93101, -2.9685, 5.92313, -2.72047, 4.93101, 1.0, 5.92313, 1.0, 4.93101, -2.72047, 3.72047, 0.766559, 0.496063, -3.20195, 0.496063, 0.766559, 3.72047, -3.20195),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4, 7, 8, 4, 8, 9, 4, 9, 10, 4, 10, 11, 4, 11, 12, 4, 13, 7, 5, 14, 16, 15, 15, 17, 14, 18, 20, 19, 19, 21, 18, 22, 24, 23, 23, 25, 22, 26, 28, 27, 27, 29, 26, 30, 32, 31, 31, 33, 30, 34, 36, 35, 35, 37, 34, 37, 38, 34, 39, 41, 40, 40, 42, 39, 43, 45, 44, 44, 46, 43, 46, 47, 43, 48, 46, 44, 44, 49, 48, 49, 50, 48, 51, 48, 50, 50, 52, 51, 53, 55, 54, 54, 56, 53, 57, 59, 58, 58, 60, 57)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(16),
	"primitive":4,
	"arrays":[
		Vector3Array(0.100048, 0.0882, -0.0189, 0.0748476, 0.0, -0.0189, 0.100048, 0.0, -0.0189, 0.0748476, 0.0882, -0.0189, 0.100048, 0.0882, -0.0189, 0.0748476, 0.0882, -0.0945, 0.0748476, 0.0882, -0.0189, 0.100048, 0.0882, -0.0945),
		Vector3Array(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(3.93888, -2.47244, 2.94676, 1.0, 3.93888, 1.0, 2.94676, -2.47244, 3.93888, 0.255906, 2.94676, -2.72047, 2.94676, 0.255906, 3.93888, -2.72047),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4)
	],
	"morph_arrays":[]
}
surfaces/2 = {
	"material":SubResource(18),
	"primitive":4,
	"arrays":[
		Vector3Array(0.100048, 0.1008, -0.0063, 0.100048, 0.0882, -0.0189, 0.100048, 0.0, -0.0063, 0.100048, 0.1008, -0.0945, 0.100048, 0.0882, -0.0945, 0.100048, 0.0, -0.0189, 0.125248, 0.0945, -0.0063, 0.100048, 0.0, -0.0063, 0.125248, 0.0, -0.0063, 0.100048, 0.1008, -0.0063, 0.125248, 0.1008, -0.0063, 0.125248, 0.1008, -0.0063, 0.100048, 0.1008, -0.0945, 0.100048, 0.1008, -0.0063, 0.125248, 0.1008, -0.0945, 0.125248, 0.0945, -0.0945, 0.125248, 0.1008, -0.0063, 0.125248, 0.0945, -0.0063, 0.125248, 0.1008, -0.0945),
		Vector3Array(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0),
		FloatArray(0.0, -1.11752e-07, 1.0, 1.0, 0.0, -1.05022e-07, 1.0, 1.0, 0.0, -2.019e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-0.248031, -2.9685, -0.744094, -2.47244, -0.248031, 1.0, -3.72047, -2.9685, -3.72047, -2.47244, -0.744094, 1.0, 4.93101, -2.72047, 3.93888, 1.0, 4.93101, 1.0, 3.93888, -2.9685, 4.93101, -2.9685, 4.93101, 0.751969, 3.93888, -2.72047, 3.93888, 0.751969, 4.93101, -2.72047, 3.72047, -2.72047, 0.248031, -2.9685, 0.248031, -2.72047, 3.72047, -2.9685),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 1, 4, 3, 5, 1, 2, 6, 8, 7, 7, 9, 6, 9, 10, 6, 11, 13, 12, 12, 14, 11, 15, 17, 16, 16, 18, 15)
	],
	"morph_arrays":[]
}
surfaces/3 = {
	"material":SubResource(20),
	"primitive":4,
	"arrays":[
		Vector3Array(0.0748476, 0.0, -0.0189, 0.0748476, 0.1008, -0.0063, 0.0748476, 0.0, -0.0063, 0.0748476, 0.0882, -0.0189, 0.0748476, 0.1008, -0.0945, 0.0748476, 0.0882, -0.0945, 0.0496476, 0.1008, -0.0945, 0.0496476, 0.0, -0.0063, 0.0496476, 0.1008, -0.0063, 0.0496476, 0.0, -0.0945, 0.0748476, 0.1008, -0.0063, 0.0496476, 0.0, -0.0063, 0.0748476, 0.0, -0.0063, 0.0496476, 0.1008, -0.0063, 0.0748476, 0.1008, -0.0063, 0.0496476, 0.1008, -0.0945, 0.0496476, 0.1008, -0.0063, 0.0748476, 0.1008, -0.0945),
		Vector3Array(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0),
		FloatArray(0.0, 2.02219e-08, -1.0, 1.0, 0.0, 1.07494e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 1.27716e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.744094, 1.0, 0.248031, -2.9685, 0.248031, 1.0, 0.744094, -2.47244, 3.72047, -2.9685, 3.72047, -2.47244, -3.72047, -2.9685, -0.248031, 1.0, -0.248031, -2.9685, -3.72047, 1.0, 2.94676, -2.9685, 1.95463, 1.0, 2.94676, 1.0, 1.95463, -2.9685, 2.94676, 0.751969, 1.95463, -2.72047, 1.95463, 0.751969, 2.94676, -2.72047),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 1, 4, 3, 4, 5, 3, 6, 8, 7, 7, 9, 6, 10, 12, 11, 11, 13, 10, 14, 16, 15, 15, 17, 14)
	],
	"morph_arrays":[]
}

[sub_resource id=22 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.6079999804496765, 0.29781273007392883,
		0.28515201807022095, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=23 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(22)

[sub_resource id=24 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.9725490212440491, 1.0, 1.0, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=25 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(24)

[sub_resource id=26 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.18195976316928864, 0.8207547068595886,
		0.5758285522460938, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=27 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(26)

[sub_resource id=28 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.7406105399131775, 0.8228667378425598,
		0.8396226167678833, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=29 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(28)

[sub_resource id=30 type="ArrayMesh"]

resource_name = "Mesh books002"
surfaces/0 = {
	"material":SubResource(23),
	"primitive":4,
	"arrays":[
		Vector3Array(0.0488952, 0.0977904, -0.0126, 0.0244476, 0.103902, -0.0945, 0.0244476, 0.103902, -0.0126, 0.0488952, 0.0977904, -0.0945, 0.150448, 0.0, -0.0945, 0.0496476, 0.0, -0.0063, 0.0496476, 0.0, -0.0945, 0.0748476, 0.0, -0.0189, 0.100048, 0.0, -0.0189, 0.100048, 0.0, -0.0063, 0.125248, 0.0, -0.0063, 0.125248, 0.0, 0.0, 0.150448, 0.0, 0.0, 0.0748476, 0.0, -0.0063, 0.0, 0.0061119, -0.0945, 0.0488952, 0.0977904, -0.0945, 0.0244476, 0.0, -0.0945, 0.0244476, 0.103902, -0.0945, 0.125248, 0.0945, -0.0063, 0.125248, 0.0, 0.0, 0.125248, 0.0945, 0.0, 0.125248, 0.0, -0.0063, 0.0244476, 0.0, -0.0945, 0.0, 0.0061119, -0.0126, 0.0, 0.0061119, -0.0945, 0.0244476, 0.0, -0.0126, 0.0488952, 0.0977904, -0.0126, 0.0, 0.0061119, -0.0126, 0.0244476, 0.0, -0.0126, 0.0244476, 0.103902, -0.0126, 0.150448, 0.0, -0.0945, 0.150448, 0.0945, 0.0, 0.150448, 0.0, 0.0, 0.150448, 0.0945, -0.0945, 0.150448, 0.0945, 0.0, 0.125248, 0.0945, -0.0063, 0.125248, 0.0945, 0.0, 0.125248, 0.0945, -0.0945, 0.150448, 0.0945, -0.0945, 0.0244476, 0.103902, -0.0945, 0.0, 0.0061119, -0.0126, 0.0244476, 0.103902, -0.0126, 0.0, 0.0061119, -0.0945, 0.0496476, 0.1008, -0.0945, 0.150448, 0.0, -0.0945, 0.0496476, 0.0, -0.0945, 0.0748476, 0.0882, -0.0945, 0.0748476, 0.1008, -0.0945, 0.100048, 0.0882, -0.0945, 0.150448, 0.0945, -0.0945, 0.125248, 0.0945, -0.0945, 0.100048, 0.1008, -0.0945, 0.125248, 0.1008, -0.0945, 0.150448, 0.0945, 0.0, 0.125248, 0.0, 0.0, 0.150448, 0.0, 0.0, 0.125248, 0.0945, 0.0, 0.0244476, 0.0, -0.0945, 0.0488952, 0.0977904, -0.0126, 0.0244476, 0.0, -0.0126, 0.0488952, 0.0977904, -0.0945),
		Vector3Array(0.242535, 0.970143, 0.0, 0.242535, 0.970143, 0.0, 0.242535, 0.970143, 0.0, 0.242535, 0.970143, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -0.242536, -0.970143, 0.0, -0.242536, -0.970143, 0.0, -0.242536, -0.970142, 0.0, -0.242536, -0.970142, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -0.970143, 0.242536, 0.0, -0.970143, 0.242536, 0.0, -0.970142, 0.242536, 0.0, -0.970142, 0.242536, 0.0, 0.0, 2.25299e-07, -1.0, 0.0, 5.37586e-08, -1.0, 0.0, 0.0, -1.0, 0.0, 6.40259e-07, -1.0, 0.0, 0.0, -1.0, 0.0, -7.50794e-08, -1.0, 0.0, -2.32205e-07, -1.0, 0.0, -1.80293e-06, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.970143, -0.242536, 0.0, 0.970143, -0.242536, 0.0, 0.970142, -0.242536, 0.0, 0.970142, -0.242536, 0.0),
		FloatArray(0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 2.32196e-09, 1.0, -1.0, 0.0, -1.61373e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, -5.94408e-08, 1.0, -1.0, 0.0, 8.07426e-08, 1.0, -1.0, 0.0, 4.92451e-08, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -5.80954e-09, 0.0, 1.0, -1.0, -3.1441e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -3.72506e-08, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 5.2528e-08, 2.82383e-15, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 4.49035e-08, -3.37133e-15, 1.0, -1.0, 1.46353e-07, -3.3984e-14, 1.0, -1.0, 1.93651e-09, -3.4914e-15, 1.0, -1.0, 1.57205e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.496063, 1.93377, 3.72047, 0.94164, 0.496063, 0.94164, 3.72047, 1.93377, -5.92313, -2.72047, -1.95463, 0.751969, -1.95463, -2.72047, -2.94676, 0.255906, -3.93888, 0.255906, -3.93888, 0.751969, -4.93101, 0.751969, -4.93101, 1.0, -5.92313, 1.0, -2.94676, 0.751969, 0.0, 0.759374, -1.92501, -2.85001, -0.962504, 1.0, -0.962504, -3.09064, -0.248031, -2.72047, 0.0, 1.0, 0.0, -2.72047, -0.248031, 1.0, -3.72047, 1.93377, -0.496063, 0.94164, -3.72047, 0.94164, -0.496063, 1.93377, 1.92501, -2.85001, 0.0, 0.759374, 0.962504, 1.0, 0.962504, -3.09064, 3.72047, 1.0, 0.0, -2.72047, 0.0, 1.0, 3.72047, -2.72047, 5.92313, 1.0, 4.93101, 0.751969, 4.93101, 1.0, 4.93101, -2.72047, 5.92313, -2.72047, -3.72047, -3.20195, -0.496063, 0.766559, -0.496063, -3.20195, -3.72047, 0.766559, -1.95463, -2.9685, -5.92313, 1.0, -1.95463, 1.0, -2.94676, -2.47244, -2.94676, -2.9685, -3.93888, -2.47244, -5.92313, -2.72047, -4.93101, -2.72047, -3.93888, -2.9685, -4.93101, -2.9685, 5.92313, -2.72047, 4.93101, 1.0, 5.92313, 1.0, 4.93101, -2.72047, 3.72047, 0.766559, 0.496063, -3.20195, 0.496063, 0.766559, 3.72047, -3.20195),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4, 7, 8, 4, 8, 9, 4, 9, 10, 4, 10, 11, 4, 11, 12, 4, 13, 7, 5, 14, 16, 15, 15, 17, 14, 18, 20, 19, 19, 21, 18, 22, 24, 23, 23, 25, 22, 26, 28, 27, 27, 29, 26, 30, 32, 31, 31, 33, 30, 34, 36, 35, 35, 37, 34, 37, 38, 34, 39, 41, 40, 40, 42, 39, 43, 45, 44, 44, 46, 43, 46, 47, 43, 48, 46, 44, 44, 49, 48, 49, 50, 48, 51, 48, 50, 50, 52, 51, 53, 55, 54, 54, 56, 53, 57, 59, 58, 58, 60, 57)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(25),
	"primitive":4,
	"arrays":[
		Vector3Array(0.100048, 0.0882, -0.0189, 0.0748476, 0.0, -0.0189, 0.100048, 0.0, -0.0189, 0.0748476, 0.0882, -0.0189, 0.100048, 0.0882, -0.0189, 0.0748476, 0.0882, -0.0945, 0.0748476, 0.0882, -0.0189, 0.100048, 0.0882, -0.0945),
		Vector3Array(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(3.93888, -2.47244, 2.94676, 1.0, 3.93888, 1.0, 2.94676, -2.47244, 3.93888, 0.255906, 2.94676, -2.72047, 2.94676, 0.255906, 3.93888, -2.72047),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4)
	],
	"morph_arrays":[]
}
surfaces/2 = {
	"material":SubResource(27),
	"primitive":4,
	"arrays":[
		Vector3Array(0.100048, 0.1008, -0.0063, 0.100048, 0.0882, -0.0189, 0.100048, 0.0, -0.0063, 0.100048, 0.1008, -0.0945, 0.100048, 0.0882, -0.0945, 0.100048, 0.0, -0.0189, 0.125248, 0.0945, -0.0063, 0.100048, 0.0, -0.0063, 0.125248, 0.0, -0.0063, 0.100048, 0.1008, -0.0063, 0.125248, 0.1008, -0.0063, 0.125248, 0.1008, -0.0063, 0.100048, 0.1008, -0.0945, 0.100048, 0.1008, -0.0063, 0.125248, 0.1008, -0.0945, 0.125248, 0.0945, -0.0945, 0.125248, 0.1008, -0.0063, 0.125248, 0.0945, -0.0063, 0.125248, 0.1008, -0.0945),
		Vector3Array(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0),
		FloatArray(0.0, -1.11752e-07, 1.0, 1.0, 0.0, -1.05022e-07, 1.0, 1.0, 0.0, -2.019e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-0.248031, -2.9685, -0.744094, -2.47244, -0.248031, 1.0, -3.72047, -2.9685, -3.72047, -2.47244, -0.744094, 1.0, 4.93101, -2.72047, 3.93888, 1.0, 4.93101, 1.0, 3.93888, -2.9685, 4.93101, -2.9685, 4.93101, 0.751969, 3.93888, -2.72047, 3.93888, 0.751969, 4.93101, -2.72047, 3.72047, -2.72047, 0.248031, -2.9685, 0.248031, -2.72047, 3.72047, -2.9685),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 1, 4, 3, 5, 1, 2, 6, 8, 7, 7, 9, 6, 9, 10, 6, 11, 13, 12, 12, 14, 11, 15, 17, 16, 16, 18, 15)
	],
	"morph_arrays":[]
}
surfaces/3 = {
	"material":SubResource(29),
	"primitive":4,
	"arrays":[
		Vector3Array(0.0748476, 0.0, -0.0189, 0.0748476, 0.1008, -0.0063, 0.0748476, 0.0, -0.0063, 0.0748476, 0.0882, -0.0189, 0.0748476, 0.1008, -0.0945, 0.0748476, 0.0882, -0.0945, 0.0496476, 0.1008, -0.0945, 0.0496476, 0.0, -0.0063, 0.0496476, 0.1008, -0.0063, 0.0496476, 0.0, -0.0945, 0.0748476, 0.1008, -0.0063, 0.0496476, 0.0, -0.0063, 0.0748476, 0.0, -0.0063, 0.0496476, 0.1008, -0.0063, 0.0748476, 0.1008, -0.0063, 0.0496476, 0.1008, -0.0945, 0.0496476, 0.1008, -0.0063, 0.0748476, 0.1008, -0.0945),
		Vector3Array(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0),
		FloatArray(0.0, 2.02219e-08, -1.0, 1.0, 0.0, 1.07494e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 1.27716e-07, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.744094, 1.0, 0.248031, -2.9685, 0.248031, 1.0, 0.744094, -2.47244, 3.72047, -2.9685, 3.72047, -2.47244, -3.72047, -2.9685, -0.248031, 1.0, -0.248031, -2.9685, -3.72047, 1.0, 2.94676, -2.9685, 1.95463, 1.0, 2.94676, 1.0, 1.95463, -2.9685, 2.94676, 0.751969, 1.95463, -2.72047, 1.95463, 0.751969, 2.94676, -2.72047),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 1, 4, 3, 4, 5, 3, 6, 8, 7, 7, 9, 6, 10, 12, 11, 11, 13, 10, 14, 16, 15, 15, 17, 14)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="bookcaseOpen(Clone)" type="MeshInstance" parent="."]

mesh = SubResource(3)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)

[node name="books(Clone)" type="MeshInstance" parent="."]

mesh = SubResource(12)
visible = true
transform = Transform(-0.999999, 0.0, 0.00156289, 0.0, 1.0, 0.0, -0.00156289, 0.0, -0.999999, 0.190228, 0.128664, -0.175599)

[node name="books(Clone)001" type="MeshInstance" parent="."]

mesh = SubResource(21)
visible = true
transform = Transform(-0.999999, 0.0, 0.00156289, 0.0, 1.0, 0.0, -0.00156289, 0.0, -0.999999, 0.341583, 0.374768, -0.175599)

[node name="books(Clone)002" type="MeshInstance" parent="."]

mesh = SubResource(30)
visible = true
transform = Transform(-0.999999, 0.0, 0.00156289, 0.0, 1.0, 0.0, -0.00156289, 0.0, -0.999999, 0.214487, 0.608719, -0.175599)
