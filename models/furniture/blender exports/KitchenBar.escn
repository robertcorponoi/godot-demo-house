[gd_scene load_steps=1 format=2]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.8962264060974121, 0.6015712022781372,
		0.39315590262413025, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=3 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.7406105399131775, 0.8228667378425598,
		0.8396226167678833, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=4 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(3)

[sub_resource id=5 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.6780000329017639, 0.4559476673603058,
		0.299030601978302, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource id=6 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(5)

[sub_resource id=7 type="ArrayMesh"]

resource_name = "Mesh kitchenBar"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(0.215, -0.22322, -0.065, -0.215, -0.22322, 0.065, -0.215, -0.22322, -0.065, 0.215, -0.22322, 0.065, 0.215, -0.164978, 0.065, -0.215, -0.22322, 0.065, 0.215, -0.22322, 0.065, -0.215, -0.164978, 0.065, 0.215, -0.22322, -0.065, 0.215, -0.164978, 0.065, 0.215, -0.22322, 0.065, 0.215, -0.164978, -0.065, 0.215, 0.16678, -0.085, 0.215, 0.16678, 0.085, 0.215, -0.164978, 0.085, 0.215, -0.164978, -0.085, -0.215, 0.16678, -0.085, -0.215, -0.164978, 0.085, -0.215, 0.16678, 0.085, -0.215, -0.164978, 0.065, -0.215, -0.22322, 0.065, -0.215, -0.22322, 0.065, -0.215, 0.16678, -0.085, -0.215, -0.164978, -0.065, -0.215, -0.164978, -0.065, -0.215, -0.164978, -0.085, -0.215, -0.22322, -0.065, 0.215, -0.164978, 0.085, 0.188156, -0.138134, 0.085, -0.215, -0.164978, 0.085, 0.188156, -0.138134, 0.085, 0.215, -0.164978, 0.085, 0.215, 0.16678, 0.085, 0.188156, 0.139936, 0.085, 0.188156, 0.139936, 0.085, 0.215, 0.16678, 0.085, -0.188156, 0.139936, 0.085, -0.188156, -0.138134, 0.085, -0.215, -0.164978, 0.085, 0.188156, -0.138134, 0.085, -0.215, 0.16678, 0.085, -0.215, 0.16678, 0.085, -0.188156, -0.138134, 0.085, -0.188156, 0.139936, 0.085, -0.215, 0.16678, 0.085, -0.188156, 0.139936, 0.085, 0.215, 0.16678, 0.085, 0.215, -0.164978, 0.065, -0.215, -0.164978, 0.085, -0.215, -0.164978, 0.065, 0.215, -0.164978, 0.085, -0.215, -0.164978, -0.065, 0.215, -0.22322, -0.065, -0.215, -0.22322, -0.065, 0.215, -0.164978, -0.065, 0.215, -0.164978, -0.085, -0.215, -0.164978, -0.065, -0.215, -0.164978, -0.085, 0.215, -0.164978, -0.065, -0.215, -0.164978, -0.085, -0.188156, -0.138134, -0.085, 0.215, -0.164978, -0.085, -0.188156, -0.138134, -0.085, -0.215, -0.164978, -0.085, -0.215, 0.16678, -0.085, -0.188156, 0.139936, -0.085, -0.188156, 0.139936, -0.085, -0.215, 0.16678, -0.085, 0.188156, 0.139936, -0.085, 0.188156, -0.138134, -0.085, 0.215, -0.164978, -0.085, -0.188156, -0.138134, -0.085, 0.215, 0.16678, -0.085, 0.188156, 0.139936, -0.085, -0.215, 0.16678, -0.085, 0.167814, 0.119594, 0.085, -0.167814, -0.117792, 0.085, 0.167814, -0.117792, 0.085, -0.167814, -0.117792, 0.085, 0.167814, 0.119594, 0.085, -0.167814, 0.119594, 0.085, -0.167814, 0.119594, -0.085, 0.167814, -0.117792, -0.085, -0.167814, -0.117792, -0.085, 0.167814, -0.117792, -0.085, -0.167814, 0.119594, -0.085, 0.167814, 0.119594, -0.085),
		Vector3Array(0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -3.55096e-07, -1.0, 0.0, -3.55096e-07, -1.0, 0.0, -3.55096e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 6.45463e-07, 1.0, 0.0, 6.45463e-07, 1.0, 0.0, 6.45463e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -6.45463e-07, 1.0, 0.0, -6.45463e-07, 1.0, 0.0, -6.45463e-07, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 6.45463e-07, -1.0, 0.0, 6.45463e-07, -1.0, 0.0, 6.45463e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -7.37551e-07, -1.0, 0.0, -7.37551e-07, -1.0, 0.0, -7.37551e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0),
		FloatArray(-1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -3.55096e-07, 3.60778e-08, 1.0, 1.0, -3.55096e-07, 3.60778e-08, 1.0, 1.0, -3.55096e-07, 3.60778e-08, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 7.81013e-08, 0.0, 1.0, 1.0, 8.49986e-08, 0.0, 1.0, 1.0, 9.5033e-09, 0.0, 1.0, 1.0, 2.83757e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -3.04229e-07, 0.0, 1.0, 1.0, -1.50961e-07, 0.0, 1.0, 1.0, -3.02047e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 8.18309e-08, 0.0, 1.0, -1.0, 8.49986e-08, 0.0, 1.0, -1.0, 9.5033e-09, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -2.39771e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -1.35107e-07, 0.0, 1.0, -1.0, -1.5395e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 5.21363e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 5.98817e-08, 0.0, 1.0, -1.0, -2.38831e-08, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -1.88113e-07, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-16.9291, -5.69291, 0.0, -0.574803, 0.0, -5.69291, -16.9291, -0.574803, 16.9291, -1.29299, 0.0, 1.0, 16.9291, 1.0, 0.0, -1.29299, 6.69291, 1.0, 1.5748, -1.29299, 1.5748, 1.0, 6.69291, -1.29299, 7.48031, -14.3543, 0.787402, -14.3543, 0.787402, -1.29299, 7.48031, -1.29299, -7.48031, -14.3543, -0.787402, -1.29299, -0.787402, -14.3543, -1.5748, -1.29299, -1.5748, 1.0, -1.5748, 1.0, -7.48031, -14.3543, -6.69291, -1.29299, -6.69291, -1.29299, -7.48031, -1.29299, -6.69291, 1.0, 16.9291, -1.29299, 15.8723, -2.34984, 0.0, -1.29299, 15.8723, -2.34984, 16.9291, -1.29299, 16.9291, -14.3543, 15.8723, -13.2975, 15.8723, -13.2975, 16.9291, -14.3543, 1.05686, -13.2975, 1.05686, -2.34984, 0.0, -1.29299, 15.8723, -2.34984, 0.0, -14.3543, 0.0, -14.3543, 1.05686, -2.34984, 1.05686, -13.2975, 0.0, -14.3543, 1.05686, -13.2975, 16.9291, -14.3543, -16.9291, -0.574803, 0.0, 0.212598, 0.0, -0.574803, -16.9291, 0.212598, 0.0, -1.29299, -16.9291, 1.0, 0.0, 1.0, -16.9291, -1.29299, -16.9291, -6.48031, 0.0, -5.69291, 0.0, -6.48031, -16.9291, -5.69291, 0.0, -1.29299, -1.05686, -2.34984, -16.9291, -1.29299, -1.05686, -2.34984, 0.0, -1.29299, 0.0, -14.3543, -1.05686, -13.2975, -1.05686, -13.2975, 0.0, -14.3543, -15.8723, -13.2975, -15.8723, -2.34984, -16.9291, -1.29299, -1.05686, -2.34984, -16.9291, -14.3543, -15.8723, -13.2975, 0.0, -14.3543, 15.0714, -12.4966, 1.85772, -3.15071, 15.0714, -3.15071, 1.85772, -3.15071, 15.0714, -12.4966, 1.85772, -12.4966, -1.85772, -12.4966, -15.0714, -3.15071, -1.85772, -3.15071, -15.0714, -3.15071, -1.85772, -12.4966, -15.0714, -12.4966),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 4, 6, 5, 5, 7, 4, 8, 10, 9, 11, 8, 9, 12, 11, 9, 13, 12, 9, 9, 14, 13, 12, 15, 11, 16, 18, 17, 17, 19, 16, 19, 20, 16, 21, 23, 22, 24, 25, 16, 26, 24, 20, 27, 29, 28, 30, 32, 31, 30, 33, 32, 34, 36, 35, 37, 39, 38, 38, 40, 37, 41, 43, 42, 44, 46, 45, 47, 49, 48, 48, 50, 47, 51, 53, 52, 52, 54, 51, 55, 57, 56, 56, 58, 55, 59, 61, 60, 62, 64, 63, 62, 65, 64, 66, 68, 67, 69, 71, 70, 70, 72, 69, 72, 73, 69, 72, 74, 73, 75, 77, 76, 78, 80, 79, 81, 83, 82, 84, 86, 85)
	],
	"morph_arrays":[]
}
surfaces/1 = {
	"material":SubResource(4),
	"primitive":4,
	"arrays":[
		Vector3Array(-0.215, 0.19678, -0.105, -0.215, 0.16678, 0.105, -0.215, 0.19678, 0.105, -0.215, 0.16678, 0.085, -0.215, 0.16678, -0.085, -0.215, 0.16678, -0.105, 0.215, 0.16678, 0.085, 0.215, 0.19678, 0.105, 0.215, 0.16678, 0.105, 0.215, 0.19678, -0.105, 0.215, 0.16678, -0.085, 0.215, 0.16678, -0.105, 0.215, 0.19678, 0.105, -0.215, 0.16678, 0.105, 0.215, 0.16678, 0.105, -0.215, 0.19678, 0.105, 0.215, 0.19678, 0.105, -0.215, 0.19678, -0.105, -0.215, 0.19678, 0.105, 0.215, 0.19678, -0.105, 0.215, 0.16678, 0.085, -0.215, 0.16678, 0.105, -0.215, 0.16678, 0.085, 0.215, 0.16678, 0.105, -0.215, 0.19678, -0.105, 0.215, 0.16678, -0.105, -0.215, 0.16678, -0.105, 0.215, 0.19678, -0.105, 0.215, 0.16678, -0.105, -0.215, 0.16678, -0.085, -0.215, 0.16678, -0.105, 0.215, 0.16678, -0.085),
		Vector3Array(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0),
		FloatArray(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-8.26772, -15.5354, 0.0, -14.3543, 0.0, -15.5354, -0.787402, -14.3543, -7.48031, -14.3543, -8.26772, -14.3543, 0.787402, -14.3543, 0.0, -15.5354, 0.0, -14.3543, 8.26772, -15.5354, 7.48031, -14.3543, 8.26772, -14.3543, 16.9291, -15.5354, 0.0, -14.3543, 16.9291, -14.3543, 0.0, -15.5354, 16.9291, 1.0, 0.0, -7.26772, 0.0, 1.0, 16.9291, -7.26772, -16.9291, 0.212598, 0.0, 1.0, 0.0, 0.212598, -16.9291, 1.0, 0.0, -15.5354, -16.9291, -14.3543, 0.0, -14.3543, -16.9291, -15.5354, -16.9291, -7.26772, 0.0, -6.48031, 0.0, -7.26772, -16.9291, -6.48031),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 1, 3, 0, 3, 4, 0, 4, 5, 0, 6, 8, 7, 7, 9, 6, 9, 10, 6, 9, 11, 10, 12, 14, 13, 13, 15, 12, 16, 18, 17, 17, 19, 16, 20, 22, 21, 21, 23, 20, 24, 26, 25, 25, 27, 24, 28, 30, 29, 29, 31, 28)
	],
	"morph_arrays":[]
}
surfaces/2 = {
	"material":SubResource(6),
	"primitive":4,
	"arrays":[
		Vector3Array(0.188156, -0.138134, 0.085, 0.167814, -0.117792, 0.085, -0.188156, -0.138134, 0.085, 0.167814, -0.117792, 0.085, 0.188156, -0.138134, 0.085, 0.188156, 0.139936, 0.085, 0.167814, 0.119594, 0.085, 0.167814, 0.119594, 0.085, 0.188156, 0.139936, 0.085, -0.167814, 0.119594, 0.085, -0.167814, -0.117792, 0.085, -0.188156, -0.138134, 0.085, 0.167814, -0.117792, 0.085, -0.188156, -0.138134, 0.085, -0.167814, -0.117792, 0.085, -0.188156, 0.139936, 0.085, -0.167814, 0.119594, 0.085, -0.188156, 0.139936, 0.085, -0.167814, 0.119594, 0.085, 0.188156, 0.139936, 0.085, -0.188156, -0.138134, -0.085, -0.167814, -0.117792, -0.085, 0.188156, -0.138134, -0.085, -0.167814, -0.117792, -0.085, -0.188156, -0.138134, -0.085, -0.188156, 0.139936, -0.085, -0.167814, -0.117792, -0.085, -0.188156, 0.139936, -0.085, -0.167814, 0.119594, -0.085, 0.167814, 0.119594, -0.085, 0.167814, -0.117792, -0.085, 0.188156, -0.138134, -0.085, -0.167814, -0.117792, -0.085, 0.188156, -0.138134, -0.085, 0.167814, -0.117792, -0.085, 0.188156, 0.139936, -0.085, 0.188156, 0.139936, -0.085, 0.167814, -0.117792, -0.085, 0.167814, 0.119594, -0.085, 0.188156, 0.139936, -0.085, 0.167814, 0.119594, -0.085, -0.188156, 0.139936, -0.085),
		Vector3Array(0.0, -4.86654e-07, 1.0, 0.0, -4.86654e-07, 1.0, 0.0, -4.86654e-07, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.09129e-06, 1.0, 0.0, 1.09129e-06, 1.0, 0.0, 1.09129e-06, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -4.86654e-07, 1.0, 0.0, -4.86654e-07, 1.0, 0.0, -4.86654e-07, 1.0, 0.0, -4.86654e-07, -1.0, 0.0, -4.86654e-07, -1.0, 0.0, -4.86654e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -5.45645e-07, -1.0, 0.0, -5.45645e-07, -1.0, 0.0, -5.45645e-07, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 9.73308e-07, -1.0, 0.0, 9.73308e-07, -1.0, 0.0, 9.73308e-07, -1.0),
		FloatArray(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.06598e-07, 0.0, 1.0, 1.0, 7.81013e-08, 0.0, 1.0, 1.0, 2.83757e-07, 0.0, 1.0, 1.0, 1.25409e-06, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -1.50961e-07, 0.0, 1.0, 1.0, -1.39832e-07, 0.0, 1.0, 1.0, -3.02047e-07, 0.0, 1.0, 1.0, -3.13521e-07, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 6.69126e-08, 0.0, 1.0, -1.0, 6.69126e-08, 0.0, 1.0, -1.0, 6.69126e-08, 0.0, 1.0, -1.0, 5.98817e-08, 0.0, 1.0, -1.0, 6.17568e-07, 0.0, 1.0, -1.0, 5.21363e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, -2.39771e-08, 0.0, 1.0, -1.0, -1.33825e-07, 0.0, 1.0, -1.0, -1.5395e-07, 0.0, 1.0, -1.0, -3.13522e-07, 0.0, 1.0, -1.0, -2.38831e-08, 0.0, 1.0, -1.0, -1.88113e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(15.8723, -2.34984, 15.0714, -3.15071, 1.05686, -2.34984, 15.0714, -3.15071, 15.8723, -2.34984, 15.8723, -13.2975, 15.0714, -12.4966, 15.0714, -12.4966, 15.8723, -13.2975, 1.85772, -12.4966, 1.85772, -3.15071, 1.05686, -2.34984, 15.0714, -3.15071, 1.05686, -2.34984, 1.85772, -3.15071, 1.05686, -13.2975, 1.85772, -12.4966, 1.05686, -13.2975, 1.85772, -12.4966, 15.8723, -13.2975, -1.05686, -2.34984, -1.85772, -3.15071, -15.8723, -2.34984, -1.85772, -3.15071, -1.05686, -2.34984, -1.05686, -13.2975, -1.85772, -3.15071, -1.05686, -13.2975, -1.85772, -12.4966, -15.0714, -12.4966, -15.0714, -3.15071, -15.8723, -2.34984, -1.85772, -3.15071, -15.8723, -2.34984, -15.0714, -3.15071, -15.8723, -13.2975, -15.8723, -13.2975, -15.0714, -3.15071, -15.0714, -12.4966, -15.8723, -13.2975, -15.0714, -12.4966, -1.05686, -13.2975),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 3, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 15, 16, 14, 17, 19, 18, 20, 22, 21, 23, 25, 24, 26, 28, 27, 28, 29, 27, 30, 32, 31, 33, 35, 34, 36, 38, 37, 39, 41, 40)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="kitchenBar(Clone)" type="MeshInstance" parent="."]

mesh = SubResource(7)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.215, 0.22322, -0.105)
